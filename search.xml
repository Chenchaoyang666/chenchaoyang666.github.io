<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RegExp基础语法</title>
      <link href="posts/59605/"/>
      <url>posts/59605/</url>
      
        <content type="html"><![CDATA[<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>创建正则表达式对象时，可以设置’m’、’i’、’g’这三个标志，分别对应多行模式、不区分大小模式和全局模式三种</p><p>全局模式 g:<br>默认地，第一次匹配成功后，正则对象就停止向下匹配了。g 修饰符表示全局匹配(global)，设置’g’标志后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2a,3a&#39;</span><br><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;g,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2b,3b&#39;</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>特点：javascript 中的正则表达式最大的特点是不支持空白，必须写在一行中</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配ab</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a b/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab /</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">元字符         名称              匹配对象</span><br><span class="line">.             点号               单个任意字符(除回车\r、换行\n、行分隔符\u2028和段分隔符\u2029外)</span><br><span class="line">[]            字符组             列出的单个任意字符</span><br><span class="line">[^]           排除型字符组        未列出的单个任意字符</span><br><span class="line">?             问号               匹配<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">*             星号               匹配<span class="number">0</span>交或多次</span><br><span class="line">+             加号               匹配<span class="number">1</span>次或多次</span><br><span class="line">&#123;min,max&#125;     区间量词            匹配至少min次，最多max次</span><br><span class="line">^             脱字符             行的起始位置</span><br><span class="line">$             美元符             行的结束位置</span><br><span class="line">|             竖线               分隔两边的任意一个表达式</span><br><span class="line">()            括号               限制多选结构的范围，标注量词作用的元素，为反向引用捕获文本</span><br><span class="line">\<span class="number">1</span>,\<span class="number">2.</span>..      反向引用            匹配之前的第一、第二...组括号内的表达式匹配的文本</span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li>【1】因为元字符有特殊的含义，所以无法直接匹配。如果要匹配它们本身，则需要在它们前面加上反斜杠()</li></ul><div class="note info flat">            <p>右方括号]和右花括号}不需要转义</p>          </div><ul><li>【2】’&#39;加非元字符，表示一些不能打印的特殊字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span>        NUL字符\u0000</span><br><span class="line">[\b]      匹配退格符\u0008，不要与\b混淆</span><br><span class="line">\t        制表符\u0009</span><br><span class="line">\n        换行符\u000A</span><br><span class="line">\v        垂直制表符\u000B</span><br><span class="line">\f        换页符\u000C</span><br><span class="line">\r        回车符\u000D</span><br><span class="line">\xnn      由十六进制数nn指定的拉丁字符</span><br><span class="line">\uxxxx    由十六进制数xxxx指定的Unicode字符(\u4e00-\u9fa5代表中文)</span><br><span class="line">\cX       控制字符^X，表示ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>‘&#39;加任意其他字符，默认情况就是匹配此字符，也就是说，反斜线()被忽略了</p>          </div><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><ul><li>范围</li></ul><p>正则表达式通过连字符(-)提供了范围表示法，可以简化字符组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/[<span class="number">0123456789</span>]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[<span class="number">0</span><span class="number">-9</span>]/</span><br><span class="line">/[abcdefghijklmnopqrstuvwxyz]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[a-z]/</span><br></pre></td></tr></table></figure><ul><li>排除</li></ul><p>字符组的另一个类型是排除型字符组，在左方括号后紧跟一个脱字符’^’表示，表示在当前位置匹配一个没有列出的字符，所以[^0-9]表示 0-9 以外的字符</p><div class="note info flat">            <p>在字符组内部，脱字符’^’表示排除，而在字符组外部，脱字符’^’表示一个行锚点</p>          </div><div class="note info flat">            <p>^符号是元字符，在字符组中只要^符号不挨着左方括号就可以表示其本身含义，不转义也可以</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配abc和^符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c\^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[\^a-c]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>简记</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d     数字，等同于[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\D     非数字，等同于[^<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\s     空白字符，等同于[\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\S     非空白字符，等同于[^\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\w     字母、数字、下划线，等同于[<span class="number">0</span><span class="number">-9</span>A-Za-z_](汉字不属于\w)</span><br><span class="line">\W     非字母、数字、下划线，等同于[^<span class="number">0</span><span class="number">-9</span>A-Za-z_]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，量词都是贪婪模式(greedy quantifier)，即匹配到下一个字符不满足匹配规则为止</span></span><br><span class="line">&#123;n&#125;       匹配n次</span><br><span class="line">&#123;n,m&#125;     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;      匹配至少n次</span><br><span class="line">?         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><p>懒惰模式(lazy quantifier)和贪婪模式相对应，在量词后加问号’?’表示，表示尽可能少的匹配，一旦条件满足就再不往下匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125;?       匹配n次</span><br><span class="line">&#123;n,m&#125;?     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;?      匹配至少n次</span><br><span class="line">??         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*?         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+?         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>括号有两个功能，分别是分组和引用。具体而言，用于限定量词或选择项的作用范围，也可以用于捕获文本并进行引用或反向引用</p><ul><li>分组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希望字符串'ab'重复出现2次，应该写为(ab)&#123;2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//身份证长度有15位和18位两种</span></span><br><span class="line">/\d&#123;<span class="number">15</span>&#125;(\d&#123;<span class="number">3</span>&#125;)?<span class="regexp">/;</span></span><br></pre></td></tr></table></figure><ul><li>捕获</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RegExp.$1\RegExp.$2\RegExp.$3……到RegExp.$9分别用于存储第一、第二……第九个匹配的捕获组。在调用exec()或test()方法时，这些属性会被自动填充</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>.test(<span class="string">"2016-06-23"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//'2016'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//'06'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">4</span>); <span class="comment">//''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在replace()方法中也可以引用分组，形式是$num，num是对应分组的编号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2000-01-01"</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>, <span class="string">"$3-$2-$1"</span>)); <span class="comment">//'01-01-2000'</span></span><br></pre></td></tr></table></figure><ul><li>反向引用<br>反向引用允许在正则表达式内部引用之前捕获分组匹配的文本，形式是\num，num 表示所引用分组的编号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始标签</span></span><br><span class="line">&lt;([^&gt;]+)&gt;</span><br><span class="line"><span class="comment">//标签内容</span></span><br><span class="line">[\s\S]*?</span><br><span class="line"><span class="comment">//匹配成对的标签</span></span><br><span class="line">/&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">console.log(/</span>&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/.test('&lt;a&gt;123&lt;/</span>a&gt;<span class="string">'));//true</span></span><br><span class="line"><span class="string">console.log(/&lt;([^&gt;]+)&gt;[\s\S]*?&lt;\/\1&gt;/.test('</span>&lt;a&gt;<span class="number">123</span>&lt;<span class="regexp">/b&gt;'));/</span><span class="regexp">/false</span></span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开头</span></span><br><span class="line">(<span class="number">0</span>|\+<span class="number">86</span>)?</span><br><span class="line"><span class="comment">//前3位</span></span><br><span class="line"><span class="number">13</span>\d|<span class="number">14</span>[<span class="number">579</span>]|<span class="number">15</span>[<span class="number">0</span><span class="number">-35</span><span class="number">-9</span>]|<span class="number">17</span>[<span class="number">0135</span><span class="number">-8</span>]|<span class="number">18</span>\d</span><br><span class="line"><span class="comment">//后8位</span></span><br><span class="line">\d&#123;<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/(0|\+86)?(13\d|14[579]|15[0-35-9]|17[0135-8]|18\d)\d&#123;8&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'13453250661'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1913250661'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1345325061'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>在正则表达式中，有些结构并不真正匹配文本，而只负责判断在某个位置左/右侧是否符合要求，这种结构被称为断言(assertion)，也称为锚点(anchor)，常见的断言有 3 种：单词边界、行开头结尾、环视</p><ul><li>单词边界<br>正则表达式提供了专用的单词边界(word boundary)，记为\b，它匹配的是’单词边界’位置，而不是字符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an apple"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"a an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"and"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"ban"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li><p>起始结束<br>常见的断言还有^和$，它们分别匹配字符串的开始位置和结束位置，所以可以用来判断整个字符串能否由表达式匹配</p></li><li><p>环视<br>javascript 只支持正序环视，相当于只支持向前看，不支持往回看;而正序环视又分为肯定正序环视和否定正序环视<br>肯定正序环视的记法是(?=n)，表示前面必须是 n 才匹配；否定正序环视的记忆法是(?!n)，表示前面必须不是 n 才匹配</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//['a']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)b/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['ab']</span></span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从上到下，优先级逐渐降低</span></span><br><span class="line">\                            转义符</span><br><span class="line">() (?!) (?=) []              括号、字符组、环视</span><br><span class="line">* + ? &#123;n&#125; &#123;n,&#125; &#123;n,m&#125;         量词</span><br><span class="line">^ $                          起始结束位置</span><br><span class="line">|                            选择</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作流程</title>
      <link href="posts/29524/"/>
      <url>posts/29524/</url>
      
        <content type="html"><![CDATA[<h2 id="推送代码到远端"><a href="#推送代码到远端" class="headerlink" title="推送代码到远端"></a>推送代码到远端</h2><p>日常开发完一块功能，要把代码推送到远端保存时，一般是按如下步骤进行操作：</p><ul><li><code>git status</code> 显示本地仓库的状态。如果此时显示远端没有更新的代码，接着执行以下步骤；</li><li><code>git add &lt;filePath&gt;</code> 把此次改动的文件加入本地缓存区；</li><li><code>git commit -m &#39;msg&#39;</code> 把文件提交到本地仓库，并一同带上此次修改信息；</li><li><code>git push origin &lt;branchName&gt;</code> 把当前本地分支的代码推送到相应的远程分支上。</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>1 创建并切换到新分支</li></ul><p>在日常功能开发时，首先是从主分支检出新分支作为功能开发分支，此时的本地仓库当前分支需要为主分支，且保证本地仓库版本与远端一致。然后，基于主分支创建自己的新分支，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>执行完该命令，你会得到一个新的本地分支，并且当前分支已切换到新创建的分支上。这其实是两个步骤：创建分支，切换分支。你当然可以分开执行下面两行命令，达到同样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchName&gt;</span><br><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure><ul><li>2 显示分支</li></ul><p>需要显示工程下有多少个分支时，使用命令：<code>git branch</code>。其中，带有 * 的代表当前分支。加上 -v 参数，你可以在显示分支时，一并显示各个分支最新一次的提交：<code>git branch -v</code>。除此之外，你还可以使用命令 <code>git branch -vv</code> 来显示所有分支，同时带有每个分支对应的远程分支，及最新的一次提交。</p><ul><li>3 推送分支到远端</li></ul><p>当你开发完业务功能，需要推送到远端保存时，使用 push 命名：<code>git push origin &lt;branchName&gt;</code></p><ul><li>4 拉取分支</li></ul><p>在上述 1 章节介绍执行 <code>git status</code> 后，如果显示本地仓库代码并非最新时，需要是先拉取远端代码，把本地代码保持最新，之后提交到远端才可能避免冲突。但是，如果本地分支没有与某个远程分支建立联系（例如新建工程第一次提交的时候），要先建立联系，而推送本地分支到远端时可以一并建立联系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>这样就会在远端也建立 branchName 分支，并与本地的 branchName 分支建立了联系。当需要拉取远程分支到本地的时候就可以使用命令：<code>git pull origin &lt;branchName&gt;</code>此外，<code>git fetch</code> 可以把远程的数据抓取到本地，但是不会修改本地的内容，需要自己手动 merge： <code>git merge</code>。而刚才说的 <code>git pull</code> 命令，其实正是合并了上面两条命令的功能，在抓取后一并修改。</p><ul><li>5 分支的合并</li></ul><p>开发完成，我们需要把功能分支合并会主分支。使用 merge 方式，进行开发分支合并到 master 主分支的场景时，我的操作步骤如下：<br>首先检出当前分支，例如是开发分支，然后我们要合并 master 分支进开发分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 切换到本地 master 分支，使用 git pull 保证本地 master 是最新的</span><br><span class="line">2 切换到本地的开发分支，使用合并的命令：git merge master，将 master 合并进开发分支</span><br><span class="line">3 把本地分支 git push 推送到远端</span><br><span class="line">4 再在本地切换到 master 分支，使用合并分支的代码：git merge &lt;开发分支名&gt;，把功能代码合并进主分支</span><br><span class="line">5 使用 git push 把 master 分支推送到远程</span><br></pre></td></tr></table></figure><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p><a href="https://blog.csdn.net/web_csdn_share/article/details/79243308" target="_blank" rel="noopener">Git常用命令及方法大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css盒模型及布局</title>
      <link href="posts/17705/"/>
      <url>posts/17705/</url>
      
        <content type="html"><![CDATA[<h2 id="普通盒模型"><a href="#普通盒模型" class="headerlink" title="普通盒模型"></a>普通盒模型</h2><p>在 CSS 中盒模型被分为两种，第一种是 W3C 的标准模型，第二种是 IE 怪异盒模型。不同之处在于后者的宽高定义的是可见元素框的尺寸，而不是元素框的内容区尺寸。目前对于浏览器大多数元素都是基于 W3C 标准的盒模型，但对于表单<code>form</code>中的部分元素还是基于 IE 的怪异盒模型，如<code>input</code>里的<code>radio</code>、<code>checkbox</code>、<code>button</code>等元素，如果给其设置<code>border</code>和<code>padding</code>它们也只会往元素盒内延伸<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/1.png" alt=""><br>在 W3C 的标准模型下，宽度和高度仅仅包含了内容宽度，除去了边框和内边距两个区域，这样为 web 设计师处理效果带来了不少麻烦。为了解决这个问题，CSS3 新增了一个盒模型属性<code>box-sizing</code>，能够事先定义盒模型的尺寸解析方式</p><blockquote><p>box-sizing<br>   值: content-box | bordrer-box | padding-box | inherit<br>   初始值: content-box<br>   应用于: 块级元素和替换元素<br>   继承性: 无</p></blockquote><div class="note info flat">            <p>注意 1：只有 firefox 浏览器支持 padding-box 属性值</p>          </div><div class="note info flat">            <p>注意 2：IE 浏览器在 getComputedStyle 得到 width/height 是按照标准模式计算的，而不论 box-sizing 的取值</p>          </div><h2 id="弹性盒模型-flex"><a href="#弹性盒模型-flex" class="headerlink" title="弹性盒模型(flex)"></a>弹性盒模型(flex)</h2><p>要让一个元素变成伸缩容器，需要使用 display 属性。采用 flex 布局的元素，称为伸缩容器(flex container)，容器内的子元素称为伸缩项目(flex item)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;弹性盒模型: 块级伸缩容器 | 内联伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">display: flex | inline-flex;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/CSS_flex.png" alt=""><br>【1】伸缩流方向:指定主轴的方向(即伸缩项目在伸缩容器中的排列方向)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流方向: 水平方向 | 反向水平 | 垂直方向 | 反向垂直</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-direction: row[默认] | row-reverse | column | column-reverse</span><br></pre></td></tr></table></figure><p>【2】伸缩流换行:指定伸缩项目溢出伸缩容器时是否换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩行换行:不换行 | 换行 | 反转换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-wrap: nowrap[默认] | wrap | wrap-reverse</span><br></pre></td></tr></table></figure><p>【3】伸缩流:伸缩流方向与伸缩行换行的缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流: 伸缩流方向 | 伸缩行换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-flow: &lt;flex-direction&gt; | &lt;flex-wrap&gt;</span><br><span class="line">[默认值] flex-flow: row nowrap</span><br></pre></td></tr></table></figure><p>【4】主轴对齐:用来设置伸缩容器当前行伸缩项目在主轴方向的对齐方式，指定如何在伸缩项目之间分布伸缩容器额外空间;当一行上的所伸缩项目不能伸缩或可伸缩已达到最大长度时，这一属性才会对伸缩容器额外空间进行分配。当伸缩项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主轴对齐方式: 左对齐 | 居中对齐 | 右对齐 | 两端对齐 | 扩散对齐</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">justify-content: flex-start[默认] | center | flex-end | space-between | space-around</span><br></pre></td></tr></table></figure><p>【5】侧轴对齐:用来设置伸缩容器当前行在侧轴方向的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 基线对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-items: flex-start | center | flex-end | baseline | stretch[默认]</span><br></pre></td></tr></table></figure><p>【6】堆栈伸缩行:指定多个伸缩项目行在侧轴的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 两端对齐 | 扩散对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-content: flex-start | center | flex-end | space-between | space-around | stretch[默认]</span><br></pre></td></tr></table></figure><h3 id="flex-兼容"><a href="#flex-兼容" class="headerlink" title="flex 兼容"></a>flex 兼容</h3><div class="note info flat">            <p>为适配旧版设备需要添加-webkit-前缀、 -ms- 或 -moz-</p>          </div><div class="note info flat">            <p>flex 是 flex-grow、flex-shrink、flex-basis 的缩写</p>          </div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*display*/</span></span><br><span class="line"><span class="selector-class">.display_flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-inline-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩流方向*/</span></span><br><span class="line"><span class="selector-class">.flex-direction_column</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主轴对齐*/</span></span><br><span class="line"><span class="selector-class">.justify-content_flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-justify</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧轴对齐*/</span></span><br><span class="line"><span class="selector-class">.align-items_flex-start</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: start;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: start;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_baseline</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: baseline;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩性*/</span></span><br><span class="line"><span class="selector-class">.flex_auto</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: auto;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: auto;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex_1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*显示顺序*/</span></span><br><span class="line"><span class="selector-class">.order_2</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.order_3</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局系统"><a href="#布局系统" class="headerlink" title="布局系统"></a>布局系统</h2><h3 id="css-Media-媒体查询"><a href="#css-Media-媒体查询" class="headerlink" title="css Media 媒体查询"></a>css Media 媒体查询</h3><p>【媒体类型】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">screen         计算机屏幕（默认值）</span><br><span class="line">tty            电传打字机以及使用等宽字符网格的类似媒介</span><br><span class="line">tv             电视类型设备（低分辨率、有限的屏幕翻滚能力）</span><br><span class="line">projection     放映机</span><br><span class="line">handheld       手持设备（小屏幕、有限的带宽）</span><br><span class="line">print          打印预览模式 &#x2F; 打印页</span><br><span class="line">braille        盲人用点字法反馈设备</span><br><span class="line">aural          语音合成器</span><br><span class="line">all            适合所有设备</span><br></pre></td></tr></table></figure><p>【媒体属性】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">width | min-width | max-width</span><br><span class="line">     height | min-height | max-height</span><br><span class="line">     device-width | min-device-width | max-device-width</span><br><span class="line">     device-height | min-device-height | max-device-height</span><br><span class="line">     aspect-ratio | min-aspect-ratio | max-aspect-ratio</span><br><span class="line">     device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio</span><br><span class="line">     color | min-color | max-color</span><br><span class="line">     color-index | min-color-index | max-color-index</span><br><span class="line">     monochrome | min-monochrome | max-monochrome</span><br><span class="line">     resolution | min-resolution | max-resolution</span><br><span class="line">     scan | grid</span><br></pre></td></tr></table></figure><p>【辑操作符】</p><p>操作符 not、and、only 和逗号(,)(相当于 or)可以用来构建复杂的媒体查询</p><h3 id="css-多列布局"><a href="#css-多列布局" class="headerlink" title="css 多列布局"></a>css 多列布局</h3><h3 id="grid-栅格布局"><a href="#grid-栅格布局" class="headerlink" title="grid 栅格布局"></a>grid 栅格布局</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/CSS_grid.png" alt=""></p><h3 id="移动优先的响应式布局"><a href="#移动优先的响应式布局" class="headerlink" title="移动优先的响应式布局"></a>移动优先的响应式布局</h3><p>【设计原则】<br>关于响应式设计，有渐进增加和优雅降级两个设计原则</p><ul><li><p>渐进增强(progressive enhancement)<br>是指基本需求得到满足、实现，再根据不同浏览器及不同分辨率设备的特点，利用高级浏览器下的新特性提供更好的体验。比如，圆角、阴影、动画等</p></li><li><p>优雅降级(graceful degradation)<br>则正好相反，现有功能已经开发完备，但需要向下兼容版本和不支持该功能的浏览器。虽然兼容性方案的体验不如常规方案，但保证了功能可用性</p></li></ul><blockquote><p>移动优先的响应式布局采用的是渐进增强原则，制作响应式网站时，先搞定手机版，然后再去为更大设备去设计和开发更复杂的功能。特征是使用 min-width 匹配页面宽度。从上到下书写样式时，首先考虑的是移动设备的使用场景，默认查询的是最窄的情况，再依次考虑设备屏幕逐渐变宽的情况</p></blockquote><p>【三要素】<br>响应式设计包括三个要素：弹性布局、媒体查询和弹性图片(最简单的响应式图片设置 max-width 为 100%即可)</p><h2 id="居中布局-以-flex-为例"><a href="#居中布局-以-flex-为例" class="headerlink" title="居中布局(以 flex 为例)"></a>居中布局(以 flex 为例)</h2><ul><li>水平居中<br>【1】在伸缩容器上设置主轴对齐方式<code>justify-content:center</code><br>【2】在伸缩项目上设置<code>margin: 0 auto</code></li><li>垂直居中<br>【1】在伸缩容器上设置侧轴对齐方式<code>align-items: center</code><br>【2】在伸缩项目上设置<code>margin: auto 0</code></li><li>同时实现水平居中和垂直居中(加起来就行)</li></ul><h2 id="常见布局方式"><a href="#常见布局方式" class="headerlink" title="常见布局方式"></a>常见布局方式</h2><p>三栏式布局(所谓的圣杯和双飞翼)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.top</span>,<span class="selector-class">.bottom</span>&#123;<span class="attribute">height</span>: <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">order</span>: <span class="number">2</span>;&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgrey;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">style</span>=<span class="string">"background-color: lightblue;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>top<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> <span class="attr">style</span>=<span class="string">"background-color: pink;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcoral;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"background-color: lightseagreen;"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcyan;"</span> &gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgreen;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 110px;" src="https://demo.xiaohuochai.site/css/buju4/b5.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画(transition)</title>
      <link href="posts/62887/"/>
      <url>posts/62887/</url>
      
        <content type="html"><![CDATA[<h2 id="漂浮的白云"><a href="#漂浮的白云" class="headerlink" title="漂浮的白云"></a>漂浮的白云</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 320px;" src="https://demo.xiaohuochai.site/css/animationApply/a1.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>漂浮的白云主要通过远景白云和近景白云来实现立体漂浮效果。远景和近景分别使用两张背景图片，通过改变其背景定位来实现白云移动效果，通过设置不同的动画持续时间来实现交错漂浮的效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span>,</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">100s</span> infinite linear alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">500%</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud1.png"</span>);</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="旋转的星球"><a href="#旋转的星球" class="headerlink" title="旋转的星球"></a>旋转的星球</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 430px;" src="https://demo.xiaohuochai.site/css/animationApply/a2.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>旋转的星球主要通过 rotate()旋转函数来实现。实际上，蓝色的地球和黑色的月球并没有发生旋转，只是其父级旋转形成的视觉上的旋转效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sunline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">10s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, <span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> <span class="number">5px</span></span><br><span class="line">      <span class="number">10px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earthline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">100px</span> -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">2s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earth</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sunline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earthline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earth"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"moon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>-【进阶】<br>如果要在内侧旋转的球内放文本，并且文本不跟着旋转，则代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: tan;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: inherit;</span><br><span class="line">  <span class="attribute">animation-direction</span>: reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标移入后，动画停止；移出时，动画继续</p><iframe style="width: 100%; height: 160px;" src="https://demo.xiaohuochai.site/css/animationApply/a3.html" frameborder="0" width="320" height="240"></iframe><h2 id="正方体合成"><a href="#正方体合成" class="headerlink" title="正方体合成"></a>正方体合成</h2><ul><li>【效果演示】<iframe style="width: 100%; height: 300px;" src="https://demo.xiaohuochai.site/css/animationApply/a4.html" frameborder="0" width="320" height="240"></iframe></li></ul><h2 id="使用-animate-css"><a href="#使用-animate-css" class="headerlink" title="使用 animate.css"></a>使用 animate.css</h2><p>animate.css 是一个使用 CSS3 的 animation 制作的动画效果的 CSS 集合，里面预设了很多种常用的动画，且使用非常简单</p><ul><li>从官网下载</li></ul><p><a href="https://raw.github.com/daneden/animate.css/master/animate.css" target="_blank" rel="noopener">https://raw.github.com/daneden/animate.css/master/animate.css</a></p><ul><li>通过 npm 安装</li></ul><p><code>$ npm install animate.css</code></p><ul><li>使用在线 cdn</li></ul><p><a href="https://unpkg.com/animate.css@3.5.2/animate.min.css" target="_blank" rel="noopener">https://unpkg.com/animate.css@3.5.2/animate.min.css</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="posts/35375/"/>
      <url>posts/35375/</url>
      
        <content type="html"><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p><strong>功能需求</strong>-监听浏览器滚动事件，返回当前滚条与顶部的距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = showTop;</span><br></pre></td></tr></table></figure><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><p>触发高频事件后 n 秒函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(showTop, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">      <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">    valid = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn();</span><br><span class="line">      valid = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 请注意，节流函数并不止上面这种实现方案,</span></span><br><span class="line"><span class="comment">   例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。</span></span><br><span class="line"><span class="comment">   也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="其他应用场景举例"><a href="#其他应用场景举例" class="headerlink" title="其他应用场景举例"></a>其他应用场景举例</h2><ul><li>搜索框 input 事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者实现输入间隔大于某个值（如 500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。</li><li>页面 resize 事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行 dom 渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css过渡(transition)</title>
      <link href="posts/24228/"/>
      <url>posts/24228/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>过渡 transition 是一个复合属性，包括 <code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code> 这四个子属性。通过这四个子属性的配合来完成一个完整的过渡效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: 过渡属性(默认值为<span class="selector-tag">all</span>)</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 过渡持续时间(默认值为0<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">transiton-timing-function</span>: 过渡函数(默认值为<span class="selector-tag">ease</span>函数)</span><br><span class="line"><span class="selector-tag">transition-delay</span>: 过渡延迟时间(默认值为0<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><ul><li>过渡 transition 的这四个子属性只有<code>&lt;transition-duration&gt;</code>是必需值且不能为 0。其中，<code>&lt;transition-duration&gt;</code>和<code>&lt;transition-delay&gt;</code>都是时间。当两个时间同时出现时，第一个是<code>&lt;transition-duration&gt;</code>，第二个是<code>&lt;transition-delay&gt;</code>；当只有一个时间时，它是<code>&lt;transition-duration&gt;</code>，而<code>&lt;transition-delay&gt;</code>为默认值 0</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition: &lt;transition-property&gt; || &lt;transition-duration&gt; ||</span><br><span class="line">  &lt;transition-timing-function&gt; || &lt;transition-delay&gt;;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test1</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: width, background, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>, <span class="number">500ms</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear, ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">200ms</span>, <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类似于*/</span></span><br><span class="line"><span class="selector-id">#test2</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> linear <span class="number">200ms</span>, background <span class="number">500ms</span> ease <span class="number">0s</span>,</span><br><span class="line">    opacity <span class="number">2s</span> linear <span class="number">200ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 250px;" src="https://demo.xiaohuochai.site/css/transition/t10.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css清浮动</title>
      <link href="posts/17955/"/>
      <url>posts/17955/</url>
      
        <content type="html"><![CDATA[<p>人们经常谈起清浮动，其实就是解决浮动元素的包含块高度塌陷的问题</p><h2 id="【1】clear-属性"><a href="#【1】clear-属性" class="headerlink" title="【1】clear 属性"></a>【1】clear 属性</h2><p>值: <code>left | right | both | none | inherit</code><br>初始值: none<br>应用于: 块级元素(块级元素指 block 元素，不包括 inline-block 元素)<br>继承性: 无</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left:左侧不允许存在浮动元素</span><br><span class="line">right:右侧不允许存在浮动元素</span><br><span class="line">both:左右两侧不允许存在浮动元素</span><br><span class="line">none:允许左右两侧存在浮动元素</span><br></pre></td></tr></table></figure><ul><li><code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>&lt;注意&gt;并不是很适用，若包含块为<code>&lt;ul&gt;</code>，则子元素只能为<code>&lt;li&gt;</code>，则在<code>&lt;li&gt;</code>后面添加<code>&lt;div&gt;</code>元素不合适</li><li><code>&lt;br style=&quot;clear:both&quot;&gt;</code>&lt;注意&gt;虽然 clear 属性只应用于块级元素，但在除 IE7-以外的其他浏览器都可以将 clear 属性应用于<code>&lt;br&gt;</code>元素</li><li>为浮动元素的 after 伪元素设置 clear 属性<code>.clear:after{content:&quot;&quot;; display: block; clear: both;}</code></li></ul><h2 id="【2】BFC"><a href="#【2】BFC" class="headerlink" title="【2】BFC"></a>【2】BFC</h2><ul><li><p>1、float: left/right</p></li><li><p>2、position:absolute/fixed</p></li><li><p>3、display:inline-block/table-cell/table-caption/flex</p></li><li><p>4、overflow:hidden/scroll/auto</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="noopener">关于 BFC 的详细信息移步至此</a></p><h2 id="【3】IE7"><a href="#【3】IE7" class="headerlink" title="【3】IE7-"></a>【3】IE7-</h2><p>关于 IE7-浏览器有一个其特有的属性 haslayout，当触发包含块的 haslayout 时，浮动元素被 layout 元素自动包含</p><ul><li><p>1、display:inline-block</p></li><li><p>2、height/width:除 auto 外</p></li><li><p>3、float: left/right</p></li><li><p>4、position: absolute</p></li><li><p>5、writing-mode: tb-rl</p></li><li><p>6、zoom: 除 normal 外</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/4845314.html" target="_blank" rel="noopener">关于 haslayout 的详细信息移步至此</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置git教程</title>
      <link href="posts/37056/"/>
      <url>posts/37056/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，下载安装git"><a href="#第一步，下载安装git" class="headerlink" title="第一步，下载安装git"></a>第一步，下载安装git</h2><p>打开 <a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，下载git对应操作系统的版本。</p><p>所有东西下载慢的话就可以去找镜像！官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/git-for-windows/下载对应的版本即可安装！</a></p><h2 id="第二步，检查git是否安装成功"><a href="#第二步，检查git是否安装成功" class="headerlink" title="第二步，检查git是否安装成功"></a>第二步，检查git是否安装成功</h2><p>打开命令行窗口，在cmd中输入git或git–version。</p><h2 id="第三步，配置User信息（默认已注册github账号）"><a href="#第三步，配置User信息（默认已注册github账号）" class="headerlink" title="第三步，配置User信息（默认已注册github账号）"></a>第三步，配置User信息（默认已注册github账号）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。</p><p>这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name &quot;username&quot;    &#x2F;&#x2F;（ &quot;username&quot;是自己的账户名，）</span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email &quot;username@email.com&quot;     &#x2F;&#x2F;(&quot;username@email.com&quot;注册账号时用的邮箱)</span><br></pre></td></tr></table></figure><p>以上命令执行结束后，可用 git config –global –list 命令查看配置是否OK。</p><h2 id="第四步，设置本机绑定SSH公钥，实现免密码登录"><a href="#第四步，设置本机绑定SSH公钥，实现免密码登录" class="headerlink" title="第四步，设置本机绑定SSH公钥，实现免密码登录"></a>第四步，设置本机绑定SSH公钥，实现免密码登录</h2><p>继续刚才的操作，在命令框中输入以下命令:</p><p><code>ssh-keygen -t rsa</code></p><p>然后连敲三次回车键，结束后去系统盘目录下（一般在 C:Users你的用户名.ssh）(mac: /Users/用户/.ssh）查看是否有。ssh文件夹生成，此文件夹中以下两个文件：</p><p>将ssh文件夹中的公钥（ id_rsa.pub）添加到GitHub管理平台中，在GitHub的个人账户的设置中找到如下界面。title随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到key中，然后点击Ass SSH key就好啦。</p><h2 id="第五步，测试配置是否成功"><a href="#第五步，测试配置是否成功" class="headerlink" title="第五步，测试配置是否成功"></a>第五步，测试配置是否成功</h2><p>在Git Bush命令框（就是刚才配置账号和邮箱的命令框）中继续输入以下命令，回车：</p><p><code>ssh -T git@github.com</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-快速排序</title>
      <link href="posts/7837/"/>
      <url>posts/7837/</url>
      
        <content type="html"><![CDATA[<p><strong>快速排序</strong>最常用的排序算法之一。时间复杂度一般为 O(nlog(n)),空间复杂度为O(1)(左右指针交替的原地排序)。</p><a id="more"></a><p>快速排序和<a href="/posts/51816">归并排序</a>一样也使用<a href="">分而治之</a>的方法。</p><h2 id="设置比较函数和交换函数"><a href="#设置比较函数和交换函数" class="headerlink" title="设置比较函数和交换函数"></a>设置比较函数和交换函数</h2><ul><li>自定义一个 compare 函数，命名为 compareFn</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareFn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个交换函数，命名为 swap</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array,a,b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//经典方式</span></span><br><span class="line">  <span class="comment">// const temp = array[a];</span></span><br><span class="line">  <span class="comment">// array[a] = array[b];</span></span><br><span class="line">  <span class="comment">// array[b] = temp;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//ES6 的方式</span></span><br><span class="line">  [array[a],array[b]] = [array[b],array[a]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="划分过程"><a href="#划分过程" class="headerlink" title="划分过程"></a>划分过程</h2><ul><li>随机选取其中一个值或选择中间值做为主元，初始化第一个值为 left 指针，最后一个值为 right 指针</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">array, left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br></pre></td></tr></table></figure><ul><li>移动 left 指针直到找到比主元大的元素。</li><li>同理，移动 right 指针直到找到一个比主元小的元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (compareFn(array[i], pivot) === Compare.LESS_THAN) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (compareFn(array[j], pivot) === Compare.BIGGER_THAN) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>此时当 left 指针索引小于等于 right 指针索引时，进行交换,继续移动指针，重复此过程，并返回最终左指针索引，用于递归函数创建子数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      swap(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归函数重复对数组进行划分"><a href="#递归函数重复对数组进行划分" class="headerlink" title="递归函数重复对数组进行划分"></a>递归函数重复对数组进行划分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">array, left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = partition(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      quick(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      quick(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置主函数调用递归函数"><a href="#设置主函数调用递归函数" class="headerlink" title="设置主函数调用递归函数"></a>设置主函数调用递归函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> quick(array, <span class="number">0</span>, array.length - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现原理</title>
      <link href="posts/61384/"/>
      <url>posts/61384/</url>
      
        <content type="html"><![CDATA[<p>在传统的异步编程中，如果异步之间存在依赖关系，我们就需要通过层层嵌套回调来满足这种依赖，如果嵌套层数过多，可读性和可维护性都变得很差，产生所谓“回调地狱”，而 Promise 将回调嵌套改为链式调用，增加可读性和可维护性。</p><h2 id="Promise-的调用流程"><a href="#Promise-的调用流程" class="headerlink" title="Promise 的调用流程"></a>Promise 的调用流程</h2><ul><li><code>Promise</code>的构造方法接收一个 executor()，在<code>new Promise()</code>时就立刻执行这个 executor 回调</li><li><code>executor()</code>内部的异步任务被放入宏/微任务队列，等待执行</li><li><code>then()</code>被执行，收集成功/失败回调，放入成功/失败队列</li><li><code>executor()</code>的异步任务被执行，触发<code>resolve/reject</code>，从成功/失败队列中取出回调依次执行</li></ul><h2 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise A+规范"></a>Promise A+规范</h2><p>由于 ES6 的 Promise 实现需要遵循 Promise/A+规范，是规范对 Promise 的状态控制做了要求。Promise/A+的规范比较长，这里只总结两条核心规则：</p><ul><li><code>Promise</code> 本质是一个状态机，且状态只能为以下三种：<code>Pending（等待态）</code>、<code>Fulfilled（执行态）</code>、<code>Rejected（拒绝态）</code>，状态的变更是单向的，只能从 Pending -&gt; Fulfilled 或 Pending -&gt; Rejected，状态变更不可逆</li><li><code>then</code>方法接收两个可选参数，分别对应状态改变时触发的回调。then 方法返回一个 promise。then 方法可以被同一个 promise 调用多次。</li></ul><h2 id="then-的链式调用"><a href="#then-的链式调用" class="headerlink" title="then 的链式调用"></a>then 的链式调用</h2><p>先举个例子看一下 then 是如何链式调用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">//then回调中可以return一个Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">//then回调中也可以return一个值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>输出：1 2 3</p><h3 id="如何实现链式调用"><a href="#如何实现链式调用" class="headerlink" title="如何实现链式调用"></a>如何实现链式调用</h3><ul><li>显然<code>then()</code>需要返回一个 Promise，这样才能找到 then 方法，所以我们会把 then 方法的返回值包装成 Promise。</li><li><code>then()</code>的回调需要拿到上一个<code>then()</code>的返回值</li><li><code>then()</code>的回调需要顺序执行，以上面这段代码为例，虽然中间 return 了一个 Promise，但执行顺序仍要保证是 1-&gt;2-&gt;3。我们要等待当前 Promise 状态变更后，再执行下一个 then 收集的回调，这就要求我们对 then 的返回值分类讨论</li></ul><h2 id="值穿透-amp-状态已变更情况"><a href="#值穿透-amp-状态已变更情况" class="headerlink" title="值穿透&amp;状态已变更情况"></a>值穿透&amp;状态已变更情况</h2><ul><li>值穿透：根据规范，如果 then() 接收的参数不是 function，那么我们应该忽略它。如果没有忽略，当 then()回调不为 function 时将会抛出异常，导致链式调用中断</li><li>处理状态为 resolve/reject 的情况：其实我们上边 then() 的写法是对应状态为<code>padding</code>的情况，但是有些时候，resolve/reject 在 then() 之前就被执行（比如<code>Promise.resolve().then()</code>），如果这个时候还把 then()回调 push 进 resolve/reject 的执行队列里，那么回调将不会被执行，因此对于状态已经变为<code>fulfilled</code>或<code>rejected</code>的情况，我们直接执行 then 回调</li></ul><h2 id="兼容同步任务"><a href="#兼容同步任务" class="headerlink" title="兼容同步任务"></a>兼容同步任务</h2><p>完成了 then 的链式调用以后，我们再处理一个前边的细节，然后放出完整代码。上文我们说过，Promise 的执行顺序是 <code>new Promise -&gt; then()收集回调 -&gt; resolve/reject 执行回调</code>，这一顺序是建立在 executor 是异步任务的前提上的，如果 executor 是一个同步任务，那么顺序就会变成 <code>new Promise -&gt; resolve/reject 执行回调 -&gt; then()收集回调</code>，resolve 的执行跑到 then 之前去了，为了兼容这种情况，我们给 resolve/reject 执行回调的操作包一个 setTimeout，让它异步执行。</p><h2 id="结合之前的五步，实现了-Promise-的主要功能"><a href="#结合之前的五步，实现了-Promise-的主要功能" class="headerlink" title="结合之前的五步，实现了 Promise 的主要功能"></a>结合之前的五步，实现了 Promise 的主要功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise/A+规定的三种状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法接收一个回调</span></span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">this</span>._status = PENDING; <span class="comment">// Promise状态</span></span><br><span class="line">    <span class="keyword">this</span>._value = <span class="literal">undefined</span>; <span class="comment">// 储存then回调return的值</span></span><br><span class="line">    <span class="keyword">this</span>._resolveQueue = []; <span class="comment">// 成功队列, resolve时触发</span></span><br><span class="line">    <span class="keyword">this</span>._rejectQueue = []; <span class="comment">// 失败队列, reject时触发</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue</span></span><br><span class="line">    <span class="keyword">let</span> _resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//把resolve执行回调的操作封装成一个函数,放进setTimeout里,以兼容executor是同步代码的情况</span></span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = FULFILLED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里之所以使用一个队列来储存回调,是为了实现规范要求的 "then 方法可以被同一个 promise 调用多次"</span></span><br><span class="line">        <span class="comment">// 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._resolveQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._resolveQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 实现同resolve</span></span><br><span class="line">    <span class="keyword">let</span> _reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = REJECTED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._rejectQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._rejectQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// new Promise()时立即执行executor,并传入resolve和reject</span></span><br><span class="line">    executor(_resolve, _reject);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then方法,接收一个成功的回调和一个失败的回调</span></span><br><span class="line">  then(resolveFn, rejectFn) &#123;</span><br><span class="line">    <span class="comment">// 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行</span></span><br><span class="line">    <span class="keyword">typeof</span> resolveFn !== <span class="string">'function'</span> ? <span class="function">(<span class="params">resolveFn = (value</span>) =&gt;</span> value) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">typeof</span> rejectFn !== <span class="string">'function'</span></span><br><span class="line">      ? <span class="function">(<span class="params">rejectFn = (reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(reason <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? reason.message : reason);</span><br><span class="line">        &#125;)</span><br><span class="line">      : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return一个新的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span></span><br><span class="line">      <span class="keyword">const</span> fulfilledFn = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 执行第一个(当前的)Promise的成功回调,并获取返回值</span></span><br><span class="line">          <span class="keyword">let</span> x = resolveFn(value);</span><br><span class="line">          <span class="comment">// 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span></span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reject同理</span></span><br><span class="line">      <span class="keyword">const</span> rejectedFn = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = rejectFn(error);</span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>._status) &#123;</span><br><span class="line">        <span class="comment">// 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行</span></span><br><span class="line">        <span class="keyword">case</span> PENDING:</span><br><span class="line">          <span class="keyword">this</span>._resolveQueue.push(fulfilledFn);</span><br><span class="line">          <span class="keyword">this</span>._rejectQueue.push(rejectedFn);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当状态已经变为resolve/reject时,直接执行then回调</span></span><br><span class="line">        <span class="keyword">case</span> FULFILLED:</span><br><span class="line">          fulfilledFn(<span class="keyword">this</span>._value); <span class="comment">// this._value是上一个then回调return的值</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">          rejectedFn(<span class="keyword">this</span>._value);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加几个-Promise-的静态-实例方法"><a href="#添加几个-Promise-的静态-实例方法" class="headerlink" title="添加几个 Promise 的静态/实例方法"></a>添加几个 Promise 的静态/实例方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//catch方法其实就是执行一下then的第二个回调</span></span><br><span class="line">  <span class="keyword">catch</span>(rejectFn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, rejectFn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//finally方法</span></span><br><span class="line">  <span class="keyword">finally</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">      value =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),             <span class="comment">//执行回调,并returnvalue传递给后面的then</span></span><br><span class="line">      reason =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)  <span class="comment">//reject同理</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的resolve方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value <span class="comment">//根据规范, 如果参数是Promise实例, 直接return这个实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的reject方法</span></span><br><span class="line">  <span class="keyword">static</span> reject(reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的all方法</span></span><br><span class="line">  <span class="keyword">static</span> all(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseArr.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">        MyPromise.resolve(p).then(</span><br><span class="line">          val =&gt; &#123;</span><br><span class="line">            index++</span><br><span class="line">            result[i] = val</span><br><span class="line">            <span class="keyword">if</span>(index === promiseArr.length) &#123;</span><br><span class="line">              resolve(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的race方法</span></span><br><span class="line">  <span class="keyword">static</span> race(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> promiseArr) &#123;</span><br><span class="line">        MyPromise.resolve(p).then(  <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">          value =&gt; &#123;</span><br><span class="line">            resolve(value)        <span class="comment">//注意这个resolve是上边new MyPromise的</span></span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题分页问题</title>
      <link href="posts/65246/"/>
      <url>posts/65246/</url>
      
        <content type="html"><![CDATA[<p>辅助函数 paginator 能够帮助我们插入分页链接，具体参数查看<a href="https://hexo.io/docs/helpers.html#paginator" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html#paginator</a></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>分页标签显示为 HTML 代码如：<code>&lt;i class=&quot;nexmoefont icon-left&quot;&gt;&lt;/i&gt;</code></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>找到 pagination.ejs 中的 paginator 函数，添加 escape: false 试试，完整代码形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(&#123;</span><br><span class="line">      prev_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-left&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      next_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-right&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      escape: false</span><br><span class="line">    &#125;) %&gt;</span><br></pre></td></tr></table></figure><p>原文参考：<a href="https://www.zhihu.com/question/370971597/answer/1147674723" target="_blank" rel="noopener">https://www.zhihu.com/question/370971597/answer/1147674723</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-归并排序</title>
      <link href="posts/51816/"/>
      <url>posts/51816/</url>
      
        <content type="html"><![CDATA[<p><strong>归并排序</strong>第一个可以实际使用排序算法之一。时间复杂度为 O(nlog(n)),空间复杂度为 O(n)。</p><a id="more"></a><h2 id="设置比较函数"><a href="#设置比较函数" class="headerlink" title="设置比较函数"></a>设置比较函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareFn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并"><a href="#主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并" class="headerlink" title="主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并"></a>主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">array, compareFn = defaultCompare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = array; <span class="comment">// 获取数组长度，参照ES6语法</span></span><br><span class="line">    <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = mergeSort(array.slice(<span class="number">0</span>, middle), compareFn);</span><br><span class="line">    <span class="keyword">const</span> right = mergeSort(array.slice(middle, length), compareFn);</span><br><span class="line">    array = merge(left, right, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="merge-函数负责合并小数组来产生大数组，直到回到原始数组"><a href="#merge-函数负责合并小数组来产生大数组，直到回到原始数组" class="headerlink" title="merge 函数负责合并小数组来产生大数组，直到回到原始数组"></a>merge 函数负责合并小数组来产生大数组，直到回到原始数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class="line">    result.push(</span><br><span class="line">      compareFn(left[i], right[j]) === Compare.LESS_THAN</span><br><span class="line">        ? left[i++]</span><br><span class="line">        : right[j++]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(i &lt; left.length ? left.slice(i) : right.slice(j));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/520520/"/>
      <url>posts/520520/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="posts/55046/"/>
      <url>posts/55046/</url>
      
        <content type="html"><![CDATA[<p>动态规划方法是将问题分解成相互依赖的子问题来解决的优化技术。</p><a id="more"></a><h2 id="解决问题三步骤"><a href="#解决问题三步骤" class="headerlink" title="解决问题三步骤"></a>解决问题三步骤</h2><ul><li>(1)定义子问题</li><li>(2)实现要反复执行来解决子问题的部分(参考递归方法)</li><li>(3)识别并求解出基线条件</li></ul><h2 id="运用动态规划解决著名问题"><a href="#运用动态规划解决著名问题" class="headerlink" title="运用动态规划解决著名问题"></a>运用动态规划解决著名问题</h2><ul><li><a href="">背包问题</a>：待写</li><li><a href="">最长公共子序列</a>：待写</li><li><a href="">硬币找零</a>：待写</li><li><a href="">矩阵链相乘</a>：待写</li><li><a href="">图的全源最短路径</a>：待写</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="posts/60033/"/>
      <url>posts/60033/</url>
      
        <content type="html"><![CDATA[<p><strong>回溯算法</strong>也叫试探法，它是一种系统地搜索问题的解的方法。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p><h2 id="用回溯算法解决问题的一般步骤："><a href="#用回溯算法解决问题的一般步骤：" class="headerlink" title="用回溯算法解决问题的一般步骤："></a>用回溯算法解决问题的一般步骤：</h2><ul><li>1、针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</li><li>2、确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。</li><li>3、以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</li></ul><h2 id="BFS-回溯实例"><a href="#BFS-回溯实例" class="headerlink" title="BFS+回溯实例"></a>BFS+回溯实例</h2><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/11/13/D9c3AU.md.png" alt="电话号码字母组合"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span> (<span class="params">digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (digits.length == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="number">2</span>: <span class="string">'abc'</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">'def'</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">'ghi'</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">'jkl'</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">'mno'</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">'pqrs'</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">'tuv'</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">curStr, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//设置数组越界后，输出一个解并跳出本次回溯的分支</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; digits.length - <span class="number">1</span>) &#123;</span><br><span class="line">      res.push(curStr);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提取当前i的字符串，并建立分支，进行回溯递归</span></span><br><span class="line">    <span class="keyword">const</span> letters = map[digits[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> l <span class="keyword">of</span> letters) &#123;</span><br><span class="line">      dfs(curStr + l, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs(<span class="string">''</span>, <span class="number">0</span>);<span class="comment">//递归入口</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法技巧</title>
      <link href="posts/53275/"/>
      <url>posts/53275/</url>
      
        <content type="html"><![CDATA[<p>一个算法设计中的方法不仅可以运用到各种排序、搜索算法中，还是解决多类实际问题的基本逻辑。</p><a id="more"></a><h2 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h2><p>分而治之方法是把问题分解成相互独立的子问题，然后组合他们的答案。具体运用参考<a href="/posts/51816">归并排序</a>和<a href="/posts/7837">快速排序</a></p><ul><li>(1)<strong>分解</strong>原问题为多个子问题</li><li>(2)<strong>解决</strong>子问题，用返回解决子问题的方式的递归算法</li><li>(3)<strong>组合</strong>子问题的解决方式，得到原问题的解</li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul><li><a href="/posts/55046">动态规划</a></li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul><li><a href="">贪心算法</a></li></ul><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul><li><a href="">回溯算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的全局对象</title>
      <link href="posts/43529/"/>
      <url>posts/43529/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。</p><a id="more"></a><h2 id="浏览器中它被命名为-window"><a href="#浏览器中它被命名为-window" class="headerlink" title="浏览器中它被命名为 window"></a>浏览器中它被命名为 window</h2><p>window 及 window 对象上的所有属性都是全局变量。</p><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> env = <span class="string">'Browser'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Browser</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.env);</span><br><span class="line"><span class="comment">// Browser</span></span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = <span class="string">'Browser'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Browser</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.env);</span><br><span class="line"><span class="comment">// Browser</span></span><br></pre></td></tr></table></figure><ul><li>在全局作用域下使用或不使用 var 关键字定义变量都会被附加到 window 对象上成为全局变量</li><li>例 1 和 例 2 中的 env 都是全局变量，打印 env 和 window.env 会得到相同结果</li></ul><h2 id="对-Node-JS-而言是-global"><a href="#对-Node-JS-而言是-global" class="headerlink" title="对 Node.JS 而言是 global"></a>对 Node.JS 而言是 global</h2><p>global 及 global 对象上的所有属性都是全局变量。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> env = <span class="string">'Node.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br><span class="line"><span class="built_in">console</span>.log(global.env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = <span class="string">'Node.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br><span class="line"><span class="built_in">console</span>.log(global.env);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>在 Node.js 中，每个模块都有自己的作用域，在模块的顶层作用域下，使用 var 关键字定义的变量不会被附加到 global 对象上，不使用 var 关键字定义的变量会被附加到 global 对象上成为全局变量</li><li>例 3 中的 env 是全局变量，打印 env 和 global.env 会得到相同结果，例 4 中的 env 不是全局变量，global 对象中不存在 env 属性</li></ul><h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><p>使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 定义的 JavaScript 浏览器脚本，被认为是个单独的模块，它有自己的顶级作用域，使用 var 关键字定义变量不会被附加到 window 对象上。<br>在 Node.js 的 REPL（Read Eval Print Loop：交互式解释器）中，使用或不使用 var 关键字定义变量都会被附加到 global 对象上成为全局变量。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-Stack</title>
      <link href="posts/12893/"/>
      <url>posts/12893/</url>
      
        <content type="html"><![CDATA[<p>Stack 是一种遵从<strong>后进后出（LIFO）</strong>原则的有序集合。</p><a id="more"></a><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>用 JavaScrip 写一个 Stack 的类，实现栈的常用方法 push、pop 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
