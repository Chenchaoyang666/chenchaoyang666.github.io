<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于wangEditor实现格式刷</title>
      <link href="posts/19904/"/>
      <url>posts/19904/</url>
      
        <content type="html"><![CDATA[<h2 id="主要实现思路"><a href="#主要实现思路" class="headerlink" title="主要实现思路"></a>主要实现思路</h2><p>前提：vue项目已经引进wangEditor<code>npm install wangeditor @^4.7.7</code>,并搭建好demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;editor-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; 引入 wangEditor</span><br><span class="line">  import wangEditor from &quot;wangeditor&quot;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;wangeditor&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        editor: null,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">      value (val) &#123;</span><br><span class="line">        if(val !&#x3D;&#x3D; editor.txt.html())&#123;</span><br><span class="line">          this.editor.txt.html(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.setEditor()</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    methods: &#123;  </span><br><span class="line">      setEditor () &#123;</span><br><span class="line">        const editor &#x3D; new wangEditor(&#96;#editor-container&#96;); &#x2F;&#x2F; 配置 onchange 回调函数，将数据同步到 vue 中</span><br><span class="line">        editor.config.uploadImgShowBase64 &#x3D; true</span><br><span class="line">        editor.config.zIndex &#x3D; 1</span><br><span class="line">        editor.config.height &#x3D; 400</span><br><span class="line">        editor.config.excludeMenus &#x3D; [</span><br><span class="line">          &#39;emoticon&#39;,</span><br><span class="line">          &#39;video&#39;</span><br><span class="line">        ]</span><br><span class="line">        editor.config.onchange &#x3D; (newHtml) &#x3D;&gt; &#123;</span><br><span class="line">          this.$emit(&#39;input&#39;, newHtml)</span><br><span class="line">        &#125;; &#x2F;&#x2F; 创建编辑器</span><br><span class="line">        editor.create();</span><br><span class="line">        editor.txt.html(this.value);</span><br><span class="line">        this.editor &#x3D; editor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标选择内容后保存选区"><a href="#鼠标选择内容后保存选区" class="headerlink" title="鼠标选择内容后保存选区"></a>鼠标选择内容后保存选区</h3><p>使用mouseup事件和saveRange保存选区</p><h3 id="获取选区样式"><a href="#获取选区样式" class="headerlink" title="获取选区样式"></a>获取选区样式</h3><ul><li>getSelectionContainerElem获取选中节点</li><li>getTargetDom获取目标节点</li><li>getAllStyle获取所有样式</li></ul><h3 id="改变格式刷状态"><a href="#改变格式刷状态" class="headerlink" title="改变格式刷状态"></a>改变格式刷状态</h3><ul><li>getIsBrush获取格式刷状态</li><li>setIsBrush设置格式刷状态</li></ul><h3 id="刷新样式"><a href="#刷新样式" class="headerlink" title="刷新样式"></a>刷新样式</h3><ul><li>getSelectionRangeTopNodes.length判断选取行数</li><li>offset和setStart/setEnd重设选取范围</li><li>getSelectionText和addStyle替换样式</li></ul><h2 id="brushFormat-js"><a href="#brushFormat-js" class="headerlink" title="brushFormat.js"></a>brushFormat.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> ‘wangeditor’;</span><br><span class="line"><span class="keyword">const</span> &#123; BtnMenu &#125; = E;</span><br><span class="line"><span class="keyword">let</span> isBrushOn = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatBrush</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(editor) &#123;</span><br><span class="line"><span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line"><span class="keyword">const</span> $elem = E.$(</span><br><span class="line"><span class="comment">// &lt;div class="w-e-menu" data-title="格式刷" style="font-size:16px"&gt; &lt;i class="icon-geshishua"&gt;&lt;/i&gt; &lt;/div&gt;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">super</span>($elem, editor);</span><br><span class="line"><span class="keyword">this</span>.editor = editor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜单点击事件</span></span><br><span class="line">clickHandler() &#123;</span><br><span class="line"><span class="comment">// 做任何你想做的事情</span></span><br><span class="line"><span class="comment">// 可参考【常用 API】文档，来操作编辑器</span></span><br><span class="line"><span class="keyword">if</span> (!isBrushOn) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.editor.selection.isSelectionEmpty()) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">let</span> domToParse =</span><br><span class="line"><span class="keyword">this</span>.editor.selection.getSelectionContainerElem().elems[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">this</span>.editor.copyStyleList = parseDom(domToParse);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.editor.selection.getRange());</span><br><span class="line"><span class="keyword">this</span>.active();</span><br><span class="line">&#125;</span><br><span class="line">isBrushOn = !isBrushOn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line"><span class="comment">// 1. 激活是什么？光标放在一段加粗、下划线的文本时，菜单栏里的 B 和 U 被激活，如下图</span></span><br><span class="line"><span class="comment">// 2. 什么时候执行这个函数？每次编辑器区域的选区变化（如鼠标操作、键盘操作等），都会触发各个菜单的 tryChangeActive 函数，重新计算菜单的激活状态</span></span><br><span class="line">tryChangeActive() &#123;</span><br><span class="line"><span class="comment">// 激活菜单</span></span><br><span class="line"><span class="comment">// 1. 菜单 DOM 节点会增加一个 .w-e-active 的 css class</span></span><br><span class="line"><span class="comment">// 2. this.isActive === true</span></span><br><span class="line"><span class="comment">// this.active()</span></span><br><span class="line"><span class="comment">// 取消激活菜单</span></span><br><span class="line"><span class="comment">// 1. 菜单 DOM 节点会删掉 .w-e-active</span></span><br><span class="line"><span class="comment">// 2. this.isActive === false</span></span><br><span class="line"><span class="comment">// this.unActive()</span></span><br><span class="line"><span class="keyword">if</span> (isBrushOn) &#123;</span><br><span class="line"><span class="keyword">this</span>.active();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.unActive();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//格式刷状态获取、修改</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getIsBrush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> isBrushOn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setIsBrush</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">isBrushOn = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//粘贴样式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pasteStyle</span>(<span class="params">editor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (editor.selection.isSelectionEmpty()) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//根据wang中选区顶级节点数判断选区行数</span></span><br><span class="line"><span class="keyword">if</span> (editor.selection.getSelectionRangeTopNodes().length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> text = editor.selection.getSelectionText();</span><br><span class="line"><span class="keyword">let</span> targetDom = addStyle(text, editor.copyStyleList);</span><br><span class="line">editor.cmd.do(‘insertHTML’, targetDom.outerHTML);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> elements = [];</span><br><span class="line"><span class="keyword">let</span> range = editor.selection.getRange();</span><br><span class="line"><span class="keyword">let</span> $startElem = editor.selection.getSelectionStartElem();</span><br><span class="line"><span class="comment">//这里调用wangeditor中的dom方法，也可使用原生DOM寻找父节点方法</span></span><br><span class="line"><span class="keyword">let</span> $startElemCon = $startElem.parentUntil(‘p’);</span><br><span class="line"><span class="keyword">let</span> $endElem = editor.selection.getSelectionEndElem();</span><br><span class="line"><span class="keyword">let</span> $endElemCon = $endElem.parentUntil(‘p’);</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘start’,</span><br><span class="line">elem: $startElem,</span><br><span class="line">offset: range.startOffset,</span><br><span class="line">container: $startElemCon</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">while</span> (!$startElemCon.next().equal($endElemCon)) &#123;</span><br><span class="line">$startElemCon = $startElemCon.next();</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘mid’,</span><br><span class="line">elem: $startElemCon,</span><br><span class="line">container: $startElemCon</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘end’,</span><br><span class="line">elem: $endElem,</span><br><span class="line">offset: range.endOffset,</span><br><span class="line">containerType: range.startContainer.nodeType === <span class="number">1</span> ? ‘NODE’ : ‘TEXT’,</span><br><span class="line">container: $endElemCon</span><br><span class="line">&#125;);</span><br><span class="line">elements.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> $container = element.container;</span><br><span class="line">editor.selection.createRangeByElem($container, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> range = editor.selection.getRange();</span><br><span class="line"><span class="keyword">if</span> (element.type === ‘start’) &#123;</span><br><span class="line"><span class="comment">//.firstChild这里用于定义标签中的文本，否则会报错There is no child at offset 4.</span></span><br><span class="line">range.setStart(element.elem.elems[<span class="number">0</span>].firstChild, element.offset);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.type === ‘end’) &#123;</span><br><span class="line">range.setEnd(element.elem.elems[<span class="number">0</span>].firstChild, element.offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> text = editor.selection.getSelectionText();</span><br><span class="line"><span class="keyword">let</span> targetDom = addStyle(text, editor.copyStyleList);</span><br><span class="line">editor.cmd.do(‘insertHTML’, targetDom.outerHTML);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标节点及样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseDom</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> targetDom = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> nodeArray = [];</span><br><span class="line"></span><br><span class="line">getTargetDom(dom);</span><br><span class="line"></span><br><span class="line">getAllStyle(targetDom);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetDom</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> dom.childNodes) &#123;</span><br><span class="line"><span class="keyword">if</span> (i.nodeType === <span class="number">3</span> &amp;&amp; i.nodeValue &amp;&amp; i.nodeValue.trim() !== ‘’) &#123;</span><br><span class="line">targetDom = dom;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getTargetDom(dom.children[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllStyle</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dom) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">const</span> tagName = dom.tagName.toLowerCase();</span><br><span class="line">nodeArray.push(&#123;</span><br><span class="line">tagName: tagName,</span><br><span class="line">attributes: <span class="built_in">Array</span>.from(dom.attributes).map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name: i.name,</span><br><span class="line">value: i.value</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> ([‘p’, ‘h1’, ‘h2’, ‘h3’, ‘h4’, ‘h5’].includes(tagName)) <span class="keyword">return</span>;</span><br><span class="line">getAllStyle(dom.parentNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodeArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据保存节点信息添加样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStyle</span>(<span class="params">text, nodeArray</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> currentNode = <span class="literal">null</span>;</span><br><span class="line">nodeArray.forEach(<span class="function">(<span class="params">ele, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> node = <span class="built_in">document</span>.createElement(ele.tagName);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> ele.attributes) &#123;</span><br><span class="line">node.setAttribute(attr.name, attr.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">node.innerText = text;</span><br><span class="line">currentNode = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.appendChild(currentNode);</span><br><span class="line">currentNode = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo页导入formatBrush-js"><a href="#demo页导入formatBrush-js" class="headerlink" title="demo页导入formatBrush.js"></a>demo页导入formatBrush.js</h2><ul><li><a href="https://www.wangeditor.com/doc/pages/11-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E8%8F%9C%E5%8D%95/01-%E5%BF%AB%E9%80%9F%E6%89%A9%E5%B1%95%E4%B8%80%E4%B8%AA%E8%8F%9C%E5%8D%95.html" target="_blank" rel="noopener">扩展菜单参考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Js </tag>
            
            <tag> 富文本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端vue项目代码格式化配置</title>
      <link href="posts/8236/"/>
      <url>posts/8236/</url>
      
        <content type="html"><![CDATA[<h2 id="eslint-prettier配置"><a href="#eslint-prettier配置" class="headerlink" title="eslint+prettier配置"></a>eslint+prettier配置</h2><p>安装依赖，如果是eslint-plugin-prettier需升级对应eslint依赖才可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-plugin-prettier eslint-config-prettier</span><br><span class="line">npm install --save-dev prettier eslint</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"> "format": "prettier --write \"src/**/*.js\" \"src/**/*.vue\"",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.eslintrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/strongly-recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span><span class="comment">//新增</span></span><br><span class="line">  ]</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"prettier/prettier"</span>: <span class="string">"error"</span><span class="comment">//新增</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.prettierrc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">“printWidth”: <span class="number">80</span>, <span class="comment">// 每行代码长度（默认80）</span></span><br><span class="line">“tabWidth”: <span class="number">2</span>, <span class="comment">// 每个tab相当于多少个空格（默认2）</span></span><br><span class="line">“useTabs”: <span class="literal">false</span>, <span class="comment">// 是否使用tab进行缩进（默认false）</span></span><br><span class="line">“singleQuote”: <span class="literal">true</span>, <span class="comment">// 使用单引号（默认false）</span></span><br><span class="line">“semi”: <span class="literal">true</span>, <span class="comment">// 声明结尾使用分号(默认true)</span></span><br><span class="line">“trailingComma”: “none”, <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（默认none）</span></span><br><span class="line">“bracketSpacing”: <span class="literal">true</span>, <span class="comment">// 对象字面量的大括号间使用空格（默认true）</span></span><br><span class="line">“jsxBracketSameLine”: <span class="literal">false</span>, <span class="comment">// 多行JSX中的&gt;放置在最后一行的结尾，而不是另起一行（默认false）</span></span><br><span class="line">“arrowParens”: “avoid”, <span class="comment">// 只有一个参数的箭头函数的参数是否带圆括号（默认avoid）</span></span><br><span class="line">‘endOfLine’: ‘auto’ <span class="comment">//避免window和linux换行符不同导致报delete (cr)的错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="husky配置"><a href="#husky配置" class="headerlink" title="husky配置"></a>husky配置</h2><p>6.0.0版本前后配置有很大区别可参考下面链接<br>1.<a href="https://www.npmjs.com/package/husky/v/7.0.4" target="_blank" rel="noopener">官网的新配置方式</a><br>2.<a href="https://blog.csdn.net/DoneSpeak/article/details/118469233" target="_blank" rel="noopener">https://blog.csdn.net/DoneSpeak/article/details/118469233</a></p><h2 id="lint-stage"><a href="#lint-stage" class="headerlink" title="lint-stage"></a>lint-stage</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"lint-staged": &#123;</span><br><span class="line">  "src/**/*.&#123;js,json,css,vue&#125;": [</span><br><span class="line">   "prettier --write", // 先执行prettier，再执行eslint，保证代码质量</span><br><span class="line">   "eslint --fix",</span><br><span class="line">   <span class="string">"git add"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="工作空间setting-json-编辑器版本不一样可能会有差异，自行调整配置"><a href="#工作空间setting-json-编辑器版本不一样可能会有差异，自行调整配置" class="headerlink" title="工作空间setting.json(编辑器版本不一样可能会有差异，自行调整配置)"></a>工作空间setting.json(编辑器版本不一样可能会有差异，自行调整配置)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;:true;</span><br><span class="line">&quot;&quot;:&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用小米接口修改步数</title>
      <link href="posts/52583/"/>
      <url>posts/52583/</url>
      
        <content type="html"><![CDATA[<h2 id="修改步数前置条件"><a href="#修改步数前置条件" class="headerlink" title="修改步数前置条件"></a>修改步数前置条件</h2><ul><li>1.应用商店下载<strong>小米运动App</strong>，手机号注册登录</li></ul><blockquote><p>注意一定要用手机号，别直接第三方登录</p></blockquote><ul><li>2.点击<strong>我的-&gt;第三方接入</strong>，绑定你想同步数据的项目</li></ul><blockquote><p>注意同步微信步数需关注公众号：华米科技</p></blockquote><ul><li>3.打开网页或者本地运行的脚本，输入<strong>小米运动账号</strong>、密码和修改的步数</li></ul><blockquote><p>账号是小米运动的账号，不是小米账号！！！</p></blockquote><h2 id="修改步数网页版"><a href="#修改步数网页版" class="headerlink" title="修改步数网页版"></a>修改步数网页版</h2><p>这个使用别人的服务器，修改有时间段限制<br><a href="https://4og.cn/xm/" target="_blank" rel="noopener">小米运动步数网页版</a></p><h2 id="修改步数源码-需搭建Pyhton环境"><a href="#修改步数源码-需搭建Pyhton环境" class="headerlink" title="修改步数源码(需搭建Pyhton环境)"></a>修改步数源码(需搭建Pyhton环境)</h2><p>github项目地址：<a href="https://github.com/Chenchaoyang666/updateStep" target="_blank" rel="noopener">步数修改源码</a><br>gitee项目地址：<a href="https://gitee.com/chenchaoyang666/updateStep" target="_blank" rel="noopener">步数修改源码</a><br>本地环境运行时要下载包和修改账号密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip install requests,time,re,json,random</span></span><br><span class="line"><span class="keyword">import</span> requests,time,re,json,random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为小米运动账号</span></span><br><span class="line">user = <span class="string">"写你的手机号"</span></span><br><span class="line"><span class="comment"># 修改为小米运动登录密码</span></span><br><span class="line">passwd = <span class="string">"写你的密码"</span></span><br><span class="line"><span class="comment"># 要修改的步数，直接输入想要修改的步数值，留空为随机步数</span></span><br><span class="line">step =<span class="string">"0"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS运行机制</title>
      <link href="posts/43184/"/>
      <url>posts/43184/</url>
      
        <content type="html"><![CDATA[<h2 id="概念1：-JS是单线程执行"><a href="#概念1：-JS是单线程执行" class="headerlink" title="概念1： JS是单线程执行"></a>概念1： JS是单线程执行</h2><p>”JS是单线程的”指的是JS 引擎线程。</p><blockquote><p>在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。<br>Node环境中，只有JS 线程。</p></blockquote><h2 id="概念2：宿主"><a href="#概念2：宿主" class="headerlink" title="概念2：宿主"></a>概念2：宿主</h2><p>JS运行的环境。一般为浏览器或者Node。</p><h2 id="概念3：Event-Loop"><a href="#概念3：Event-Loop" class="headerlink" title="概念3：Event Loop"></a>概念3：Event Loop</h2><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/eventloop.webp" alt=""></p><blockquote><p>JS引擎常驻于内存中，等待宿主将JS代码或函数传递给它。<br>也就是等待宿主环境分配宏观任务，反复等待 - 执行即为事件循环。</p></blockquote><p>Event Loop中，每一次循环称为tick，每一次tick的任务如下：</p><ul><li>执行栈选择最先进入队列的宏任务（一般都是script），执行其同步代码直至结束；</li><li>检查是否存在微任务，有则会执行至微任务队列为空；</li><li>如果宿主为浏览器，可能会渲染页面；</li><li>开始下一轮tick，执行宏任务中的异步代码（setTimeout等回调）。</li></ul><h2 id="概念4：宏任务和微任务"><a href="#概念4：宏任务和微任务" class="headerlink" title="概念4：宏任务和微任务"></a>概念4：宏任务和微任务</h2><blockquote><p>ES6 规范中，microtask 称为 jobs，macrotask 称为 task<br>宏任务是由宿主发起的，而微任务由JavaScript自身发起。</p></blockquote><p>在ES3以及以前的版本中，JavaScript本身没有发起异步请求的能力，也就没有微任务的存在。在ES5之后，JavaScript引入了Promise，这样，不需要浏览器，JavaScript引擎自身也能够发起异步任务了。</p><p>所以，总结一下，两者区别为：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/task.png" alt=""></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="setTimeout，setImmediate谁先执行？"><a href="#setTimeout，setImmediate谁先执行？" class="headerlink" title="setTimeout，setImmediate谁先执行？"></a>setTimeout，setImmediate谁先执行？</h3><p><code>setImmediate</code>和<code>process.nextTick</code>为Node环境下常用的方法（IE11支持<code>setImmediate</code>），所以，后续的分析都基于Node宿主。</p><p>Node.js是运行在服务端的js，虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以与浏览器Event Loop不太一样。</p><p>执行顺序如下：</p><blockquote><p>timers: 执行setTimeout和setInterval的回调<br>pending callbacks: 执行延迟到下一个循环迭代的 I/O 回调<br>idle, prepare: 仅系统内部使用<br>poll: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。<br>check: setImmediate在这里执行<br>close callbacks: 一些关闭的回调函数，如：socket.on(‘close’, …)<br>一般来说，<code>setImmediate</code>会在<code>setTimeout</code>之前执行，如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'outer'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>其执行顺序为：</p><ul><li>外层是一个<code>setTimeout</code>，所以执行它的回调的时候已经在timers阶段了</li><li>处理里面的<code>setTimeout</code>，因为本次循环的timers正在执行，所以其回调其实加到了下个timers阶段</li><li>处理里面的<code>setImmediate</code>，将它的回调加入check阶段的队列</li><li>外层timers阶段执行完，进入pending callbacks，idle, prepare，poll，这几个队列都是空的，所以继续往下</li><li>到了check阶段，发现了<code>setImmediate</code>的回调，拿出来执行</li><li>然后是close callbacks，队列是空的，跳过</li><li>又是timers阶段，执行console.log(‘<code>setTimeout</code>‘)</li></ul><p>但是，如果当前执行环境不是timers阶段，就不一定了。。。。顺便科普一下Node里面对<code>setTimeout</code>的特殊处理：<code>setTimeout</code>(fn, 0)会被强制改为<code>setTimeout</code>(fn, 1)。</p><p>看看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其执行顺序为：</p><ul><li>遇到<code>setTimeout</code>，虽然设置的是0毫秒触发，但是被node.js强制改为1毫秒，塞入times阶段</li><li>遇到<code>setImmediate</code>塞入check阶段</li><li>同步代码执行完毕，进入Event Loop</li><li>先进入times阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足<code>setTimeout</code>条件，执行回调，如果没过1毫秒，跳过</li><li>跳过空的阶段，进入check阶段，执行<code>setImmediate</code>回调</li></ul><p>可见，1毫秒是个关键点，所以在上面的例子中，<code>setImmediate</code>不一定在<code>setTimeout</code>之前执行了。</p><div class="note info flat">            <p>因为process.nextTick为Node环境下的方法，所以后续的分析依旧基于Node。<br>process.nextTick() 是一个特殊的异步API，其不属于任何的Event Loop阶段。事实上Node在遇到这个API时，Event Loop根本就不会继续进行，会马上停下来执行process.nextTick()，这个执行完后才会继续Event Loop。<br>所以，nextTick和Promise同时出现时，肯定是nextTick先执行，原因是nextTick的队列比Promise队列优先级更高。</p>          </div><div class="note info flat">            <p>promise的内部既包含宏任务也包含微任务，promise内部执行为宏任务，then执行为微任务</p>          </div><div class="note info flat">            <p>第一轮宏任务打印：script start 、async2 end、 Promise 、script end<br>第一轮微任务打印：async1 end 、promise1、promise2<br>（此时微任务队列清空，且存在其他宏任务，进入下一轮事件循环）<br>第二轮宏任务： setTimeout等</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crash问题分析</title>
      <link href="posts/40520/"/>
      <url>posts/40520/</url>
      
        <content type="html"><![CDATA[<h2 id="内存异常场景"><a href="#内存异常场景" class="headerlink" title="内存异常场景"></a>内存异常场景</h2><h2 id="信号量类型"><a href="#信号量类型" class="headerlink" title="信号量类型"></a>信号量类型</h2><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h2 id="crash文件内容解读"><a href="#crash文件内容解读" class="headerlink" title="crash文件内容解读"></a>crash文件内容解读</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Crash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-upload中drag属性源码解析</title>
      <link href="posts/45972/"/>
      <url>posts/45972/</url>
      
        <content type="html"><![CDATA[<h2 id="drag开启时，源码解析"><a href="#drag开启时，源码解析" class="headerlink" title="drag开启时，源码解析"></a>drag开启时，源码解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要是对文件拖动进div后进行解析</span></span><br><span class="line">onDrop(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.disabled || !<span class="keyword">this</span>.uploader) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//接受上传的文件类型（thumbnail-mode 模式下此参数无效），此处判断该文件是都符合能上传的类型</span></span><br><span class="line">        <span class="keyword">const</span> accept = <span class="keyword">this</span>.uploader.accept;</span><br><span class="line">        <span class="keyword">this</span>.dragover = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!accept) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$emit(<span class="string">'file'</span>, e.dataTransfer.files);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'file'</span>, [].slice.call(e.dataTransfer.files).filter(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; type, name &#125; = file;</span><br><span class="line">          <span class="comment">//获取文件名后缀，与设置的文件类型进行对比</span></span><br><span class="line">          <span class="keyword">const</span> extension = name.indexOf(<span class="string">'.'</span>) &gt; <span class="number">-1</span></span><br><span class="line">            ? <span class="string">`.<span class="subst">$&#123; name.split(<span class="string">'.'</span>).pop() &#125;</span>`</span></span><br><span class="line">            : <span class="string">''</span>;</span><br><span class="line">          <span class="keyword">const</span> baseType = type.replace(<span class="regexp">/\/.*$/</span>, <span class="string">''</span>);</span><br><span class="line">          <span class="keyword">return</span> accept.split(<span class="string">','</span>)</span><br><span class="line">            .map(<span class="function"><span class="params">type</span> =&gt;</span> type.trim())</span><br><span class="line">            .filter(<span class="function"><span class="params">type</span> =&gt;</span> type)</span><br><span class="line">            .some(<span class="function"><span class="params">acceptedType</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="regexp">/\..+$/</span>.test(acceptedType)) &#123;</span><br><span class="line">                <span class="comment">//文件名后缀与设置的文件类型进行对比</span></span><br><span class="line">                <span class="keyword">return</span> extension === acceptedType;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="regexp">/\/\*$/</span>.test(acceptedType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> baseType === acceptedType.replace(<span class="regexp">/\/\*$/</span>, <span class="string">''</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="regexp">/^[^\/]+\/[^\/]+$/</span>.test(acceptedType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> type === acceptedType;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="为什么用了drag属性后不触发on-change事件"><a href="#为什么用了drag属性后不触发on-change事件" class="headerlink" title="为什么用了drag属性后不触发on-change事件"></a>为什么用了drag属性后不触发on-change事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在upload-dragger.vue执行完onDrop函数，将file传入on-file=&#123;uploadFiles&#125;，触发uploadFiles</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">//判断是否允许拖拽，允许的话显示upload-dragger组件，不允许就显示所有插槽中的节点</span></span><br><span class="line">      &lt;div &#123;...data&#125; tabindex=<span class="string">"0"</span> &gt;</span><br><span class="line">        &#123;</span><br><span class="line">          drag</span><br><span class="line">            ? <span class="xml"><span class="tag">&lt;<span class="name">upload-dragger</span> <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span> <span class="attr">on-file</span>=<span class="string">&#123;uploadFiles&#125;</span>&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">upload-dragger</span>&gt;</span></span></span><br><span class="line">            : <span class="keyword">this</span>.$slots.default</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-upload__input"</span> type=<span class="string">"file"</span> ref=<span class="string">"input"</span> name=&#123;name&#125; on-change=&#123;handleChange&#125; multiple=&#123;multiple&#125; accept=&#123;accept&#125;&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line"><span class="comment">//这里的正常流程应该是拖动文件格式正确返回一个非空数组[xxx]，然后执行onstart，在onstart中执行onchange事件；</span></span><br><span class="line"><span class="comment">//如果拖动文件格式错误返回数组为空[]，那么会直接return。</span></span><br><span class="line">uploadFiles(files) &#123;</span><br><span class="line">      <span class="comment">//文件超出个数限制时，调用onExceed钩子函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.limit &amp;&amp; <span class="keyword">this</span>.fileList.length + files.length &gt; <span class="keyword">this</span>.limit) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onExceed &amp;&amp; <span class="keyword">this</span>.onExceed(files, <span class="keyword">this</span>.fileList);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将files转成数组</span></span><br><span class="line">      <span class="keyword">let</span> postFiles = <span class="built_in">Array</span>.prototype.slice.call(files);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.multiple) &#123; postFiles = postFiles.slice(<span class="number">0</span>, <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (postFiles.length === <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125; <span class="comment">//这行代码就是为什么不继续执行on-change的原因</span></span><br><span class="line"></span><br><span class="line">      postFiles.forEach(<span class="function"><span class="params">rawFile</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.onStart(rawFile); <span class="comment">//调用on-start方法</span></span><br><span class="line">        <span class="comment">//选取文件后调用upload方法立即进行上传文件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.autoUpload) <span class="keyword">this</span>.upload(rawFile);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现优化UI体验效果</title>
      <link href="posts/6962/"/>
      <url>posts/6962/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS实现中部div滚动"><a href="#CSS实现中部div滚动" class="headerlink" title="CSS实现中部div滚动"></a>CSS实现中部div滚动</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.top &#123;xxx&#125;</span><br><span class="line">//这里的外部content高度小于内部content2内容高度时触发滚动</span><br><span class="line"><span class="selector-class">.content1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">  flex: <span class="number">1</span></span><br><span class="line">  height: <span class="number">200px</span></span><br><span class="line">  .content2 &#123;</span><br><span class="line">    flex: <span class="number">1</span></span><br><span class="line">    overflow：auto</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;xxx&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS实现中部滚动，底部操作栏随窗口移动"><a href="#CSS实现中部滚动，底部操作栏随窗口移动" class="headerlink" title="CSS实现中部滚动，底部操作栏随窗口移动"></a>CSS实现中部滚动，底部操作栏随窗口移动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="sass" scoped&gt;</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tip</span>&#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.test-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    .test-top &#123;</span><br><span class="line">      <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> 0 16<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.test-content</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">150px</span>);</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#E0E0E0</span>;</span><br><span class="line">      .content &#123;</span><br><span class="line">        <span class="selector-tag">flex</span>: 1;</span><br><span class="line">        <span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.footer</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#E0E0E0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async和await使用对比</title>
      <link href="posts/26266/"/>
      <url>posts/26266/</url>
      
        <content type="html"><![CDATA[<p>整理一下async/await的优缺点，看看到底在哪些场合适合使用async/await。</p><h2 id="优点1、它做到了真正的串行的同步写法，代码阅读相对容易"><a href="#优点1、它做到了真正的串行的同步写法，代码阅读相对容易" class="headerlink" title="优点1、它做到了真正的串行的同步写法，代码阅读相对容易"></a>优点1、它做到了真正的串行的同步写法，代码阅读相对容易</h2><p>这个优点是没错，但是JavaScript的百分之九十的异步场合都是ajax，ajax就一定需要考虑异常，很有可能需要try…catch…来处理异常，所以优势并不明显。</p><h2 id="优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面"><a href="#优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面" class="headerlink" title="优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面"></a>优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">await</span> a() === <span class="number">222</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'yes, it is!'</span>) <span class="comment">// 会打印</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>如果<code>await a()</code>没有出错的可能性，还可以省掉try…catch…。</p><h2 id="优点3、同样的，处理复杂流程时，在代码清晰度方面有优势"><a href="#优点3、同样的，处理复杂流程时，在代码清晰度方面有优势" class="headerlink" title="优点3、同样的，处理复杂流程时，在代码清晰度方面有优势"></a>优点3、同样的，处理复杂流程时，在代码清晰度方面有优势</h2><p>举个例子，有这样一套业务逻辑：有一个变量，类型是数组，如果它的length大于0，则遍历它进行下一步操作，如果length等于0，说明没有经历过ajax请求，则先ajax请求并赋值内容，然后再遍历它进行下一步操作；如果ajax的结果依旧是空，则显示toast，并中断流程。</p><ul><li>Promise写法（伪代码）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.data.length) &#123;</span><br><span class="line">        arr = res.data;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        showToast(<span class="string">'数据为空'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>async/await写法（伪代码）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> ajax();</span><br><span class="line">    <span class="keyword">if</span> (res.data.length) &#123;</span><br><span class="line">      arr = res.data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      showToast(<span class="string">'数据为空'</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>可以看出：</p><ul><li><p>Promise写法，必须有if (arr.length) {resolve();}，而async/await写法不用考虑这个分支。</p></li><li><p>Promise写法的代码不仅冗长，而且这还是在省略了一部分代码的前提下，showToast(‘数据为空’)这个分支永远是pending状态，可能会带来一些问题。</p></li></ul><h2 id="无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…"><a href="#无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…" class="headerlink" title="无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…"></a>无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…</h2><p><code>await</code>无法处理reject对象，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>则<code>await g()</code>会直接报错，必须使用try…catch…捕获。</p><p>那么假定有3个ajax串行请求，Promise模式与async/await的对比如下：</p><ul><li>1、允许统一处理reject的话：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise（伪代码）：</span></span><br><span class="line">ajax1().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax2();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax3();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'可能打印ajax1或2或3的fail'</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//async/await（伪代码）：</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax1();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">    <span class="keyword">await</span> ajax2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">    <span class="keyword">await</span> ajax3();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'可能打印ajax1或2或3的reject'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><ul><li>2、需要单独处理每一个ajax的reject的话：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise（伪代码）：</span></span><br><span class="line">ajax1().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax2();</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1的fail'</span>, err);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax3();</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2的fail'</span>, err);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3的fail'</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//async/await（伪代码）：</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax1();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax1的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax2的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax3();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax3的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>对比结果：从代码量上说，大同小异，就看你是否用的惯try…catch…。</p><p>为什么说用的惯，看这段代码，这段代码在上文贴过，想象一下，假如<code>if ( await a() === 222)</code> {的内容体有20行，会怎样——你会发现，<code>try</code>跟<code>catch</code>相距22行，很远，难以阅读，而且，内容体里面如果还有try…catch…怎么办？这就成了try…catch…的嵌套圣诞树，更难以阅读，最终解决办法只能是：如果if的内容体太长，尤其是try…catch…的嵌套圣诞树，就放弃<code>if ( await a() === 222)</code> {这种优雅的写法，改成<code>const res == await a();</code>这种写法，然后把这句单独做try…catch…。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">await</span> a() === <span class="number">222</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'yes, it is!'</span>) <span class="comment">// 会打印</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h2 id="无所谓优缺点2、await只能串行，做不到并行"><a href="#无所谓优缺点2、await只能串行，做不到并行" class="headerlink" title="无所谓优缺点2、await只能串行，做不到并行"></a>无所谓优缺点2、await只能串行，做不到并行</h2><p>Promise可以轻松做到并行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ajax1();</span><br><span class="line">ajax2();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">Promise</span>.all([ajax1(), ajax2()])</span><br></pre></td></tr></table></figure><p>但是await做不到，它一定是阻塞的。await甚至可以阻塞for循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// 用时 22 秒才打印完</span></span><br></pre></td></tr></table></figure><p>注意，await做不到并行，不代表async不能并行。只要await不在同一个async函数里就可以并行。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>].forEach(<span class="keyword">async</span> (v) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h2 id="无所谓优缺点3、全局捕获错误必须用window-onerror，不像Promise可以专用window-addEventListener-‘unhandledrejection’-function-，而window-onerror会捕获各种稀奇古怪的错误，造成系统浪费"><a href="#无所谓优缺点3、全局捕获错误必须用window-onerror，不像Promise可以专用window-addEventListener-‘unhandledrejection’-function-，而window-onerror会捕获各种稀奇古怪的错误，造成系统浪费" class="headerlink" title="无所谓优缺点3、全局捕获错误必须用window.onerror，不像Promise可以专用window.addEventListener(‘unhandledrejection’, function)，而window.onerror会捕获各种稀奇古怪的错误，造成系统浪费"></a>无所谓优缺点3、全局捕获错误必须用window.onerror，不像Promise可以专用window.addEventListener(‘unhandledrejection’, function)，而window.onerror会捕获各种稀奇古怪的错误，造成系统浪费</h2><p>尽管window.onerror的开销大，但是一个成熟的系统是一定要利用window.onerror做错误监控系统，所以，无所谓了。</p><h2 id="缺点1、try…catch…内部的变量无法传递给下一个try…catch…"><a href="#缺点1、try…catch…内部的变量无法传递给下一个try…catch…" class="headerlink" title="缺点1、try…catch…内部的变量无法传递给下一个try…catch…"></a>缺点1、try…catch…内部的变量无法传递给下一个try…catch…</h2><p>Promise和then/catch内部定义的变量，能通过then链条的参数传递到下一个then/catch，但是async/await的try内部的变量，如果用<code>let</code>和<code>const</code>定义则无法传递到下一个try…catch…，只能在外层作用域先定义好。</p><h2 id="缺点2、async-await无法简单实现Promise的各种原生方法，比如-race-之类"><a href="#缺点2、async-await无法简单实现Promise的各种原生方法，比如-race-之类" class="headerlink" title="缺点2、async/await无法简单实现Promise的各种原生方法，比如.race()之类"></a>缺点2、async/await无法简单实现Promise的各种原生方法，比如.race()之类</h2><p>如果真的编写一些工具库，确实可以实现Promise的各种原生方法，但放着Promise原生方法不用，却要写工具库，完全没必要。</p><h2 id="什么场合用async-await，什么场合用Promise？"><a href="#什么场合用async-await，什么场合用Promise？" class="headerlink" title="什么场合用async/await，什么场合用Promise？"></a>什么场合用async/await，什么场合用Promise？</h2><ul><li><p>需要用到Promise各种便捷的方法（比如.race()之类）的时候，一定用Promise。</p></li><li><p>并行的请求最好用Promise。</p></li><li><p>不需要并行的场合，如果要传递参数，最好用Promise。</p></li><li><p>其他ajax场合，看你喜好try…catch…还是.catch()，以决定使用哪一方。</p></li><li><p>你必须看看下方对于拦截器的讨论。</p></li></ul><h2 id="额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？"><a href="#额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？" class="headerlink" title="额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？"></a>额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？</h2><p>拦截器对于后端业务代码出错，例如500错误，应当怎么处理呢？</p><h3 id="如果：拦截器把200和500都归类到resolve"><a href="#如果：拦截器把200和500都归类到resolve" class="headerlink" title="如果：拦截器把200和500都归类到resolve"></a>如果：拦截器把200和500都归类到resolve</h3><ul><li>优点：共有的好处是只需要考虑200状态，所以确实不需要写try…catch…，也不需要.catch()。</li><li>缺点：对两个方案都有缺点，500归为resolve的话，语义比较拧巴，而且业务代码里永远需要有这种代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.code === <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">500</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果：拦截器只将500错误归为reject，而200依然属于resolve"><a href="#如果：拦截器只将500错误归为reject，而200依然属于resolve" class="headerlink" title="如果：拦截器只将500错误归为reject，而200依然属于resolve"></a>如果：拦截器只将500错误归为reject，而200依然属于resolve</h3><ul><li>优点：共有的好处是不用一遍遍的写<code>if (res.code === XXX)</code>，因为try里面是200的处理代码，catch里面是500的处理代码，天然就分开了。而且，500错误归为reject，从语义上说不拧巴。</li><li>缺点：对两个方案都有缺点，必须用try…catch…或.catch()捕获reject，不能省略。</li></ul><p>结论<br>1、200和500全归到resolve的前提下，真的可以避免try…catch…，但是又带来了<code>if (res.code === XXX)</code>。</p><p>2、如果喜欢写<code>if (res.code === XXX)</code>，就让拦截器把200和500都归类到resolve，如果不喜欢写<code>if (res.code === XXX)</code>，就500归类到reject。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue样式穿透 ::v-deep的具体使用</title>
      <link href="posts/15950/"/>
      <url>posts/15950/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍了vue样式穿透 ::v-deep的具体使用，即使目前项目大多使用组件库，但在项目中肯定也需要用额外的样式来打造自己的应用。直接在 <code>&lt;style lang=&quot;scss&quot; scoped&gt; .... &lt;/style&gt;</code> 中编写的话只会影响当前组件内的样式，但如果去掉scoped话又会影响全局样式。想了好多方法，都没得到很好的解决。</p><p>百度之后发现 可以用<code>/deep/</code>或<code>::v-deep</code>来解决（不过在vue3.0的环境下，使用/deep/时，编译会报错）。没想到官方文档中其实早就给出了解决方案，怪自己没有认真看过文档，对vue的掌握还是不够熟悉啊，得好好学习了。</p><h2 id="深度作用选择器"><a href="#深度作用选择器" class="headerlink" title="深度作用选择器"></a>深度作用选择器</h2><p>如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用<code>&gt;&gt;&gt;</code>操作符：<br><code>&lt;style scoped&gt; .a &gt;&gt;&gt; .b { /* ... */ } &lt;/style&gt;</code>上述代码将会编译成：<br><code>.a[data-v-f3f3eg9] .b { /* … */ }</code></p><p>有些像 Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code> 的别名，同样可以正常工作。</p><ul><li><p>1、&gt;&gt;&gt;<br>如果vue的style使用的是css，那么则</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="css" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span> &gt;&gt;&gt; <span class="selector-class">.b</span> &#123; </span><br><span class="line"> <span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>2、/deep/</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"> /deep/ .b &#123; </span><br><span class="line">  <span class="comment">/* ... */</span> </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>3、::v-deep(切记必须是双冒号)<br>但是有些开发者反应，在vue-cli3编译时，deep的方式会报错或者警告。此时我们可以使用第三种方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"> ::v-deep .b &#123; </span><br><span class="line">  <span class="comment">/* ... */</span> </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用场景:<br>当我们需要覆盖element-ui中的样式时只能通过深度作用选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">style为css时的写法如下</span><br><span class="line"></span><br><span class="line"> .a &gt;&gt;&gt; .b &#123;</span><br><span class="line">  ***</span><br><span class="line"> &#125;</span><br><span class="line">style使用css的预处理器(less, sass, scss)的写法如下,建议使用第二种方式,&#x2F;deep&#x2F;在某些时候会报错,::v-deep更保险并且编译速度更快.</span><br><span class="line">第一种&#x2F;deep&#x2F;</span><br><span class="line"></span><br><span class="line"> &#x2F;deep&#x2F; .a &#123;</span><br><span class="line">  ***</span><br><span class="line"> &#125;</span><br><span class="line">第二种::v-deep</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 特性集合</title>
      <link href="posts/56620/"/>
      <url>posts/56620/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue父子组件传值"><a href="#Vue父子组件传值" class="headerlink" title="Vue父子组件传值"></a>Vue父子组件传值</h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点杀鸡用牛刀。Vue 2.4 版本提供了另一种方法，使用 v-bind=”$attrs”, 将父组件中不被认为 props特性绑定的属性传入子组件中，通常配合 interitAttrs 选项一起使用。之所以要提到这两个属性，是因为两者的出现使得组件之间跨组件的通信在不依赖 vuex 和事件总线的情况下变得简洁，业务清晰。<br><a href="https://img.jbzj.com/file_images/article/201801/201818103314216.png?201808103342" target="_blank" rel="noopener"></a></p><ul><li><p>v-bind=”$props”<br>可以将父组件的所有props下发给它的子组件,子组件需要在其props:{} 中定义要接受的props。<br>vm.$props: 当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象属性的访问。</p></li><li><p>v-bind=”$attrs”<br>将调用组件时的组件标签上绑定的非props的特性(class和style除外)向下传递。在子组件中应当添加inheritAttrs: false(避免父作用域的不被认作props的特性绑定应用在子组件的根元素上)。</p></li><li><p>v-on=”$listeners”<br>将父组件标签上的自定义事件向下传递其子组件可以直接通过emit(eventName)的方式调用。</p></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>A组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">child1</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:p-child1</span>=<span class="string">"child1"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:p-child2</span>=<span class="string">"child2"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:test1</span>=<span class="string">"onTest1"</span> //此处监听了两个事件，可以在<span class="attr">B</span>组件或者<span class="attr">C</span>组件中直接触发</span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:test2</span>=<span class="string">"onTest2"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">child1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> Child1 <span class="keyword">from</span> <span class="string">'./Child1.vue'</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> components: &#123; Child1 &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line"> onTest1 () &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test1 running...'</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> onTest2 () &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test2 running'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>B组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>in child1:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>props: &#123;&#123;pChild1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>$attrs: &#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的） --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">child2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span><span class="tag">&lt;/<span class="name">child2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> Child2 <span class="keyword">from</span> <span class="string">'./Child2.vue'</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> props: [<span class="string">'pChild1'</span>],</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> inheritAttrs: <span class="literal">false</span>,</span><br><span class="line"> components: &#123; Child2 &#125;,</span><br><span class="line"> mounted () &#123;</span><br><span class="line"> <span class="keyword">this</span>.$emit(<span class="string">'test1'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/结果</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ in child1:</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ props: v_child1</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $attrs: &#123; “p-child2”: “v_child2”&#125;</span></span><br></pre></td></tr></table></figure><p>C组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-2"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>in child2:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>props: &#123;&#123;pChild2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>$attrs: &#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> props: [<span class="string">'pChild2'</span>],</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> inheritAttrs: <span class="literal">false</span>,</span><br><span class="line"> mounted () &#123;</span><br><span class="line"> <span class="keyword">this</span>.$emit(<span class="string">'test2'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/结果</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ in child2:</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ props: v_child2</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $attrs: &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vue-render"><a href="#Vue-render" class="headerlink" title="Vue render"></a>Vue render</h2><ul><li><a href="https://www.jianshu.com/p/0c9516a3be80" target="_blank" rel="noopener">点我了解render用法</a></li></ul><h2 id="Vue-代码比对插件"><a href="#Vue-代码比对插件" class="headerlink" title="Vue 代码比对插件"></a>Vue 代码比对插件</h2><ul><li><a href="https://codechina.csdn.net/mirrors/ddchef/vue-code-diff" target="_blank" rel="noopener">vue-code-diff</a></li></ul><h2 id="Vue异步更新Dom和-nextTick原理"><a href="#Vue异步更新Dom和-nextTick原理" class="headerlink" title="Vue异步更新Dom和$nextTick原理"></a>Vue异步更新Dom和$nextTick原理</h2><p>理论上，我们不应主动去操作DOM，因为Vue的核心思想就是数据驱动DOM，但在很多业务里，我们避免不了会操做一些DOM,这时我们就有可能用到$nextTick。</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><ul><li><a href="https://www.cnblogs.com/pleaseAnswer/p/13566987.html" target="_blank" rel="noopener">Vue异步更新Dom</a></li><li>$nextTick 的使用场景</li></ul><p>虽然 Vue 是数据驱动的，但是有时候我们不得不去操作 DOM 去处理一些特殊的场景，而 Vue 更新 DOM 是异步执行的，所以我们不得不去使用 $nextTick 去异步获取 DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'hello nextTick'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeMsg() &#123;</span><br><span class="line">      <span class="keyword">this</span>.msg = <span class="string">'hello world'</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg.innerHTML, <span class="string">'同步获取'</span>)</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg.innerHTML, <span class="string">'异步获取'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.changeMsg()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>得到的结果分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello nextTick 同步获取</span><br><span class="line">hello world 异步获取</span><br></pre></td></tr></table></figure><h2 id="Vue-click属性"><a href="#Vue-click属性" class="headerlink" title="Vue @click属性"></a>Vue @click属性</h2><ul><li><a href="https://blog.csdn.net/L_Sarah/article/details/109805756" target="_blank" rel="noopener">理解vue @click.native<del>.prevent</del>.stop<del>.self</del>.once</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的常用工具推荐</title>
      <link href="posts/31626/"/>
      <url>posts/31626/</url>
      
        <content type="html"><![CDATA[<h2 id="Tortoigit"><a href="#Tortoigit" class="headerlink" title="Tortoigit"></a>Tortoigit</h2><h3 id="安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare"><a href="#安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare" class="headerlink" title="安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare"></a>安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare</h3><ul><li><a href="https://www.cnblogs.com/anayigeren/p/10177027.html" target="_blank" rel="noopener">TortoiseGit 使用教程</a></li><li>在设置中找到差异查看器-&gt;外部-&gt;选择下载好的比较工具文件</li></ul><p>本人认为自带的比较不好用，所以使用外部的比较工具，按需引入</p><ul><li><a href="https://www.beyondcompare.cc/" target="_blank" rel="noopener">beyondcompare安装</a></li></ul><h2 id="GitKraken"><a href="#GitKraken" class="headerlink" title="GitKraken"></a>GitKraken</h2><p>直接下载这个版本的GitKraken，顺便附上了破解方法</p><ul><li><a href="https://pan.baidu.com/s/1B-Fvg4xsTR0V63IIx1hhOg" target="_blank" rel="noopener">GitKraken安装文件</a>提取码: 5p2p</li><li><a href="https://github.com/5cr1pt/GitCracken" target="_blank" rel="noopener">破解方法</a></li><li><a href="https://www.cnblogs.com/brifuture/category/1219605.html" target="_blank" rel="noopener">GitKraken快速上手使用教程</a></li></ul><h2 id="git配置时注意"><a href="#git配置时注意" class="headerlink" title="git配置时注意"></a>git配置时注意</h2><ul><li><p>git配置用户名邮箱和ssh后，需要再加入配置<code>git config --global  core.autocrlf=false</code>,避免因为符号格式导致代码在不同环境编译失败的问题</p></li><li><p>如果电脑上有两个环境需要在两种环境下都进行git基础配置以及同时在远程仓库提交两份生成的ssh公钥<code>ssh-keygen -t rsa</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健忘总结篇</title>
      <link href="posts/43786/"/>
      <url>posts/43786/</url>
      
        <content type="html"><![CDATA[<p>本篇记录总结一下web实习期间的一些常见问题总结</p><p>懒得写了直接参考文件吧！</p><h2 id="完整直接参考文件"><a href="#完整直接参考文件" class="headerlink" title="完整直接参考文件"></a>完整直接参考文件</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/file_source/attention.txt" target="_blank" rel="noopener">注意事项</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp基础语法</title>
      <link href="posts/59605/"/>
      <url>posts/59605/</url>
      
        <content type="html"><![CDATA[<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>创建正则表达式对象时，可以设置’m’、’i’、’g’这三个标志，分别对应多行模式、不区分大小模式和全局模式三种</p><p>全局模式 g:<br>默认地，第一次匹配成功后，正则对象就停止向下匹配了。g 修饰符表示全局匹配(global)，设置’g’标志后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2a,3a&#39;</span><br><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;g,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2b,3b&#39;</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>特点：javascript 中的正则表达式最大的特点是不支持空白，必须写在一行中</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配ab</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a b/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab /</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">元字符         名称              匹配对象</span><br><span class="line">.             点号               单个任意字符(除回车\r、换行\n、行分隔符\u2028和段分隔符\u2029外)</span><br><span class="line">[]            字符组             列出的单个任意字符</span><br><span class="line">[^]           排除型字符组        未列出的单个任意字符</span><br><span class="line">?             问号               匹配<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">*             星号               匹配<span class="number">0</span>交或多次</span><br><span class="line">+             加号               匹配<span class="number">1</span>次或多次</span><br><span class="line">&#123;min,max&#125;     区间量词            匹配至少min次，最多max次</span><br><span class="line">^             脱字符             行的起始位置</span><br><span class="line">$             美元符             行的结束位置</span><br><span class="line">|             竖线               分隔两边的任意一个表达式</span><br><span class="line">()            括号               限制多选结构的范围，标注量词作用的元素，为反向引用捕获文本</span><br><span class="line">\<span class="number">1</span>,\<span class="number">2.</span>..      反向引用            匹配之前的第一、第二...组括号内的表达式匹配的文本</span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li>【1】因为元字符有特殊的含义，所以无法直接匹配。如果要匹配它们本身，则需要在它们前面加上反斜杠()</li></ul><div class="note info flat">            <p>右方括号]和右花括号}不需要转义</p>          </div><ul><li>【2】’&#39;加非元字符，表示一些不能打印的特殊字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span>        NUL字符\u0000</span><br><span class="line">[\b]      匹配退格符\u0008，不要与\b混淆</span><br><span class="line">\t        制表符\u0009</span><br><span class="line">\n        换行符\u000A</span><br><span class="line">\v        垂直制表符\u000B</span><br><span class="line">\f        换页符\u000C</span><br><span class="line">\r        回车符\u000D</span><br><span class="line">\xnn      由十六进制数nn指定的拉丁字符</span><br><span class="line">\uxxxx    由十六进制数xxxx指定的Unicode字符(\u4e00-\u9fa5代表中文)</span><br><span class="line">\cX       控制字符^X，表示ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>‘&#39;加任意其他字符，默认情况就是匹配此字符，也就是说，反斜线()被忽略了</p>          </div><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><ul><li>范围</li></ul><p>正则表达式通过连字符(-)提供了范围表示法，可以简化字符组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/[<span class="number">0123456789</span>]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[<span class="number">0</span><span class="number">-9</span>]/</span><br><span class="line">/[abcdefghijklmnopqrstuvwxyz]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[a-z]/</span><br></pre></td></tr></table></figure><ul><li>排除</li></ul><p>字符组的另一个类型是排除型字符组，在左方括号后紧跟一个脱字符’^’表示，表示在当前位置匹配一个没有列出的字符，所以[^0-9]表示 0-9 以外的字符</p><div class="note info flat">            <p>在字符组内部，脱字符’^’表示排除，而在字符组外部，脱字符’^’表示一个行锚点</p>          </div><div class="note info flat">            <p>^符号是元字符，在字符组中只要^符号不挨着左方括号就可以表示其本身含义，不转义也可以</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配abc和^符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c\^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[\^a-c]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>简记</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d     数字，等同于[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\D     非数字，等同于[^<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\s     空白字符，等同于[\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\S     非空白字符，等同于[^\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\w     字母、数字、下划线，等同于[<span class="number">0</span><span class="number">-9</span>A-Za-z_](汉字不属于\w)</span><br><span class="line">\W     非字母、数字、下划线，等同于[^<span class="number">0</span><span class="number">-9</span>A-Za-z_]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，量词都是贪婪模式(greedy quantifier)，即匹配到下一个字符不满足匹配规则为止</span></span><br><span class="line">&#123;n&#125;       匹配n次</span><br><span class="line">&#123;n,m&#125;     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;      匹配至少n次</span><br><span class="line">?         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><p>懒惰模式(lazy quantifier)和贪婪模式相对应，在量词后加问号’?’表示，表示尽可能少的匹配，一旦条件满足就再不往下匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125;?       匹配n次</span><br><span class="line">&#123;n,m&#125;?     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;?      匹配至少n次</span><br><span class="line">??         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*?         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+?         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>括号有两个功能，分别是分组和引用。具体而言，用于限定量词或选择项的作用范围，也可以用于捕获文本并进行引用或反向引用</p><ul><li>分组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希望字符串'ab'重复出现2次，应该写为(ab)&#123;2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//身份证长度有15位和18位两种</span></span><br><span class="line">/\d&#123;<span class="number">15</span>&#125;(\d&#123;<span class="number">3</span>&#125;)?<span class="regexp">/;</span></span><br></pre></td></tr></table></figure><ul><li>捕获</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RegExp.$1\RegExp.$2\RegExp.$3……到RegExp.$9分别用于存储第一、第二……第九个匹配的捕获组。在调用exec()或test()方法时，这些属性会被自动填充</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>.test(<span class="string">"2016-06-23"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//'2016'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//'06'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">4</span>); <span class="comment">//''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在replace()方法中也可以引用分组，形式是$num，num是对应分组的编号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2000-01-01"</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>, <span class="string">"$3-$2-$1"</span>)); <span class="comment">//'01-01-2000'</span></span><br></pre></td></tr></table></figure><ul><li>反向引用<br>反向引用允许在正则表达式内部引用之前捕获分组匹配的文本，形式是\num，num 表示所引用分组的编号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始标签</span></span><br><span class="line">&lt;([^&gt;]+)&gt;</span><br><span class="line"><span class="comment">//标签内容</span></span><br><span class="line">[\s\S]*?</span><br><span class="line"><span class="comment">//匹配成对的标签</span></span><br><span class="line">/&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">console.log(/</span>&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/.test('&lt;a&gt;123&lt;/</span>a&gt;<span class="string">'));//true</span></span><br><span class="line"><span class="string">console.log(/&lt;([^&gt;]+)&gt;[\s\S]*?&lt;\/\1&gt;/.test('</span>&lt;a&gt;<span class="number">123</span>&lt;<span class="regexp">/b&gt;'));/</span><span class="regexp">/false</span></span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开头</span></span><br><span class="line">(<span class="number">0</span>|\+<span class="number">86</span>)?</span><br><span class="line"><span class="comment">//前3位</span></span><br><span class="line"><span class="number">13</span>\d|<span class="number">14</span>[<span class="number">579</span>]|<span class="number">15</span>[<span class="number">0</span><span class="number">-35</span><span class="number">-9</span>]|<span class="number">17</span>[<span class="number">0135</span><span class="number">-8</span>]|<span class="number">18</span>\d</span><br><span class="line"><span class="comment">//后8位</span></span><br><span class="line">\d&#123;<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/(0|\+86)?(13\d|14[579]|15[0-35-9]|17[0135-8]|18\d)\d&#123;8&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'13453250661'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1913250661'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1345325061'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>在正则表达式中，有些结构并不真正匹配文本，而只负责判断在某个位置左/右侧是否符合要求，这种结构被称为断言(assertion)，也称为锚点(anchor)，常见的断言有 3 种：单词边界、行开头结尾、环视</p><ul><li>单词边界<br>正则表达式提供了专用的单词边界(word boundary)，记为\b，它匹配的是’单词边界’位置，而不是字符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an apple"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"a an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"and"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"ban"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li><p>起始结束<br>常见的断言还有^和$，它们分别匹配字符串的开始位置和结束位置，所以可以用来判断整个字符串能否由表达式匹配</p></li><li><p>环视<br>javascript 只支持正序环视，相当于只支持向前看，不支持往回看;而正序环视又分为肯定正序环视和否定正序环视<br>肯定正序环视的记法是(?=n)，表示前面必须是 n 才匹配；否定正序环视的记忆法是(?!n)，表示前面必须不是 n 才匹配</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//['a']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)b/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['ab']</span></span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从上到下，优先级逐渐降低</span></span><br><span class="line">\                            转义符</span><br><span class="line">() (?!) (?=) []              括号、字符组、环视</span><br><span class="line">* + ? &#123;n&#125; &#123;n,&#125; &#123;n,m&#125;         量词</span><br><span class="line">^ $                          起始结束位置</span><br><span class="line">|                            选择</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作流程</title>
      <link href="posts/29524/"/>
      <url>posts/29524/</url>
      
        <content type="html"><![CDATA[<h2 id="推送代码到远端"><a href="#推送代码到远端" class="headerlink" title="推送代码到远端"></a>推送代码到远端</h2><p>日常开发完一块功能，要把代码推送到远端保存时，一般是按如下步骤进行操作：</p><ul><li><code>git status</code> 显示本地仓库的状态。如果此时显示远端没有更新的代码，接着执行以下步骤；</li><li><code>git add &lt;filePath&gt;</code> 把此次改动的文件加入本地缓存区；</li><li><code>git commit -m &#39;msg&#39;</code> 把文件提交到本地仓库，并一同带上此次修改信息；</li><li><code>git push origin &lt;branchName&gt;</code> 把当前本地分支的代码推送到相应的远程分支上。</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>1 创建并切换到新分支</li></ul><p>在日常功能开发时，首先是从主分支检出新分支作为功能开发分支，此时的本地仓库当前分支需要为主分支，且保证本地仓库版本与远端一致。然后，基于主分支创建自己的新分支，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>执行完该命令，你会得到一个新的本地分支，并且当前分支已切换到新创建的分支上。这其实是两个步骤：创建分支，切换分支。你当然可以分开执行下面两行命令，达到同样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchName&gt;</span><br><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure><ul><li>2 显示分支</li></ul><p>需要显示工程下有多少个分支时，使用命令：<code>git branch</code>。其中，带有 * 的代表当前分支。加上 -v 参数，你可以在显示分支时，一并显示各个分支最新一次的提交：<code>git branch -v</code>。除此之外，你还可以使用命令 <code>git branch -vv</code> 来显示所有分支，同时带有每个分支对应的远程分支，及最新的一次提交。</p><ul><li>3 推送分支到远端</li></ul><p>当你开发完业务功能，需要推送到远端保存时，使用 push 命名：<code>git push origin &lt;branchName&gt;</code></p><ul><li>4 拉取分支</li></ul><p>在上述 1 章节介绍执行 <code>git status</code> 后，如果显示本地仓库代码并非最新时，需要是先拉取远端代码，把本地代码保持最新，之后提交到远端才可能避免冲突。但是，如果本地分支没有与某个远程分支建立联系（例如新建工程第一次提交的时候），要先建立联系，而推送本地分支到远端时可以一并建立联系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>这样就会在远端也建立 branchName 分支，并与本地的 branchName 分支建立了联系。当需要拉取远程分支到本地的时候就可以使用命令：<code>git pull origin &lt;branchName&gt;</code>此外，<code>git fetch</code> 可以把远程的数据抓取到本地，但是不会修改本地的内容，需要自己手动 merge： <code>git merge</code>。而刚才说的 <code>git pull</code> 命令，其实正是合并了上面两条命令的功能，在抓取后一并修改。</p><ul><li>5 分支的合并</li></ul><p>开发完成，我们需要把功能分支合并会主分支。使用 merge 方式，进行开发分支合并到 master 主分支的场景时，我的操作步骤如下：<br>首先检出当前分支，例如是开发分支，然后我们要合并 master 分支进开发分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 切换到本地 master 分支，使用 git pull 保证本地 master 是最新的</span><br><span class="line">2 切换到本地的开发分支，使用合并的命令：git merge master，将 master 合并进开发分支</span><br><span class="line">3 把本地分支 git push 推送到远端</span><br><span class="line">4 再在本地切换到 master 分支，使用合并分支的代码：git merge &lt;开发分支名&gt;，把功能代码合并进主分支</span><br><span class="line">5 使用 git push 把 master 分支推送到远程</span><br></pre></td></tr></table></figure><h2 id="gitflow-工作流"><a href="#gitflow-工作流" class="headerlink" title="gitflow 工作流"></a>gitflow 工作流</h2><ul><li><a href="https://www.cnblogs.com/jeffery-zou/p/10280167.html" target="_blank" rel="noopener">gitflow管理分支</a></li></ul><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p><a href="https://blog.csdn.net/web_csdn_share/article/details/79243308" target="_blank" rel="noopener">Git常用命令及方法大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css盒模型及布局</title>
      <link href="posts/17705/"/>
      <url>posts/17705/</url>
      
        <content type="html"><![CDATA[<h2 id="普通盒模型"><a href="#普通盒模型" class="headerlink" title="普通盒模型"></a>普通盒模型</h2><p>在 CSS 中盒模型被分为两种，第一种是 W3C 的标准模型，第二种是 IE 怪异盒模型。不同之处在于后者的宽高定义的是可见元素框的尺寸，而不是元素框的内容区尺寸。目前对于浏览器大多数元素都是基于 W3C 标准的盒模型，但对于表单<code>form</code>中的部分元素还是基于 IE 的怪异盒模型，如<code>input</code>里的<code>radio</code>、<code>checkbox</code>、<code>button</code>等元素，如果给其设置<code>border</code>和<code>padding</code>它们也只会往元素盒内延伸<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/1.png" alt=""><br>在 W3C 的标准模型下，宽度和高度仅仅包含了内容宽度，除去了边框和内边距两个区域，这样为 web 设计师处理效果带来了不少麻烦。为了解决这个问题，CSS3 新增了一个盒模型属性<code>box-sizing</code>，能够事先定义盒模型的尺寸解析方式</p><blockquote><p>box-sizing<br>   值: content-box | bordrer-box | padding-box | inherit<br>   初始值: content-box<br>   应用于: 块级元素和替换元素<br>   继承性: 无</p></blockquote><div class="note info flat">            <p>注意 1：只有 firefox 浏览器支持 padding-box 属性值</p>          </div><div class="note info flat">            <p>注意 2：IE 浏览器在 getComputedStyle 得到 width/height 是按照标准模式计算的，而不论 box-sizing 的取值</p>          </div><h2 id="弹性盒模型-flex"><a href="#弹性盒模型-flex" class="headerlink" title="弹性盒模型(flex)"></a>弹性盒模型(flex)</h2><p>要让一个元素变成伸缩容器，需要使用 display 属性。采用 flex 布局的元素，称为伸缩容器(flex container)，容器内的子元素称为伸缩项目(flex item)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;弹性盒模型: 块级伸缩容器 | 内联伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">display: flex | inline-flex;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/CSS_flex.png" alt=""><br>【1】伸缩流方向:指定主轴的方向(即伸缩项目在伸缩容器中的排列方向)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流方向: 水平方向 | 反向水平 | 垂直方向 | 反向垂直</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-direction: row[默认] | row-reverse | column | column-reverse</span><br></pre></td></tr></table></figure><p>【2】伸缩流换行:指定伸缩项目溢出伸缩容器时是否换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩行换行:不换行 | 换行 | 反转换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-wrap: nowrap[默认] | wrap | wrap-reverse</span><br></pre></td></tr></table></figure><p>【3】伸缩流:伸缩流方向与伸缩行换行的缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流: 伸缩流方向 | 伸缩行换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-flow: &lt;flex-direction&gt; | &lt;flex-wrap&gt;</span><br><span class="line">[默认值] flex-flow: row nowrap</span><br></pre></td></tr></table></figure><p>【4】主轴对齐:用来设置伸缩容器当前行伸缩项目在主轴方向的对齐方式，指定如何在伸缩项目之间分布伸缩容器额外空间;当一行上的所伸缩项目不能伸缩或可伸缩已达到最大长度时，这一属性才会对伸缩容器额外空间进行分配。当伸缩项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主轴对齐方式: 左对齐 | 居中对齐 | 右对齐 | 两端对齐 | 扩散对齐</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">justify-content: flex-start[默认] | center | flex-end | space-between | space-around</span><br></pre></td></tr></table></figure><p>【5】侧轴对齐:用来设置伸缩容器当前行在侧轴方向的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 基线对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-items: flex-start | center | flex-end | baseline | stretch[默认]</span><br></pre></td></tr></table></figure><p>【6】堆栈伸缩行:指定多个伸缩项目行在侧轴的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 两端对齐 | 扩散对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-content: flex-start | center | flex-end | space-between | space-around | stretch[默认]</span><br></pre></td></tr></table></figure><h3 id="flex-兼容"><a href="#flex-兼容" class="headerlink" title="flex 兼容"></a>flex 兼容</h3><div class="note info flat">            <p>为适配旧版设备需要添加-webkit-前缀、 -ms- 或 -moz-</p>          </div><div class="note info flat">            <p>flex 是 flex-grow、flex-shrink、flex-basis 的缩写</p>          </div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*display*/</span></span><br><span class="line"><span class="selector-class">.display_flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-inline-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩流方向*/</span></span><br><span class="line"><span class="selector-class">.flex-direction_column</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主轴对齐*/</span></span><br><span class="line"><span class="selector-class">.justify-content_flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-justify</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧轴对齐*/</span></span><br><span class="line"><span class="selector-class">.align-items_flex-start</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: start;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: start;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_baseline</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: baseline;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩性*/</span></span><br><span class="line"><span class="selector-class">.flex_auto</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: auto;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: auto;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex_1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*显示顺序*/</span></span><br><span class="line"><span class="selector-class">.order_2</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.order_3</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局系统"><a href="#布局系统" class="headerlink" title="布局系统"></a>布局系统</h2><h3 id="css-Media-媒体查询"><a href="#css-Media-媒体查询" class="headerlink" title="css Media 媒体查询"></a>css Media 媒体查询</h3><p>【媒体类型】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">screen         计算机屏幕（默认值）</span><br><span class="line">tty            电传打字机以及使用等宽字符网格的类似媒介</span><br><span class="line">tv             电视类型设备（低分辨率、有限的屏幕翻滚能力）</span><br><span class="line">projection     放映机</span><br><span class="line">handheld       手持设备（小屏幕、有限的带宽）</span><br><span class="line">print          打印预览模式 &#x2F; 打印页</span><br><span class="line">braille        盲人用点字法反馈设备</span><br><span class="line">aural          语音合成器</span><br><span class="line">all            适合所有设备</span><br></pre></td></tr></table></figure><p>【媒体属性】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">width | min-width | max-width</span><br><span class="line">     height | min-height | max-height</span><br><span class="line">     device-width | min-device-width | max-device-width</span><br><span class="line">     device-height | min-device-height | max-device-height</span><br><span class="line">     aspect-ratio | min-aspect-ratio | max-aspect-ratio</span><br><span class="line">     device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio</span><br><span class="line">     color | min-color | max-color</span><br><span class="line">     color-index | min-color-index | max-color-index</span><br><span class="line">     monochrome | min-monochrome | max-monochrome</span><br><span class="line">     resolution | min-resolution | max-resolution</span><br><span class="line">     scan | grid</span><br></pre></td></tr></table></figure><p>【辑操作符】</p><p>操作符 not、and、only 和逗号(,)(相当于 or)可以用来构建复杂的媒体查询</p><h3 id="css-多列布局"><a href="#css-多列布局" class="headerlink" title="css 多列布局"></a>css 多列布局</h3><h3 id="grid-栅格布局"><a href="#grid-栅格布局" class="headerlink" title="grid 栅格布局"></a>grid 栅格布局</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/Chenchaoyang666/CDN/post/CSS_grid.png" alt=""></p><h3 id="移动优先的响应式布局"><a href="#移动优先的响应式布局" class="headerlink" title="移动优先的响应式布局"></a>移动优先的响应式布局</h3><p>【设计原则】<br>关于响应式设计，有渐进增加和优雅降级两个设计原则</p><ul><li><p>渐进增强(progressive enhancement)<br>是指基本需求得到满足、实现，再根据不同浏览器及不同分辨率设备的特点，利用高级浏览器下的新特性提供更好的体验。比如，圆角、阴影、动画等</p></li><li><p>优雅降级(graceful degradation)<br>则正好相反，现有功能已经开发完备，但需要向下兼容版本和不支持该功能的浏览器。虽然兼容性方案的体验不如常规方案，但保证了功能可用性</p></li></ul><blockquote><p>移动优先的响应式布局采用的是渐进增强原则，制作响应式网站时，先搞定手机版，然后再去为更大设备去设计和开发更复杂的功能。特征是使用 min-width 匹配页面宽度。从上到下书写样式时，首先考虑的是移动设备的使用场景，默认查询的是最窄的情况，再依次考虑设备屏幕逐渐变宽的情况</p></blockquote><p>【三要素】<br>响应式设计包括三个要素：弹性布局、媒体查询和弹性图片(最简单的响应式图片设置 max-width 为 100%即可)</p><h2 id="居中布局-以-flex-为例"><a href="#居中布局-以-flex-为例" class="headerlink" title="居中布局(以 flex 为例)"></a>居中布局(以 flex 为例)</h2><ul><li>水平居中<br>【1】在伸缩容器上设置主轴对齐方式<code>justify-content:center</code><br>【2】在伸缩项目上设置<code>margin: 0 auto</code></li><li>垂直居中<br>【1】在伸缩容器上设置侧轴对齐方式<code>align-items: center</code><br>【2】在伸缩项目上设置<code>margin: auto 0</code></li><li>同时实现水平居中和垂直居中(加起来就行)</li></ul><h2 id="常见布局方式"><a href="#常见布局方式" class="headerlink" title="常见布局方式"></a>常见布局方式</h2><p>三栏式布局(所谓的圣杯和双飞翼)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.top</span>,<span class="selector-class">.bottom</span>&#123;<span class="attribute">height</span>: <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">order</span>: <span class="number">2</span>;&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgrey;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">style</span>=<span class="string">"background-color: lightblue;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>top<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> <span class="attr">style</span>=<span class="string">"background-color: pink;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcoral;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"background-color: lightseagreen;"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcyan;"</span> &gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgreen;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 110px;" src="https://demo.xiaohuochai.site/css/buju4/b5.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画(transition)</title>
      <link href="posts/62887/"/>
      <url>posts/62887/</url>
      
        <content type="html"><![CDATA[<h2 id="漂浮的白云"><a href="#漂浮的白云" class="headerlink" title="漂浮的白云"></a>漂浮的白云</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 320px;" src="https://demo.xiaohuochai.site/css/animationApply/a1.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>漂浮的白云主要通过远景白云和近景白云来实现立体漂浮效果。远景和近景分别使用两张背景图片，通过改变其背景定位来实现白云移动效果，通过设置不同的动画持续时间来实现交错漂浮的效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span>,</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">100s</span> infinite linear alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">500%</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud1.png"</span>);</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="旋转的星球"><a href="#旋转的星球" class="headerlink" title="旋转的星球"></a>旋转的星球</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 430px;" src="https://demo.xiaohuochai.site/css/animationApply/a2.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>旋转的星球主要通过 rotate()旋转函数来实现。实际上，蓝色的地球和黑色的月球并没有发生旋转，只是其父级旋转形成的视觉上的旋转效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sunline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">10s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, <span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> <span class="number">5px</span></span><br><span class="line">      <span class="number">10px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earthline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">100px</span> -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">2s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earth</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sunline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earthline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earth"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"moon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>-【进阶】<br>如果要在内侧旋转的球内放文本，并且文本不跟着旋转，则代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: tan;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: inherit;</span><br><span class="line">  <span class="attribute">animation-direction</span>: reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标移入后，动画停止；移出时，动画继续</p><iframe style="width: 100%; height: 160px;" src="https://demo.xiaohuochai.site/css/animationApply/a3.html" frameborder="0" width="320" height="240"></iframe><h2 id="正方体合成"><a href="#正方体合成" class="headerlink" title="正方体合成"></a>正方体合成</h2><ul><li>【效果演示】<iframe style="width: 100%; height: 300px;" src="https://demo.xiaohuochai.site/css/animationApply/a4.html" frameborder="0" width="320" height="240"></iframe></li></ul><h2 id="使用-animate-css"><a href="#使用-animate-css" class="headerlink" title="使用 animate.css"></a>使用 animate.css</h2><p>animate.css 是一个使用 CSS3 的 animation 制作的动画效果的 CSS 集合，里面预设了很多种常用的动画，且使用非常简单</p><ul><li>从官网下载</li></ul><p><a href="https://raw.github.com/daneden/animate.css/master/animate.css" target="_blank" rel="noopener">https://raw.github.com/daneden/animate.css/master/animate.css</a></p><ul><li>通过 npm 安装</li></ul><p><code>$ npm install animate.css</code></p><ul><li>使用在线 cdn</li></ul><p><a href="https://unpkg.com/animate.css@3.5.2/animate.min.css" target="_blank" rel="noopener">https://unpkg.com/animate.css@3.5.2/animate.min.css</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="posts/35375/"/>
      <url>posts/35375/</url>
      
        <content type="html"><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p><strong>功能需求</strong>-监听浏览器滚动事件，返回当前滚条与顶部的距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = showTop;</span><br></pre></td></tr></table></figure><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><p>触发高频事件后 n 秒函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(showTop, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">      <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">    valid = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn();</span><br><span class="line">      valid = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 请注意，节流函数并不止上面这种实现方案,</span></span><br><span class="line"><span class="comment">   例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。</span></span><br><span class="line"><span class="comment">   也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"滚动条位置："</span> + scrollTop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="其他应用场景举例"><a href="#其他应用场景举例" class="headerlink" title="其他应用场景举例"></a>其他应用场景举例</h2><ul><li>搜索框 input 事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者实现输入间隔大于某个值（如 500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。</li><li>页面 resize 事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行 dom 渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css过渡(transition)</title>
      <link href="posts/24228/"/>
      <url>posts/24228/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>过渡 transition 是一个复合属性，包括 <code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code> 这四个子属性。通过这四个子属性的配合来完成一个完整的过渡效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: 过渡属性(默认值为<span class="selector-tag">all</span>)</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 过渡持续时间(默认值为0<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">transiton-timing-function</span>: 过渡函数(默认值为<span class="selector-tag">ease</span>函数)</span><br><span class="line"><span class="selector-tag">transition-delay</span>: 过渡延迟时间(默认值为0<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><ul><li>过渡 transition 的这四个子属性只有<code>&lt;transition-duration&gt;</code>是必需值且不能为 0。其中，<code>&lt;transition-duration&gt;</code>和<code>&lt;transition-delay&gt;</code>都是时间。当两个时间同时出现时，第一个是<code>&lt;transition-duration&gt;</code>，第二个是<code>&lt;transition-delay&gt;</code>；当只有一个时间时，它是<code>&lt;transition-duration&gt;</code>，而<code>&lt;transition-delay&gt;</code>为默认值 0</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition: &lt;transition-property&gt; || &lt;transition-duration&gt; ||</span><br><span class="line">  &lt;transition-timing-function&gt; || &lt;transition-delay&gt;;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test1</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: width, background, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>, <span class="number">500ms</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear, ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">200ms</span>, <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类似于*/</span></span><br><span class="line"><span class="selector-id">#test2</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> linear <span class="number">200ms</span>, background <span class="number">500ms</span> ease <span class="number">0s</span>,</span><br><span class="line">    opacity <span class="number">2s</span> linear <span class="number">200ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 250px;" src="https://demo.xiaohuochai.site/css/transition/t10.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css清浮动</title>
      <link href="posts/17955/"/>
      <url>posts/17955/</url>
      
        <content type="html"><![CDATA[<p>人们经常谈起清浮动，其实就是解决浮动元素的包含块高度塌陷的问题</p><h2 id="【1】clear-属性"><a href="#【1】clear-属性" class="headerlink" title="【1】clear 属性"></a>【1】clear 属性</h2><p>值: <code>left | right | both | none | inherit</code><br>初始值: none<br>应用于: 块级元素(块级元素指 block 元素，不包括 inline-block 元素)<br>继承性: 无</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left:左侧不允许存在浮动元素</span><br><span class="line">right:右侧不允许存在浮动元素</span><br><span class="line">both:左右两侧不允许存在浮动元素</span><br><span class="line">none:允许左右两侧存在浮动元素</span><br></pre></td></tr></table></figure><ul><li><code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>&lt;注意&gt;并不是很适用，若包含块为<code>&lt;ul&gt;</code>，则子元素只能为<code>&lt;li&gt;</code>，则在<code>&lt;li&gt;</code>后面添加<code>&lt;div&gt;</code>元素不合适</li><li><code>&lt;br style=&quot;clear:both&quot;&gt;</code>&lt;注意&gt;虽然 clear 属性只应用于块级元素，但在除 IE7-以外的其他浏览器都可以将 clear 属性应用于<code>&lt;br&gt;</code>元素</li><li>为浮动元素的 after 伪元素设置 clear 属性<code>.clear:after{content:&quot;&quot;; display: block; clear: both;}</code></li></ul><h2 id="【2】BFC"><a href="#【2】BFC" class="headerlink" title="【2】BFC"></a>【2】BFC</h2><ul><li><p>1、float: left/right</p></li><li><p>2、position:absolute/fixed</p></li><li><p>3、display:inline-block/table-cell/table-caption/flex</p></li><li><p>4、overflow:hidden/scroll/auto</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="noopener">关于 BFC 的详细信息移步至此</a></p><h2 id="【3】IE7"><a href="#【3】IE7" class="headerlink" title="【3】IE7-"></a>【3】IE7-</h2><p>关于 IE7-浏览器有一个其特有的属性 haslayout，当触发包含块的 haslayout 时，浮动元素被 layout 元素自动包含</p><ul><li><p>1、display:inline-block</p></li><li><p>2、height/width:除 auto 外</p></li><li><p>3、float: left/right</p></li><li><p>4、position: absolute</p></li><li><p>5、writing-mode: tb-rl</p></li><li><p>6、zoom: 除 normal 外</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/4845314.html" target="_blank" rel="noopener">关于 haslayout 的详细信息移步至此</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置git教程</title>
      <link href="posts/37056/"/>
      <url>posts/37056/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，下载安装git"><a href="#第一步，下载安装git" class="headerlink" title="第一步，下载安装git"></a>第一步，下载安装git</h2><p>打开 <a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，下载git对应操作系统的版本。</p><p>所有东西下载慢的话就可以去找镜像！官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/git-for-windows/下载对应的版本即可安装！</a></p><h2 id="第二步，检查git是否安装成功"><a href="#第二步，检查git是否安装成功" class="headerlink" title="第二步，检查git是否安装成功"></a>第二步，检查git是否安装成功</h2><p>打开命令行窗口，在cmd中输入git或git–version。</p><h2 id="第三步，配置User信息（默认已注册github账号）"><a href="#第三步，配置User信息（默认已注册github账号）" class="headerlink" title="第三步，配置User信息（默认已注册github账号）"></a>第三步，配置User信息（默认已注册github账号）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。</p><p>这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name &quot;username&quot;    &#x2F;&#x2F;（ &quot;username&quot;是自己的账户名，）</span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email &quot;username@email.com&quot;     &#x2F;&#x2F;(&quot;username@email.com&quot;注册账号时用的邮箱)</span><br></pre></td></tr></table></figure><p>以上命令执行结束后，可用 git config –global –list 命令查看配置是否OK。</p><h2 id="第四步，设置本机绑定SSH公钥，实现免密码登录"><a href="#第四步，设置本机绑定SSH公钥，实现免密码登录" class="headerlink" title="第四步，设置本机绑定SSH公钥，实现免密码登录"></a>第四步，设置本机绑定SSH公钥，实现免密码登录</h2><p>继续刚才的操作，在命令框中输入以下命令:</p><p><code>ssh-keygen -t rsa</code></p><p>然后连敲三次回车键，结束后去系统盘目录下（一般在 C:Users你的用户名.ssh）(mac: /Users/用户/.ssh）查看是否有。ssh文件夹生成，此文件夹中以下两个文件：</p><p>将ssh文件夹中的公钥（ id_rsa.pub）添加到GitHub管理平台中，在GitHub的个人账户的设置中找到如下界面。title随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到key中，然后点击Ass SSH key就好啦。</p><h2 id="第五步，测试配置是否成功"><a href="#第五步，测试配置是否成功" class="headerlink" title="第五步，测试配置是否成功"></a>第五步，测试配置是否成功</h2><p>在Git Bush命令框（就是刚才配置账号和邮箱的命令框）中继续输入以下命令，回车：</p><p><code>ssh -T git@github.com</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-快速排序</title>
      <link href="posts/7837/"/>
      <url>posts/7837/</url>
      
        <content type="html"><![CDATA[<p><strong>快速排序</strong>最常用的排序算法之一。时间复杂度一般为 O(nlog(n)),空间复杂度为O(1)(左右指针交替的原地排序)。</p><a id="more"></a><p>快速排序和<a href="/posts/51816">归并排序</a>一样也使用<a href="">分而治之</a>的方法。</p><h2 id="设置比较函数和交换函数"><a href="#设置比较函数和交换函数" class="headerlink" title="设置比较函数和交换函数"></a>设置比较函数和交换函数</h2><ul><li>自定义一个 compare 函数，命名为 compareFn</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareFn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个交换函数，命名为 swap</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array,a,b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//经典方式</span></span><br><span class="line">  <span class="comment">// const temp = array[a];</span></span><br><span class="line">  <span class="comment">// array[a] = array[b];</span></span><br><span class="line">  <span class="comment">// array[b] = temp;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//ES6 的方式</span></span><br><span class="line">  [array[a],array[b]] = [array[b],array[a]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="划分过程"><a href="#划分过程" class="headerlink" title="划分过程"></a>划分过程</h2><ul><li>随机选取其中一个值或选择中间值做为主元，初始化第一个值为 left 指针，最后一个值为 right 指针</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">array, left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br></pre></td></tr></table></figure><ul><li>移动 left 指针直到找到比主元大的元素。</li><li>同理，移动 right 指针直到找到一个比主元小的元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (compareFn(array[i], pivot) === Compare.LESS_THAN) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (compareFn(array[j], pivot) === Compare.BIGGER_THAN) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>此时当 left 指针索引小于等于 right 指针索引时，进行交换,继续移动指针，重复此过程，并返回最终左指针索引，用于递归函数创建子数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      swap(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归函数重复对数组进行划分"><a href="#递归函数重复对数组进行划分" class="headerlink" title="递归函数重复对数组进行划分"></a>递归函数重复对数组进行划分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">array, left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = partition(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      quick(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      quick(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置主函数调用递归函数"><a href="#设置主函数调用递归函数" class="headerlink" title="设置主函数调用递归函数"></a>设置主函数调用递归函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> quick(array, <span class="number">0</span>, array.length - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现原理</title>
      <link href="posts/61384/"/>
      <url>posts/61384/</url>
      
        <content type="html"><![CDATA[<p>在传统的异步编程中，如果异步之间存在依赖关系，我们就需要通过层层嵌套回调来满足这种依赖，如果嵌套层数过多，可读性和可维护性都变得很差，产生所谓“回调地狱”，而 Promise 将回调嵌套改为链式调用，增加可读性和可维护性。</p><h2 id="Promise-的调用流程"><a href="#Promise-的调用流程" class="headerlink" title="Promise 的调用流程"></a>Promise 的调用流程</h2><ul><li><code>Promise</code>的构造方法接收一个 executor()，在<code>new Promise()</code>时就立刻执行这个 executor 回调</li><li><code>executor()</code>内部的异步任务被放入宏/微任务队列，等待执行</li><li><code>then()</code>被执行，收集成功/失败回调，放入成功/失败队列</li><li><code>executor()</code>的异步任务被执行，触发<code>resolve/reject</code>，从成功/失败队列中取出回调依次执行</li></ul><h2 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise A+规范"></a>Promise A+规范</h2><p>由于 ES6 的 Promise 实现需要遵循 Promise/A+规范，是规范对 Promise 的状态控制做了要求。Promise/A+的规范比较长，这里只总结两条核心规则：</p><ul><li><code>Promise</code> 本质是一个状态机，且状态只能为以下三种：<code>Pending（等待态）</code>、<code>Fulfilled（执行态）</code>、<code>Rejected（拒绝态）</code>，状态的变更是单向的，只能从 Pending -&gt; Fulfilled 或 Pending -&gt; Rejected，状态变更不可逆</li><li><code>then</code>方法接收两个可选参数，分别对应状态改变时触发的回调。then 方法返回一个 promise。then 方法可以被同一个 promise 调用多次。</li></ul><h2 id="then-的链式调用"><a href="#then-的链式调用" class="headerlink" title="then 的链式调用"></a>then 的链式调用</h2><p>先举个例子看一下 then 是如何链式调用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">//then回调中可以return一个Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">//then回调中也可以return一个值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>输出：1 2 3</p><h3 id="如何实现链式调用"><a href="#如何实现链式调用" class="headerlink" title="如何实现链式调用"></a>如何实现链式调用</h3><ul><li>显然<code>then()</code>需要返回一个 Promise，这样才能找到 then 方法，所以我们会把 then 方法的返回值包装成 Promise。</li><li><code>then()</code>的回调需要拿到上一个<code>then()</code>的返回值</li><li><code>then()</code>的回调需要顺序执行，以上面这段代码为例，虽然中间 return 了一个 Promise，但执行顺序仍要保证是 1-&gt;2-&gt;3。我们要等待当前 Promise 状态变更后，再执行下一个 then 收集的回调，这就要求我们对 then 的返回值分类讨论</li></ul><h2 id="值穿透-amp-状态已变更情况"><a href="#值穿透-amp-状态已变更情况" class="headerlink" title="值穿透&amp;状态已变更情况"></a>值穿透&amp;状态已变更情况</h2><ul><li>值穿透：根据规范，如果 then() 接收的参数不是 function，那么我们应该忽略它。如果没有忽略，当 then()回调不为 function 时将会抛出异常，导致链式调用中断</li><li>处理状态为 resolve/reject 的情况：其实我们上边 then() 的写法是对应状态为<code>padding</code>的情况，但是有些时候，resolve/reject 在 then() 之前就被执行（比如<code>Promise.resolve().then()</code>），如果这个时候还把 then()回调 push 进 resolve/reject 的执行队列里，那么回调将不会被执行，因此对于状态已经变为<code>fulfilled</code>或<code>rejected</code>的情况，我们直接执行 then 回调</li></ul><h2 id="兼容同步任务"><a href="#兼容同步任务" class="headerlink" title="兼容同步任务"></a>兼容同步任务</h2><p>完成了 then 的链式调用以后，我们再处理一个前边的细节，然后放出完整代码。上文我们说过，Promise 的执行顺序是 <code>new Promise -&gt; then()收集回调 -&gt; resolve/reject 执行回调</code>，这一顺序是建立在 executor 是异步任务的前提上的，如果 executor 是一个同步任务，那么顺序就会变成 <code>new Promise -&gt; resolve/reject 执行回调 -&gt; then()收集回调</code>，resolve 的执行跑到 then 之前去了，为了兼容这种情况，我们给 resolve/reject 执行回调的操作包一个 setTimeout，让它异步执行。</p><h2 id="结合之前的五步，实现了-Promise-的主要功能"><a href="#结合之前的五步，实现了-Promise-的主要功能" class="headerlink" title="结合之前的五步，实现了 Promise 的主要功能"></a>结合之前的五步，实现了 Promise 的主要功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise/A+规定的三种状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法接收一个回调</span></span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">this</span>._status = PENDING; <span class="comment">// Promise状态</span></span><br><span class="line">    <span class="keyword">this</span>._value = <span class="literal">undefined</span>; <span class="comment">// 储存then回调return的值</span></span><br><span class="line">    <span class="keyword">this</span>._resolveQueue = []; <span class="comment">// 成功队列, resolve时触发</span></span><br><span class="line">    <span class="keyword">this</span>._rejectQueue = []; <span class="comment">// 失败队列, reject时触发</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue</span></span><br><span class="line">    <span class="keyword">let</span> _resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//把resolve执行回调的操作封装成一个函数,放进setTimeout里,以兼容executor是同步代码的情况</span></span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = FULFILLED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里之所以使用一个队列来储存回调,是为了实现规范要求的 "then 方法可以被同一个 promise 调用多次"</span></span><br><span class="line">        <span class="comment">// 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._resolveQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._resolveQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 实现同resolve</span></span><br><span class="line">    <span class="keyword">let</span> _reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = REJECTED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._rejectQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._rejectQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// new Promise()时立即执行executor,并传入resolve和reject</span></span><br><span class="line">    executor(_resolve, _reject);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then方法,接收一个成功的回调和一个失败的回调</span></span><br><span class="line">  then(resolveFn, rejectFn) &#123;</span><br><span class="line">    <span class="comment">// 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行</span></span><br><span class="line">    <span class="keyword">typeof</span> resolveFn !== <span class="string">'function'</span> ? <span class="function">(<span class="params">resolveFn = (value</span>) =&gt;</span> value) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">typeof</span> rejectFn !== <span class="string">'function'</span></span><br><span class="line">      ? <span class="function">(<span class="params">rejectFn = (reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(reason <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? reason.message : reason);</span><br><span class="line">        &#125;)</span><br><span class="line">      : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return一个新的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span></span><br><span class="line">      <span class="keyword">const</span> fulfilledFn = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 执行第一个(当前的)Promise的成功回调,并获取返回值</span></span><br><span class="line">          <span class="keyword">let</span> x = resolveFn(value);</span><br><span class="line">          <span class="comment">// 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span></span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reject同理</span></span><br><span class="line">      <span class="keyword">const</span> rejectedFn = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = rejectFn(error);</span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>._status) &#123;</span><br><span class="line">        <span class="comment">// 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行</span></span><br><span class="line">        <span class="keyword">case</span> PENDING:</span><br><span class="line">          <span class="keyword">this</span>._resolveQueue.push(fulfilledFn);</span><br><span class="line">          <span class="keyword">this</span>._rejectQueue.push(rejectedFn);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当状态已经变为resolve/reject时,直接执行then回调</span></span><br><span class="line">        <span class="keyword">case</span> FULFILLED:</span><br><span class="line">          fulfilledFn(<span class="keyword">this</span>._value); <span class="comment">// this._value是上一个then回调return的值</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">          rejectedFn(<span class="keyword">this</span>._value);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加几个-Promise-的静态-实例方法"><a href="#添加几个-Promise-的静态-实例方法" class="headerlink" title="添加几个 Promise 的静态/实例方法"></a>添加几个 Promise 的静态/实例方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//catch方法其实就是执行一下then的第二个回调</span></span><br><span class="line">  <span class="keyword">catch</span>(rejectFn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, rejectFn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//finally方法</span></span><br><span class="line">  <span class="keyword">finally</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">      value =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),             <span class="comment">//执行回调,并returnvalue传递给后面的then</span></span><br><span class="line">      reason =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)  <span class="comment">//reject同理</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的resolve方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value <span class="comment">//根据规范, 如果参数是Promise实例, 直接return这个实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的reject方法</span></span><br><span class="line">  <span class="keyword">static</span> reject(reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的all方法</span></span><br><span class="line">  <span class="keyword">static</span> all(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseArr.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">        MyPromise.resolve(p).then(</span><br><span class="line">          val =&gt; &#123;</span><br><span class="line">            index++</span><br><span class="line">            result[i] = val</span><br><span class="line">            <span class="keyword">if</span>(index === promiseArr.length) &#123;</span><br><span class="line">              resolve(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的race方法</span></span><br><span class="line">  <span class="keyword">static</span> race(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> promiseArr) &#123;</span><br><span class="line">        MyPromise.resolve(p).then(  <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">          value =&gt; &#123;</span><br><span class="line">            resolve(value)        <span class="comment">//注意这个resolve是上边new MyPromise的</span></span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题分页问题</title>
      <link href="posts/65246/"/>
      <url>posts/65246/</url>
      
        <content type="html"><![CDATA[<p>辅助函数 paginator 能够帮助我们插入分页链接，具体参数查看<a href="https://hexo.io/docs/helpers.html#paginator" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html#paginator</a></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>分页标签显示为 HTML 代码如：<code>&lt;i class=&quot;nexmoefont icon-left&quot;&gt;&lt;/i&gt;</code></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>找到 pagination.ejs 中的 paginator 函数，添加 escape: false 试试，完整代码形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(&#123;</span><br><span class="line">      prev_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-left&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      next_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-right&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      escape: false</span><br><span class="line">    &#125;) %&gt;</span><br></pre></td></tr></table></figure><p>原文参考：<a href="https://www.zhihu.com/question/370971597/answer/1147674723" target="_blank" rel="noopener">https://www.zhihu.com/question/370971597/answer/1147674723</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-归并排序</title>
      <link href="posts/51816/"/>
      <url>posts/51816/</url>
      
        <content type="html"><![CDATA[<p><strong>归并排序</strong>第一个可以实际使用排序算法之一。时间复杂度为 O(nlog(n)),空间复杂度为 O(n)。</p><a id="more"></a><h2 id="设置比较函数"><a href="#设置比较函数" class="headerlink" title="设置比较函数"></a>设置比较函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareFn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并"><a href="#主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并" class="headerlink" title="主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并"></a>主函数负责用递归法将一个大数组分成多个小数组，并调用辅助函数进行排序、合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">array, compareFn = defaultCompare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = array; <span class="comment">// 获取数组长度，参照ES6语法</span></span><br><span class="line">    <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = mergeSort(array.slice(<span class="number">0</span>, middle), compareFn);</span><br><span class="line">    <span class="keyword">const</span> right = mergeSort(array.slice(middle, length), compareFn);</span><br><span class="line">    array = merge(left, right, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="merge-函数负责合并小数组来产生大数组，直到回到原始数组"><a href="#merge-函数负责合并小数组来产生大数组，直到回到原始数组" class="headerlink" title="merge 函数负责合并小数组来产生大数组，直到回到原始数组"></a>merge 函数负责合并小数组来产生大数组，直到回到原始数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right, compareFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class="line">    result.push(</span><br><span class="line">      compareFn(left[i], right[j]) === Compare.LESS_THAN</span><br><span class="line">        ? left[i++]</span><br><span class="line">        : right[j++]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(i &lt; left.length ? left.slice(i) : right.slice(j));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/520520/"/>
      <url>posts/520520/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="posts/55046/"/>
      <url>posts/55046/</url>
      
        <content type="html"><![CDATA[<p>动态规划方法是将问题分解成相互依赖的子问题来解决的优化技术。</p><a id="more"></a><h2 id="解决问题三步骤"><a href="#解决问题三步骤" class="headerlink" title="解决问题三步骤"></a>解决问题三步骤</h2><ul><li>(1)定义子问题</li><li>(2)实现要反复执行来解决子问题的部分(参考递归方法)</li><li>(3)识别并求解出基线条件</li></ul><h2 id="运用动态规划解决著名问题"><a href="#运用动态规划解决著名问题" class="headerlink" title="运用动态规划解决著名问题"></a>运用动态规划解决著名问题</h2><ul><li><a href="">背包问题</a>：待写</li><li><a href="">最长公共子序列</a>：待写</li><li><a href="">硬币找零</a>：待写</li><li><a href="">矩阵链相乘</a>：待写</li><li><a href="">图的全源最短路径</a>：待写</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="posts/60033/"/>
      <url>posts/60033/</url>
      
        <content type="html"><![CDATA[<p><strong>回溯算法</strong>也叫试探法，它是一种系统地搜索问题的解的方法。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p><h2 id="用回溯算法解决问题的一般步骤："><a href="#用回溯算法解决问题的一般步骤：" class="headerlink" title="用回溯算法解决问题的一般步骤："></a>用回溯算法解决问题的一般步骤：</h2><ul><li>1、针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</li><li>2、确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。</li><li>3、以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</li></ul><h2 id="BFS-回溯实例"><a href="#BFS-回溯实例" class="headerlink" title="BFS+回溯实例"></a>BFS+回溯实例</h2><p><img src= "/img/loading.gif" data-src="https://s3.ax1x.com/2020/11/13/D9c3AU.md.png" alt="电话号码字母组合"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span> (<span class="params">digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (digits.length == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="number">2</span>: <span class="string">'abc'</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">'def'</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">'ghi'</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">'jkl'</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">'mno'</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">'pqrs'</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">'tuv'</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">'wxyz'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">curStr, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//设置数组越界后，输出一个解并跳出本次回溯的分支</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; digits.length - <span class="number">1</span>) &#123;</span><br><span class="line">      res.push(curStr);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提取当前i的字符串，并建立分支，进行回溯递归</span></span><br><span class="line">    <span class="keyword">const</span> letters = map[digits[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> l <span class="keyword">of</span> letters) &#123;</span><br><span class="line">      dfs(curStr + l, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs(<span class="string">''</span>, <span class="number">0</span>);<span class="comment">//递归入口</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法技巧</title>
      <link href="posts/53275/"/>
      <url>posts/53275/</url>
      
        <content type="html"><![CDATA[<p>一个算法设计中的方法不仅可以运用到各种排序、搜索算法中，还是解决多类实际问题的基本逻辑。</p><a id="more"></a><h2 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h2><p>分而治之方法是把问题分解成相互独立的子问题，然后组合他们的答案。具体运用参考<a href="/posts/51816">归并排序</a>和<a href="/posts/7837">快速排序</a></p><ul><li>(1)<strong>分解</strong>原问题为多个子问题</li><li>(2)<strong>解决</strong>子问题，用返回解决子问题的方式的递归算法</li><li>(3)<strong>组合</strong>子问题的解决方式，得到原问题的解</li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul><li><a href="/posts/55046">动态规划</a></li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul><li><a href="">贪心算法</a></li></ul><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul><li><a href="">回溯算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的全局对象</title>
      <link href="posts/43529/"/>
      <url>posts/43529/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。</p><a id="more"></a><h2 id="浏览器中它被命名为-window"><a href="#浏览器中它被命名为-window" class="headerlink" title="浏览器中它被命名为 window"></a>浏览器中它被命名为 window</h2><p>window 及 window 对象上的所有属性都是全局变量。</p><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> env = <span class="string">'Browser'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Browser</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.env);</span><br><span class="line"><span class="comment">// Browser</span></span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = <span class="string">'Browser'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Browser</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.env);</span><br><span class="line"><span class="comment">// Browser</span></span><br></pre></td></tr></table></figure><ul><li>在全局作用域下使用或不使用 var 关键字定义变量都会被附加到 window 对象上成为全局变量</li><li>例 1 和 例 2 中的 env 都是全局变量，打印 env 和 window.env 会得到相同结果</li></ul><h2 id="对-Node-JS-而言是-global"><a href="#对-Node-JS-而言是-global" class="headerlink" title="对 Node.JS 而言是 global"></a>对 Node.JS 而言是 global</h2><p>global 及 global 对象上的所有属性都是全局变量。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> env = <span class="string">'Node.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br><span class="line"><span class="built_in">console</span>.log(global.env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br></pre></td></tr></table></figure><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = <span class="string">'Node.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(env);</span><br><span class="line"><span class="comment">// Node.js</span></span><br><span class="line"><span class="built_in">console</span>.log(global.env);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>在 Node.js 中，每个模块都有自己的作用域，在模块的顶层作用域下，使用 var 关键字定义的变量不会被附加到 global 对象上，不使用 var 关键字定义的变量会被附加到 global 对象上成为全局变量</li><li>例 3 中的 env 是全局变量，打印 env 和 global.env 会得到相同结果，例 4 中的 env 不是全局变量，global 对象中不存在 env 属性</li></ul><h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><p>使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 定义的 JavaScript 浏览器脚本，被认为是个单独的模块，它有自己的顶级作用域，使用 var 关键字定义变量不会被附加到 window 对象上。<br>在 Node.js 的 REPL（Read Eval Print Loop：交互式解释器）中，使用或不使用 var 关键字定义变量都会被附加到 global 对象上成为全局变量。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-Stack</title>
      <link href="posts/12893/"/>
      <url>posts/12893/</url>
      
        <content type="html"><![CDATA[<p>Stack 是一种遵从<strong>后进后出（LIFO）</strong>原则的有序集合。</p><a id="more"></a><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>用 JavaScrip 写一个 Stack 的类，实现栈的常用方法 push、pop 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
