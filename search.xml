<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>async/await使用对比</title>
      <link href="posts/26266/"/>
      <url>posts/26266/</url>
      
        <content type="html"><![CDATA[<p>整理一下async/await的优缺点，看看到底在哪些场合适合使用async/await。</p><h2 id="优点1、它做到了真正的串行的同步写法，代码阅读相对容易"><a href="#优点1、它做到了真正的串行的同步写法，代码阅读相对容易" class="headerlink" title="优点1、它做到了真正的串行的同步写法，代码阅读相对容易"></a>优点1、它做到了真正的串行的同步写法，代码阅读相对容易</h2><p>这个优点是没错，但是JavaScript的百分之九十的异步场合都是ajax，ajax就一定需要考虑异常，很有可能需要try…catch…来处理异常，所以优势并不明显。</p><h2 id="优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面"><a href="#优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面" class="headerlink" title="优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面"></a>优点2、对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">await</span> a() === <span class="number">222</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'yes, it is!'</span>) <span class="comment">// 会打印</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>如果<code>await a()</code>没有出错的可能性，还可以省掉try…catch…。</p><h2 id="优点3、同样的，处理复杂流程时，在代码清晰度方面有优势"><a href="#优点3、同样的，处理复杂流程时，在代码清晰度方面有优势" class="headerlink" title="优点3、同样的，处理复杂流程时，在代码清晰度方面有优势"></a>优点3、同样的，处理复杂流程时，在代码清晰度方面有优势</h2><p>举个例子，有这样一套业务逻辑：有一个变量，类型是数组，如果它的length大于0，则遍历它进行下一步操作，如果length等于0，说明没有经历过ajax请求，则先ajax请求并赋值内容，然后再遍历它进行下一步操作；如果ajax的结果依旧是空，则显示toast，并中断流程。</p><ul><li>Promise写法（伪代码）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.data.length) &#123;</span><br><span class="line">        arr = res.data;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        showToast(<span class="string">'数据为空'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>async/await写法（伪代码）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> ajax();</span><br><span class="line">    <span class="keyword">if</span> (res.data.length) &#123;</span><br><span class="line">      arr = res.data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      showToast(<span class="string">'数据为空'</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>可以看出：</p><ul><li>Promise写法，必须有if (arr.length) {resolve();}，而async/await写法不用考虑这个分支。</li><li>Promise写法的代码不仅冗长，而且这还是在省略了一部分代码的前提下，showToast(‘数据为空’)这个分支永远是pending状态，可能会带来一些问题。</li></ul><h2 id="无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…"><a href="#无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…" class="headerlink" title="无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…"></a>无所谓优缺点1、无法处理promise返回的reject对象，要借助try…catch…</h2><p><code>await</code>无法处理reject对象，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>则<code>await g()</code>会直接报错，必须使用try…catch…捕获。</p><p>那么假定有3个ajax串行请求，Promise模式与async/await的对比如下：</p><ul><li>1、允许统一处理reject的话：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise（伪代码）：</span></span><br><span class="line">ajax1().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax2();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax3();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'可能打印ajax1或2或3的fail'</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//async/await（伪代码）：</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax1();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">    <span class="keyword">await</span> ajax2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">    <span class="keyword">await</span> ajax3();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'可能打印ajax1或2或3的reject'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><ul><li>2、需要单独处理每一个ajax的reject的话：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise（伪代码）：</span></span><br><span class="line">ajax1().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax2();</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax1的fail'</span>, err);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  <span class="keyword">return</span> ajax3();</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax2的fail'</span>, err);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax3的fail'</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//async/await（伪代码）：</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax1();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax1 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax1的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax2 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax2的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ajax3();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajax3 success'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印ajax3的fail'</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>对比结果：从代码量上说，大同小异，就看你是否用的惯try…catch…。</p><p>为什么说用的惯，看这段代码，这段代码在上文贴过，想象一下，假如<code>if ( await a() === 222)</code> {的内容体有20行，会怎样——你会发现，<code>try</code>跟<code>catch</code>相距22行，很远，难以阅读，而且，内容体里面如果还有try…catch…怎么办？这就成了try…catch…的嵌套圣诞树，更难以阅读，最终解决办法只能是：如果if的内容体太长，尤其是try…catch…的嵌套圣诞树，就放弃<code>if ( await a() === 222)</code> {这种优雅的写法，改成<code>const res == await a();</code>这种写法，然后把这句单独做try…catch…。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">await</span> a() === <span class="number">222</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'yes, it is!'</span>) <span class="comment">// 会打印</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h2 id="无所谓优缺点2、await只能串行，做不到并行"><a href="#无所谓优缺点2、await只能串行，做不到并行" class="headerlink" title="无所谓优缺点2、await只能串行，做不到并行"></a>无所谓优缺点2、await只能串行，做不到并行</h2><p>Promise可以轻松做到并行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ajax1();</span><br><span class="line">ajax2();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">Promise</span>.all([ajax1(), ajax2()])</span><br></pre></td></tr></table></figure><p>但是await做不到，它一定是阻塞的。await甚至可以阻塞for循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// 用时 22 秒才打印完</span></span><br></pre></td></tr></table></figure><p>注意，await做不到并行，不代表async不能并行。只要await不在同一个async函数里就可以并行。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">222</span>)</span><br><span class="line">    &#125;, <span class="number">2222</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>].forEach(<span class="keyword">async</span> (v) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="keyword">await</span> g();</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h2 id="无所谓优缺点3、全局捕获错误必须用window-onerror，不像Promise可以专用window-addEventListener-‘unhandledrejection’-function-，而window-onerror会捕获各种稀奇古怪的错误，造成系统浪费"><a href="#无所谓优缺点3、全局捕获错误必须用window-onerror，不像Promise可以专用window-addEventListener-‘unhandledrejection’-function-，而window-onerror会捕获各种稀奇古怪的错误，造成系统浪费" class="headerlink" title="无所谓优缺点3、全局捕获错误必须用window.onerror，不像Promise可以专用window.addEventListener(‘unhandledrejection’, function)，而window.onerror会捕获各种稀奇古怪的错误，造成系统浪费"></a>无所谓优缺点3、全局捕获错误必须用window.onerror，不像Promise可以专用window.addEventListener(‘unhandledrejection’, function)，而window.onerror会捕获各种稀奇古怪的错误，造成系统浪费</h2><p>尽管window.onerror的开销大，但是一个成熟的系统是一定要利用window.onerror做错误监控系统，所以，无所谓了。</p><h2 id="缺点1、try…catch…内部的变量无法传递给下一个try…catch…"><a href="#缺点1、try…catch…内部的变量无法传递给下一个try…catch…" class="headerlink" title="缺点1、try…catch…内部的变量无法传递给下一个try…catch…"></a>缺点1、try…catch…内部的变量无法传递给下一个try…catch…</h2><p>Promise和then/catch内部定义的变量，能通过then链条的参数传递到下一个then/catch，但是async/await的try内部的变量，如果用<code>let</code>和<code>const</code>定义则无法传递到下一个try…catch…，只能在外层作用域先定义好。</p><h2 id="缺点2、async-await无法简单实现Promise的各种原生方法，比如-race-之类"><a href="#缺点2、async-await无法简单实现Promise的各种原生方法，比如-race-之类" class="headerlink" title="缺点2、async/await无法简单实现Promise的各种原生方法，比如.race()之类"></a>缺点2、async/await无法简单实现Promise的各种原生方法，比如.race()之类</h2><p>如果真的编写一些工具库，确实可以实现Promise的各种原生方法，但放着Promise原生方法不用，却要写工具库，完全没必要。</p><h2 id="什么场合用async-await，什么场合用Promise？"><a href="#什么场合用async-await，什么场合用Promise？" class="headerlink" title="什么场合用async/await，什么场合用Promise？"></a>什么场合用async/await，什么场合用Promise？</h2><ul><li>需要用到Promise各种便捷的方法（比如.race()之类）的时候，一定用Promise。</li><li>并行的请求最好用Promise。</li><li>不需要并行的场合，如果要传递参数，最好用Promise。</li><li>其他ajax场合，看你喜好try…catch…还是.catch()，以决定使用哪一方。</li><li>你必须看看下方对于拦截器的讨论。</li></ul><h2 id="额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？"><a href="#额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？" class="headerlink" title="额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？"></a>额外讨论：ajax异常全部用拦截器处理，是否可以避免使用try…catch…？</h2><p>拦截器对于后端业务代码出错，例如500错误，应当怎么处理呢？</p><h3 id="如果：拦截器把200和500都归类到resolve"><a href="#如果：拦截器把200和500都归类到resolve" class="headerlink" title="如果：拦截器把200和500都归类到resolve"></a>如果：拦截器把200和500都归类到resolve</h3><ul><li>优点：共有的好处是只需要考虑200状态，所以确实不需要写try…catch…，也不需要.catch()。</li><li>缺点：对两个方案都有缺点，500归为resolve的话，语义比较拧巴，而且业务代码里永远需要有这种代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.code === <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">500</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果：拦截器只将500错误归为reject，而200依然属于resolve"><a href="#如果：拦截器只将500错误归为reject，而200依然属于resolve" class="headerlink" title="如果：拦截器只将500错误归为reject，而200依然属于resolve"></a>如果：拦截器只将500错误归为reject，而200依然属于resolve</h3><ul><li>优点：共有的好处是不用一遍遍的写<code>if (res.code === XXX)</code>，因为try里面是200的处理代码，catch里面是500的处理代码，天然就分开了。而且，500错误归为reject，从语义上说不拧巴。</li><li>缺点：对两个方案都有缺点，必须用try…catch…或.catch()捕获reject，不能省略。</li></ul><p>结论<br>1、200和500全归到resolve的前提下，真的可以避免try…catch…，但是又带来了<code>if (res.code === XXX)</code>。</p><p>2、如果喜欢写<code>if (res.code === XXX)</code>，就让拦截器把200和500都归类到resolve，如果不喜欢写<code>if (res.code === XXX)</code>，就500归类到reject。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web学习路线汇总篇</title>
      <link href="posts/42600/"/>
      <url>posts/42600/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简历"><a href="#一、简历" class="headerlink" title="一、简历"></a>一、简历</h2><p>简历在找工作过程中是非常非常重要的，无论你是什么途径去面试的，面试你的人一定会看你的简历。</p><p>推荐阅读：</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fpy_HLqOjNdL4l0CZHjMwqw" title="https://mp.weixin.qq.com/s/py_HLqOjNdL4l0CZHjMwqw">如何写「前端简历」，能敲开字节跳动的大门？</a></p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F23150301%2Fanswer%2F1229870117" title="https://www.zhihu.com/question/23150301/answer/1229870117">一份优秀的前端开发工程师简历是怎么样的？</a></p><h3 id="1、重点"><a href="#1、重点" class="headerlink" title="1、重点"></a>1、重点</h3><ul><li>简历就像高考作文——阅卷时间非常短。</li><li>内容要简洁。</li><li>直击重点，表现出自己的优势（只要是符合招人单位要求的都是优势，不是别人不会的你会才叫优势）。</li></ul><h3 id="2、简历包含的内容"><a href="#2、简历包含的内容" class="headerlink" title="2、简历包含的内容"></a>2、简历包含的内容</h3><ul><li>个人信息。</li><li>专业技能。</li><li>工作经历。</li><li>项目经历。</li><li>社区贡献。</li></ul><h4 id="2-1-基本信息"><a href="#2-1-基本信息" class="headerlink" title="2.1 基本信息"></a>2.1 基本信息</h4><ul><li>必备：姓名 电话 邮箱。</li><li>年龄（最好写上，在这个行业年龄还是比较重要的），学历（写好是哪一届）。</li><li>头像无所谓（好看就放上呗）。</li><li>可以放 github 链接，前提是有内容。</li></ul><h4 id="2-2-专业技能"><a href="#2-2-专业技能" class="headerlink" title="2.2 专业技能"></a>2.2 专业技能</h4><ul><li>表现出自己的核心竞争力（只要是符合招人单位要求的都是优势）。</li><li>内容不要太多，3、5 条即可。</li><li>太基础的不要写，例如会用 vscode、lodash。</li></ul><h4 id="2-3-工作经历"><a href="#2-3-工作经历" class="headerlink" title="2.3 工作经历"></a>2.3 工作经历</h4><ul><li>如实写。</li><li>写明公司，职位，入职离职时间即可，多写无益。</li><li>如果有空窗期，如实写明即可。</li></ul><h4 id="2-4-项目经历"><a href="#2-4-项目经历" class="headerlink" title="2.4 项目经历"></a>2.4 项目经历</h4><ul><li>写 2-4 个具有说服力的项目（不要什么项目都写，没用）。</li><li>项目名称，项目描述，技术栈，个人角色。</li></ul><h4 id="2-5-社区贡献"><a href="#2-5-社区贡献" class="headerlink" title="2.5 社区贡献"></a>2.5 社区贡献</h4><ul><li>有博客或者开源作品，会让你更有竞争力。</li><li>切记：需要真的有内容，不可临时抱佛脚。</li></ul><h3 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h3><ul><li>界面不能太花哨，简洁明了即可。</li><li>注意用词，“精通”“熟练”等慎用，可用“熟悉”。</li><li>不可造假，会被拉入黑名单。</li></ul><h3 id="4、面试前准备"><a href="#4、面试前准备" class="headerlink" title="4、面试前准备"></a>4、面试前准备</h3><ul><li>看 JD，是否需要临时准备一下。</li><li>打印纸质简历，带着纸和笔（增加好印象）。</li><li>最好带着自己电脑，现场可能手写代码（带一个帆布包最适合，又优雅又方便）。</li><li>要有时间观念，如果迟到或者推迟，要提前说。</li><li>衣着适当，不用正装，也不要太随意。</li><li>为何离职？—— 不要吐槽前东家，说自己的原因（想找一个更好的发展平台等）。</li><li>能加班吗？—— 能！除非你特别自信，能找到其他机会。</li><li>不要挑战面试官，即便他错了（面试一定要保证愉快）。</li><li>遇到不会的问题，要表现出自己积极的一面（不好意思哈，确实是我的知识盲区，可以跟我说下 xxx 吗，我回去研究一下）。</li></ul><h2 id="二、HTML-CSS-面试题"><a href="#二、HTML-CSS-面试题" class="headerlink" title="二、HTML+CSS 面试题"></a>二、HTML+CSS 面试题</h2><p>HTML 和 CSS 面试题答不出来基本可以回去了。</p><h3 id="1、HTML-面试题"><a href="#1、HTML-面试题" class="headerlink" title="1、HTML 面试题"></a>1、HTML 面试题</h3><p>以下是针对 HTML 相关的面试题，一般来说这地方不会出太多题，面试官也不愿意花太多时间在这上面。</p><h4 id="1-1-如何理解-HTML-语义化？"><a href="#1-1-如何理解-HTML-语义化？" class="headerlink" title="1.1 如何理解 HTML 语义化？"></a>1.1 如何理解 HTML 语义化？</h4><ul><li>让人更容易读懂（增加代码可读性）。</li><li>让搜索引擎更容易读懂，有助于爬虫抓取更多的有效信息，爬虫依赖于标签来确定上下文和各个关键字的权重（SEO）。</li><li>在没有 CSS 样式下，页面也能呈现出很好地内容结构、代码结构。</li></ul><h4 id="1-2-script-标签中-defer-和-async-的区别？"><a href="#1-2-script-标签中-defer-和-async-的区别？" class="headerlink" title="1.2 script 标签中 defer 和 async 的区别？"></a>1.2 script 标签中 defer 和 async 的区别？</h4><ul><li><code>script</code> ：会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML。</li><li><code>async script</code> ：解析 HTML 过程中进行脚本的异步下载，下载成功立马执行，有可能会阻断 HTML 的解析。</li><li><code>defer script</code>：完全不会阻碍 HTML 的解析，解析完成之后再按照顺序执行脚本。</li></ul><p>下图清晰地展示了三种 <code>script</code> 的过程：<br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ea091aed8364b88a653a13c4845a824~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><blockquote><p>推荐文章：</p><ul><li><a href="https://juejin.cn/post/6894629999215640583" target="_blank" rel="noopener" title="https://juejin.cn/post/6894629999215640583">图解 script 标签中的 async 和 defer 属性</a></li></ul></blockquote><h4 id="1-3-从浏览器地址栏输入-url-到请求返回发生了什么"><a href="#1-3-从浏览器地址栏输入-url-到请求返回发生了什么" class="headerlink" title="1.3 从浏览器地址栏输入 url 到请求返回发生了什么"></a>1.3 从浏览器地址栏输入 url 到请求返回发生了什么</h4><p>先阅读这篇科普性质的：<a href="https://juejin.cn/post/6844903784229896199" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903784229896199">从 URL 输入到页面展现到底发生什么？</a><br>先阅读篇文章：<a href="https://juejin.cn/post/6935232082482298911" target="_blank" rel="noopener" title="https://juejin.cn/post/6935232082482298911">从输入 URL 开始建立前端知识体系</a>。</p><ol><li>输入 URL 后解析出协议、主机、端口、路径等信息，并构造一个 HTTP 请求。</li></ol><ul><li>强缓存。</li><li>协商缓存。</li></ul><ol start="2"><li>DNS 域名解析。（<a href="https://juejin.cn/post/6990344840181940261" target="_blank" rel="noopener" title="https://juejin.cn/post/6990344840181940261">字节面试被虐后，是时候搞懂 DNS 了</a>）</li><li>TCP 连接。<blockquote><p>总是要问：为什么需要三次握手，两次不行吗？其实这是由 TCP 的自身特点<strong>可靠传输</strong>决定的。客户端和服务端要进行可靠传输，那么就需要 <strong>确认双方的接收和发送能力</strong> 。第一次握手可以确认客服端的 <strong>发送能力</strong> ，第二次握手，确认了服务端的 <strong>发送能力和接收能力</strong> ，所以第三次握手才可以确认客户端的 <strong>接收能力</strong> 。不然容易出现丢包的现象。</p></blockquote></li><li>http 请求。</li><li>服务器处理请求并返回 HTTP 报文。</li><li>浏览器渲染页面。</li></ol><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77972f24d69243bb93679f155f305095~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol start="7"><li>断开 TCP 连接。</li></ol><h3 id="2、CSS-面试题"><a href="#2、CSS-面试题" class="headerlink" title="2、CSS 面试题"></a>2、CSS 面试题</h3><p>以下是针对 CSS 相关的面试题，这些题答不出来会给人非常不好的技术印象。</p><h4 id="2-1-盒模型介绍"><a href="#2-1-盒模型介绍" class="headerlink" title="2.1 盒模型介绍"></a>2.1 盒模型介绍</h4><p>CSS3 中的盒模型有以下两种： <strong>标准盒模型</strong> 、 <strong>IE（替代）盒模型</strong> 。</p><p>两种盒子模型都是由 <code>content + padding + border + margin</code> 构成，其大小都是由 <code>content + padding + border</code> 决定的，但是盒子内容宽/高度（即 <code>width/height</code>）的计算范围根据盒模型的不同会有所不同：</p><ul><li>标准盒模型：只包含 <code>content</code> 。</li><li>IE（替代）盒模型：<code>content + padding + border</code> 。</li></ul><p>可以通过 <code>box-sizing</code> 来改变元素的盒模型：</p><ul><li><code>box-sizing: content-box</code> ：标准盒模型（默认值）。</li><li><code>box-sizing: border-box</code> ：IE（替代）盒模型。</li></ul><h4 id="2-2-css-选择器和优先级"><a href="#2-2-css-选择器和优先级" class="headerlink" title="2.2 css 选择器和优先级"></a>2.2 css 选择器和优先级</h4><p>首先我们要知道有哪些选择器：<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FLearn%2FCSS%2FBuilding_blocks%2FSelectors%23%25E9%2580%2589%25E6%258B%25A9%25E5%2599%25A8%25E5%258F%2582%25E8%2580%2583%25E8%25A1%25A8" title="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors#%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%82%E8%80%83%E8%A1%A8">选择器参考表</a>。</p><p>常规来说，大家都知道样式的优先级一般为 <code>!important &gt; style &gt; id &gt; class</code> ，但是涉及多类选择器作用于同一个元素时候怎么判断优先级呢？相信我，你在改一些第三方库（比如 antd 😂）样式时，理解这个会帮助很大！</p><p>这篇文章写的非常清晰易懂，强烈推荐，看完之后就没啥问题了：<a href="https://juejin.cn/post/6844903709772611592" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903709772611592">深入理解 CSS 选择器优先级</a>。</p><blockquote><p>上述文章中核心内容：<br>优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 <code>A = 1</code>，否则 <code>A = 0</code> ；</li><li>B 的值等于 <code>ID选择器（#id）</code> 出现的次数；</li><li>C 的值等于 <code>类选择器（.class）</code> 和 <code>属性选择器（a[href=&quot;https://example.org&quot;]）</code> 和 <code>伪类（:first-child）</code> 出现的总次数；</li><li>D 的值等于 <code>标签选择器（h1,a,div）</code> 和 <code>伪元素（::before,::after）</code> 出现的总次数。</li></ul></blockquote><blockquote><p>从左至右比较，如果是样式优先级相等，取后面出现的样式。</p></blockquote><h4 id="2-3-重排（reflow）和重绘（repaint）的理解"><a href="#2-3-重排（reflow）和重绘（repaint）的理解" class="headerlink" title="2.3 重排（reflow）和重绘（repaint）的理解"></a>2.3 重排（reflow）和重绘（repaint）的理解</h4><p>简单地总结下两者的概念：</p><ul><li>重排：无论通过什么方式影响了元素的 <strong>几何信息</strong> (元素在视口内的位置和尺寸大小)，浏览器需要<strong>重新计算</strong>元素在视口内的几何属性，这个过程叫做重排。</li><li>重绘：通过构造渲染树和重排（回流）阶段，我们知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息(元素在视口内的位置和尺寸大小)，接下来就可以将渲染树的每个节点都转换为屏幕上的 <strong>实际像素</strong> ，这个阶段就叫做重绘。</li></ul><p>如何减少重排和重绘？</p><ul><li><strong>最小化重绘和重排</strong> ，比如样式集中改变，使用添加新样式类名 <code>.class</code> 或 <code>cssText</code> 。</li><li><strong>批量操作 DOM</strong> ，比如读取某元素 <code>offsetWidth</code> 属性存到一个临时变量，再去使用，而不是频繁使用这个计算属性；又比如利用 <code>document.createDocumentFragment()</code> 来添加要被添加的节点，处理完之后再插入到实际 DOM 中。</li><li><strong>使用 **`</strong>absolute<strong>`</strong> 或 <strong>`</strong>fixed<strong>`</strong> 使元素脱离文档流** ，这在制作复杂的动画时对性能的影响比较明显。</li><li><strong>开启 GPU 加速</strong> ，利用 css 属性 <code>transform</code> 、<code>will-change</code> 等，比如改变元素位置，我们使用 <code>translate</code> 会比使用绝对定位改变其 <code>left</code> 、<code>top</code> 等来的高效，因为它不会触发重排或重绘，<code>transform</code> 使浏览器为元素创建⼀个 GPU 图层，这使得动画元素在一个独立的层中进行渲染。当元素的内容没有发生改变，就没有必要进行重绘。</li></ul><p>这里推荐<strong>腾讯 IVWEB 团队</strong>的这篇文章：<a href="https://juejin.cn/post/6844903779700047885" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903779700047885">你真的了解回流和重绘吗</a>，好好认真看完，面试应该没问题的。</p><h4 id="2-4-对-BFC-的理解"><a href="#2-4-对-BFC-的理解" class="headerlink" title="2.4 对 BFC 的理解"></a>2.4 对 BFC 的理解</h4><p>BFC 即块级格式上下文，根据盒模型可知，每个元素都被定义为一个矩形盒子，然而盒子的布局会受到<strong>尺寸，定位，盒子的子元素或兄弟元素，视口的尺寸</strong>等因素决定，所以这里有一个浏览器计算的过程，计算的规则就是由一个叫做<strong>视觉格式化模型</strong>的东西所定义的，BFC 就是来自这个概念，它是 CSS 视觉渲染的一部分， <strong>用于决定块级盒的布局及浮动相互影响范围的一个区域</strong> 。</p><p>BFC 具有一些特性：</p><ol><li>块级元素会在垂直方向一个接一个的排列，和文档流的排列方式一致。</li><li>在 BFC 中上下相邻的两个容器的 <code>margin</code>  会重叠，创建新的 BFC 可以避免外边距重叠。</li><li>计算 BFC 的高度时，需要计算浮动元素的高度。</li><li>BFC 区域不会与浮动的容器发生重叠。</li><li>BFC 是独立的容器，容器内部元素不会影响外部元素。</li><li>每个元素的左 <code>margin</code>  值和容器的左 <code>border</code>  相接触。</li></ol><p>利用这些特性，我们可以解决以下问题：</p><ul><li>利用 <code>4</code>  和 <code>6</code> ，我们可以实现三栏（或两栏）自适应布局。</li><li>利用 <code>2</code> ，我们可以避免 <code>margin</code>  重叠问题。</li><li>利用 <code>3</code> ，我们可以避免高度塌陷。</li></ul><p>创建 BFC 的方式：</p><ul><li>绝对定位元素（<code>position</code> 为 <code>absolute</code> 或 <code>fixed</code> ）。</li><li>行内块元素，即 <code>display</code> 为 <code>inline-block</code> 。</li><li><code>overflow</code> 的值不为 <code>visible</code> 。</li></ul><p>推荐文章：<a href="https://juejin.cn/post/6960866014384881671" target="_blank" rel="noopener" title="https://juejin.cn/post/6960866014384881671">可能是最好的 BFC 解析了…</a></p><h4 id="2-5-实现两栏布局（左侧固定-右侧自适应布局）"><a href="#2-5-实现两栏布局（左侧固定-右侧自适应布局）" class="headerlink" title="2.5 实现两栏布局（左侧固定 + 右侧自适应布局）"></a>2.5 实现两栏布局（左侧固定 + 右侧自适应布局）</h4><p>现在有以下 DOM 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>利用浮动，左边元素宽度固定 ，设置向左浮动。将右边元素的 <code>margin-left</code> 设为固定宽度 。注意，因为右边元素的 <code>width</code> 默认为 <code>auto</code> ，所以会自动撑满父元素。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 <code>overflow: hidden;</code> 这样右边就触发了 <code>BFC</code> ，<code>BFC</code> 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>利用 <code>flex</code> 布局，左边元素固定宽度，右边的元素设置 <code>flex: 1</code> 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>利用绝对定位，父级元素设为相对定位。左边元素 <code>absolute</code>  定位，宽度固定。右边元素的 <code>margin-left</code>  的值设为左边元素的宽度值。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>利用绝对定位，父级元素设为相对定位。左边元素宽度固定，右边元素 <code>absolute</code>  定位， <code>left</code>  为宽度大小，其余方向定位为 <code>0</code> 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-实现圣杯布局和双飞翼布局（经典三分栏布局）"><a href="#2-6-实现圣杯布局和双飞翼布局（经典三分栏布局）" class="headerlink" title="2.6 实现圣杯布局和双飞翼布局（经典三分栏布局）"></a>2.6 实现圣杯布局和双飞翼布局（经典三分栏布局）</h4><p>圣杯布局和双飞翼布局的目的：</p><ul><li>三栏布局，中间一栏最先加载和渲染（ <strong>内容最重要，这就是为什么还需要了解这种布局的原因</strong> ）。</li><li>两侧内容固定，中间内容随着宽度自适应。</li><li>一般用于 PC 网页。</li></ul><p>圣杯布局和双飞翼布局的技术总结：</p><ul><li>使用 <code>float</code>  布局。</li><li>两侧使用 <code>margin</code> 负值，以便和中间内容横向重叠。</li><li>防止中间内容被两侧覆盖，圣杯布局用 <code>padding</code> ，双飞翼布局用 <code>margin</code> 。</li></ul><p><strong>圣杯布局：</strong><br>HTML 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>我是中间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>我是左边<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>我是右边<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcyan;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双飞翼布局：</strong><br>HTML 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-wrap"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span> <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightsalmon;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips：上述代码中 <code>margin-left: -100%</code>  相对的是父元素的 <code>content</code>  宽度，即不包含 <code>paddig</code> 、 <code>border</code>  的宽度。</p><p>其实以上问题需要掌握 <strong>margin 负值问题</strong> 即可很好理解。</p><h4 id="2-7-水平垂直居中多种实现方式"><a href="#2-7-水平垂直居中多种实现方式" class="headerlink" title="2.7 水平垂直居中多种实现方式"></a>2.7 水平垂直居中多种实现方式</h4><ol><li>利用绝对定位，设置 <code>left: 50%</code>  和 <code>top: 50%</code>  现将子元素左上角移到父元素中心位置，然后再通过 <code>translate</code>  来调整子元素的中心点到父元素的中心。该方法可以 <strong>不定宽高</strong> 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用绝对定位，子元素所有方向都为 <code>0</code> ，将 <code>margin</code>  设置为 <code>auto</code> ，由于宽高固定，对应方向实现平分，该方法必须 <strong>盒子有宽高</strong> 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>利用绝对定位，设置 <code>left: 50%</code> 和 <code>top: 50%</code> 现将子元素左上角移到父元素中心位置，然后再通过 <code>margin-left</code>  和 <code>margin-top</code>  以子元素自己的一半宽高进行负值赋值。该方法 <strong>必须定宽高</strong> 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>利用 <code>flex</code> ，最经典最方便的一种了，不用解释，定不定宽高无所谓的。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有很多方法，比如 <code>display: grid</code>  或 <code>display: table-cell</code>  来做，有兴趣点击下面这篇文章可以了解下：</p><p><a href="https://juejin.cn/post/6844903982960214029" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903982960214029">面试官：你能实现多少种水平垂直居中的布局（定宽高和不定宽高）</a>。</p><h4 id="2-8-flex-布局"><a href="#2-8-flex-布局" class="headerlink" title="2.8 flex 布局"></a>2.8 flex 布局</h4><p>这一块内容看 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F07%2Fflex-grammar.html" title="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程</a> 就够了。</p><p>这里有个小问题，很多时候我们会用到 <code>flex: 1</code> ，它具体包含了以下的意思：</p><ul><li><code>flex-grow: 1</code> ：该属性默认为 <code>0</code> ，如果存在剩余空间，元素也不放大。设置为 <code>1</code>  代表会放大。</li><li><code>flex-shrink: 1</code> ：该属性默认为 <code>1</code> ，如果空间不足，元素缩小。</li><li><code>flex-basis: 0%</code> ：该属性定义在分配多余空间之前，元素占据的主轴空间。浏览器就是根据这个属性来<strong>计算是否有多余空间</strong>的。默认值为 <code>auto</code> ，即项目本身大小。设置为 <code>0%</code>  之后，因为有 <code>flex-grow</code>  和 <code>flex-shrink</code>  的设置会自动放大或缩小。在做两栏布局时，如果右边的自适应元素 <code>flex-basis</code>  设为 <code>auto</code>  的话，其本身大小将会是 <code>0</code> 。</li></ul><h4 id="2-9-line-height-如何继承？"><a href="#2-9-line-height-如何继承？" class="headerlink" title="2.9 line-height 如何继承？"></a>2.9 line-height 如何继承？</h4><ul><li>父元素的 <code>line-height</code> 写了 <strong>具体数值</strong> ，比如 <code>30px</code>，则子元素 <code>line-height</code> 继承该值。</li><li>父元素的 <code>line-height</code> 写了 <strong>比例</strong> ，比如 <code>1.5 或 2</code>，则子元素 <code>line-height</code> 也是继承该比例。</li><li>父元素的 <code>line-height</code> 写了 <strong>百分比</strong> ，比如 <code>200%</code>，则子元素 <code>line-height</code> 继承的是父元素 <code>font-size * 200%</code> 计算出来的值。</li></ul><h2 id="三、js-基础"><a href="#三、js-基础" class="headerlink" title="三、js 基础"></a>三、js 基础</h2><p>js 的考察其实来回就那些东西，不过就我自己而已学习的时候理解是真的理解了，但是忘也确实会忘（大家都说理解了一定不会忘，但是要答全的话还是需要理解+背）。</p><h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><p>以下是比较重要的几个 js 变量要掌握的点。</p><h4 id="1-1-基本的数据类型介绍，及值类型和引用类型的理解"><a href="#1-1-基本的数据类型介绍，及值类型和引用类型的理解" class="headerlink" title="1.1 基本的数据类型介绍，及值类型和引用类型的理解"></a>1.1 基本的数据类型介绍，及值类型和引用类型的理解</h4><p>在 JS 中共有 <code>8</code>  种基础的数据类型，分别为： <code>Undefined</code> 、 <code>Null</code> 、 <code>Boolean</code> 、 <code>Number</code> 、 <code>String</code> 、 <code>Object</code> 、 <code>Symbol</code> 、 <code>BigInt</code> 。</p><p>其中 <code>Symbol</code>  和 <code>BigInt</code>  是 ES6 新增的数据类型，可能会被单独问：</p><ul><li>Symbol 代表独一无二的值，最大的用法是用来定义对象的唯一属性名。</li><li>BigInt 可以表示任意大小的整数。</li></ul><p><strong>值类型的赋值变动过程如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55df6cb63d3346be9ec1f572a1514853~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 1.png"><br>值类型是直接存储在<strong>栈（stack）</strong>中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</p><p><strong>引用类型的赋值变动过程如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b.age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.age); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c5c43d1c584ed4b8e4cce8855bab52~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 2.png"><br>引用类型存储在<strong>堆（heap）</strong>中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；</p><h4 id="1-2-数据类型的判断"><a href="#1-2-数据类型的判断" class="headerlink" title="1.2 数据类型的判断"></a>1.2 数据类型的判断</h4><ul><li><strong>typeof</strong> ：能判断所有 <strong>值类型，函数</strong> 。不可对 <strong>null、对象、数组</strong>进行精确判断，因为都返回 <code>object</code> 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">"str"</span>); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">"foo"</span>)); <span class="comment">// symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2172141653n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="comment">// 不能判别</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><ul><li><strong>instanceof</strong> ：能判断<strong>对象</strong>类型，不能判断基本数据类型， <strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong> 。比如考虑以下代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vortesnail = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vortesnail <span class="keyword">instanceof</span> People); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(vortesnail <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>其实现就是顺着<strong>原型链</strong>去找，如果能找到对应的 <code>Xxxxx.prototype</code>  即为 <code>true</code> 。比如这里的 <code>vortesnail</code>  作为实例，顺着原型链能找到 <code>Student.prototype</code>  及 <code>People.prototype</code> ，所以都为 <code>true</code> 。</p><ul><li><strong>Object.prototype.toString.call()</strong> ：所有原始数据类型都是能判断的，还有 <strong>Error 对象，Date 对象</strong>等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">2</span>); <span class="comment">// "[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">""</span>); <span class="comment">// "[object String]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// "[object Boolean]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>); <span class="comment">// "[object Undefined]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>); <span class="comment">// "[object Math]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// "[object Function]"</span></span><br></pre></td></tr></table></figure><p>在面试中有一个经常被问的问题就是：如何判断变量是否为数组？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">// true</span></span><br><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype; <span class="comment">// true</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr); <span class="comment">// "[object Array]"</span></span><br></pre></td></tr></table></figure><h4 id="1-3-手写深拷贝"><a href="#1-3-手写深拷贝" class="headerlink" title="1.3 手写深拷贝"></a>1.3 手写深拷贝</h4><p>这个题一定要会啊！笔者面试过程中疯狂被问到！</p><p>文章推荐：<a href="https://juejin.cn/post/6844903929705136141" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903929705136141">如何写出一个惊艳面试官的深拷贝?</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Map&#125;</span> </span>map 用于存储循环引用对象的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj = &#123;&#125;, map = new Map(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (map.get(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ||</span><br><span class="line">    <span class="comment">// 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString(obj) === <span class="string">"[object Array]"</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line">  map.set(obj, result);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用</span></span><br><span class="line">      result[key] = deepClone(obj[key], map);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-根据-0-1-0-2-0-3，讲讲-IEEE-754-，如何让其相等？"><a href="#1-4-根据-0-1-0-2-0-3，讲讲-IEEE-754-，如何让其相等？" class="headerlink" title="1.4 根据 0.1+0.2 ! == 0.3，讲讲 IEEE 754 ，如何让其相等？"></a>1.4 根据 0.1+0.2 ! == 0.3，讲讲 IEEE 754 ，如何让其相等？</h4><p>建议先阅读这篇文章了解 IEEE 754 ：<a href="https://juejin.cn/post/6940405970954616839" target="_blank" rel="noopener" title="https://juejin.cn/post/6940405970954616839">硬核基础二进制篇（一）0.1 + 0.2 != 0.3 和 IEEE-754 标准</a>。<br>再阅读这篇文章了解如何运算：<a href="https://juejin.cn/post/6844903680362151950" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903680362151950">0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？</a>。</p><p>原因总结：</p><ul><li><code>进制转换</code> ：js 在做数字计算的时候，0.1 和 0.2 都会被转成二进制后无限循环 ，但是 js 采用的 IEEE 754 二进制浮点运算，最大可以存储 53 位有效数字，于是大于 53 位后面的会全部截掉，将导致精度丢失。</li><li><code>对阶运算</code> ：由于指数位数不相同，运算时需要对阶运算，阶小的尾数要根据阶差来右移（<code>0舍1入</code>），尾数位移时可能会发生数丢失的情况，影响精度。</li></ul><p>解决办法：</p><ol><li>转为整数（大数）运算。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> maxLen = <span class="built_in">Math</span>.max(</span><br><span class="line">    a.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length,</span><br><span class="line">    b.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> base = <span class="number">10</span> ** maxLen;</span><br><span class="line">  <span class="keyword">const</span> bigA = BigInt(base * a);</span><br><span class="line">  <span class="keyword">const</span> bigB = BigInt(base * b);</span><br><span class="line">  <span class="keyword">const</span> bigRes = (bigA + bigB) / BigInt(base); <span class="comment">// 如果是 (1n + 2n) / 10n 是等于 0n的。。。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(bigRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里代码是有问题的，因为最后计算 <code>bigRes</code> 的大数相除（即 <code>/</code>）是会把小数部分截掉的，所以我很疑惑为什么网络上很多文章都说可以通过<strong>先转为整数运算再除回去，为了防止转为的整数超出 js 表示范围，还可以运用到 ES6 新增的大数类型，我真的很疑惑，希望有好心人能解答下。</strong></p><ol start="2"><li>使用 <code>Number.EPSILON</code> 误差范围。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a - b) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEqual(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Number.EPSILON</code> 的实质是一个可以接受的最小误差范围，一般来说为 <code>Math.pow(2, -52)</code> 。</p><ol start="3"><li>转成字符串，对字符串做加法运算。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串数字相加</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = num1.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> j = num2.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n1 = i &gt;= <span class="number">0</span> ? <span class="built_in">Number</span>(num1[i]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> n2 = j &gt;= <span class="number">0</span> ? <span class="built_in">Number</span>(num2[j]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> sum = n1 + n2 + carry;</span><br><span class="line">    res.unshift(sum % <span class="number">10</span>);</span><br><span class="line">    carry = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>);</span><br><span class="line">    i--;</span><br><span class="line">    j--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">    res.unshift(carry);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.join(<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">a, b, sum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [intStr1, deciStr1] = a.toString().split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> [intStr2, deciStr2] = b.toString().split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">const</span> inteSum = addStrings(intStr1, intStr2); <span class="comment">// 获取整数相加部分</span></span><br><span class="line">  <span class="keyword">const</span> deciSum = addStrings(deciStr1, deciStr2); <span class="comment">// 获取小数相加部分</span></span><br><span class="line">  <span class="keyword">return</span> inteSum + <span class="string">"."</span> + deciSum === <span class="built_in">String</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEqual(<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这是 leetcode 上一道原题：<a href="https://link.juejin.cn?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fadd-strings%2F" title="https://leetcode-cn.com/problems/add-strings/">415. 字符串相加</a>。区别在于原题没有考虑小数，但是也是很简单的，我们分为两个部分计算就行。</p><h3 id="2、-原型和原型链"><a href="#2、-原型和原型链" class="headerlink" title="2、 原型和原型链"></a>2、 原型和原型链</h3><p>可以说这部分每家面试官都会问了。。首先理解的话，其实一张图即可，一段代码即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure><p>千万别畏惧下面这张图，特别有用，一定要搞懂，熟到提笔就能默画出来。<br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a61ca07672a45d3aecf382100cc9719~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>总结：</p><ul><li>原型：每一个 JavaScript 对象（null 除外）在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性，其实就是 <code>prototype</code> 对象。</li><li>原型链：由相互关联的原型组成的<strong>链状结构</strong>就是原型链。</li></ul><p>先说出总结的话，再举例子说明如何顺着原型链找到某个属性。</p><p>推荐的阅读：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2Fblog%2Fissues%2F2" title="https://github.com/mqyqingfeng/blog/issues/2">JavaScript 深入之从原型到原型链</a> 掌握基本概念，再阅读这篇文章<a href="https://juejin.cn/post/6844903989088092174" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903989088092174">轻松理解 JS 原型原型链</a>加深上图的印象。</p><h3 id="3、-作用域与作用域链"><a href="#3、-作用域与作用域链" class="headerlink" title="3、 作用域与作用域链"></a>3、 作用域与作用域链</h3><ul><li>作用域：规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。换句话说，作用域决定了代码区块中变量和其他资源的可见性。（全局作用域、函数作用域、块级作用域）</li><li>作用域链：从当前作用域开始一层层往上找某个变量，如果找到全局作用域还没找到，就放弃寻找 。这种层级关系就是作用域链。（由多个执行上下文的<strong>变量对象</strong>构成的链表就叫做作用域链，学习下面的内容之后再考虑这句话）</li></ul><p><strong>需要注意的是，js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了。</strong></p><p>推荐阅读：先阅读<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3" title="https://github.com/mqyqingfeng/Blog/issues/3">JavaScript 深入之词法作用域和动态作用域</a>，再阅读<a href="https://juejin.cn/post/6844903797135769614" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903797135769614">深入理解 JavaScript 作用域和作用域链</a>。</p><h3 id="4、-执行上下文"><a href="#4、-执行上下文" class="headerlink" title="4、 执行上下文"></a>4、 执行上下文</h3><p>这部分一定要按顺序连续读这几篇文章，必须多读几遍：</p><ul><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F4" title="https://github.com/mqyqingfeng/Blog/issues/4">JavaScript 深入之执行上下文栈</a>；</li><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F5" title="https://github.com/mqyqingfeng/Blog/issues/5">JavaScript 深入之变量对象</a>；</li><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6" title="https://github.com/mqyqingfeng/Blog/issues/6">JavaScript 深入之作用域链</a>；</li><li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F8" title="https://github.com/mqyqingfeng/Blog/issues/8">JavaScript 深入之执行上下文</a>。</li></ul><p>总结：当 JavaScript 代码执行一段可执行代码时，会创建对应的执行上下文。对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象（Variable object，VO）；</li><li>作用域链（Scope chain）；</li><li>this。（关于 this 指向问题，在上面推荐的深入系列也有讲从 ES 规范讲的，但是实在是难懂，对于应付面试来说以下这篇阮一峰的文章应该就可以了：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2018%2F06%2Fjavascript-this.html" title="https://www.ruanyifeng.com/blog/2018/06/javascript-this.html">JavaScript 的 this 原理</a>）</li></ul><h3 id="5、-闭包"><a href="#5、-闭包" class="headerlink" title="5、 闭包"></a>5、 闭包</h3><p>根据 MDN 中文的定义，闭包的定义如下：</p><blockquote><p>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。</p></blockquote><p>也可以这样说：</p><blockquote><p>闭包是指那些能够访问自由变量的函数。<br>自由变量是指在函数中使用的，但既不是<strong>函数参数</strong>也不是<strong>函数的局部变量</strong>的 <strong>变量</strong> 。<br>闭包 = 函数 + 函数能够访问的自由变量。</p></blockquote><p>在经过上一小节“执行上下文”的学习，再来阅读这篇文章：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F9" title="https://github.com/mqyqingfeng/Blog/issues/9">JavaScript 深入之闭包</a>，你会对闭包的实质有一定的了解。在回答时，我们这样答：</p><p>在某个内部函数的执行上下文创建时，会将父级函数的<strong>活动对象</strong>加到内部函数的 <code>[[scope]]</code> 中，形成作用域链，所以即使父级函数的执行上下文销毁（即执行上下文栈弹出父级函数的执行上下文），但是因为其<strong>活动对象</strong>还是实际存储在内存中可被内部函数访问到的，从而实现了闭包。</p><p>闭包应用：<br>函数作为参数被传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(fn); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>函数作为返回值被返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = create();</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">fn(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p><strong>闭包：自由变量的查找，是在函数定义的地方，向上级作用域查找。不是在执行的地方。</strong></p><p>应用实例：比如缓存工具，隐藏数据，只提供 API 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;; <span class="comment">// 闭包中被隐藏的数据，不被外界访问</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">set</span>: function (key, val) &#123;</span><br><span class="line">      data[key] = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function (key) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = createCache();</span><br><span class="line">c.set(<span class="string">"a"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.get(<span class="string">"a"</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h3 id="6、-call、apply、bind-实现"><a href="#6、-call、apply、bind-实现" class="headerlink" title="6、 call、apply、bind 实现"></a>6、 call、apply、bind 实现</h3><p>这部分实现还是要知道的，就算工作中不会自己手写，但是说不准面试官就是要问，知道点原理也好，可以扩宽我们写代码的思路。</p><p><strong>call</strong></p><blockquote><p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。</p></blockquote><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="string">"vortesnail"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(obj); <span class="comment">// vortesnail</span></span><br></pre></td></tr></table></figure><p>通过 <code>call</code> 方法我们做到了以下两点：</p><ul><li><code>call</code> 改变了 this 的指向，指向到 <code>obj</code> 。</li><li><code>fn</code> 函数执行了。</li></ul><p>那么如果我们自己写 <code>call</code> 方法的话，可以怎么做呢？我们先考虑改造 <code>obj</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="string">"vortesnail"</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.fn(); <span class="comment">// vortesnail</span></span><br></pre></td></tr></table></figure><p>这时候 this 就指向了 <code>obj</code> ，但是这样做我们手动给 <code>obj</code> 增加了一个 <code>fn</code> 属性，这显然是不行的，不用担心，我们执行完再使用对象属性的删除方法（delete）不就行了？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.fn = fn;</span><br><span class="line">obj.fn();</span><br><span class="line"><span class="keyword">delete</span> obj.fn;</span><br></pre></td></tr></table></figure><p>根据这个思路，我们就可以写出来了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断调用对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Type error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 首先获取参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 判断 context 是否传入，如果没有传就设置为 window</span></span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">// 将被调用的方法设置为 context 的属性</span></span><br><span class="line">  <span class="comment">// this 即为我们要调用的方法</span></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 执行要被调用的方法</span></span><br><span class="line">  result = context.fn(...args);</span><br><span class="line">  <span class="comment">// 删除手动增加的属性方法</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="comment">// 将执行结果返回</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>apply</strong></p><p>我们会了 <code>call</code> 的实现之后，<code>apply</code> 就变得很简单了，他们没有任何区别，除了传参方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Type error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">// 与上面代码相比，我们使用 Symbol 来保证属性唯一</span></span><br><span class="line">  <span class="comment">// 也就是保证不会重写用户自己原来定义在 context 中的同名属性</span></span><br><span class="line">  <span class="keyword">const</span> fnSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line">  context[fnSymbol] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 执行要被调用的方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context[fnSymbol](...arguments[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context[fnSymbol]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>bind</strong></p><p><code>bind</code> 返回的是一个函数，这个地方可以详细阅读这篇文章，讲的非常清楚：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FsisterAn%2FJavaScript-Algorithms%2Fissues%2F81" title="https://github.com/sisterAn/JavaScript-Algorithms/issues/81">解析 bind 原理，并手写 bind 实现</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断调用对象是否为函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Type error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>),</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(</span><br><span class="line">      <span class="keyword">this</span> <span class="keyword">instanceof</span> Fn ? <span class="keyword">this</span> : context,</span><br><span class="line">      <span class="comment">// 当前的这个 arguments 是指 Fn 的参数</span></span><br><span class="line">      args.concat(...arguments)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7、-new-实现"><a href="#7、-new-实现" class="headerlink" title="7、 new 实现"></a>7、 new 实现</h3><ol><li>首先创一个新的空对象。</li><li>根据原型链，设置空对象的 <code>__proto__</code> 为构造函数的 <code>prototype</code> 。</li><li>构造函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）。</li><li>判断函数的返回值类型，如果是引用类型，就返回这个引用类型的对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  obj.__proto__ = context.prototype;</span><br><span class="line">  <span class="keyword">const</span> res = context.apply(obj, [...arguments].slice(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">"object"</span> ? res : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、-异步"><a href="#8、-异步" class="headerlink" title="8、 异步"></a>8、 异步</h3><p>这部分着重要理解 Promise、async awiat、event loop 等。</p><h4 id="8-1-event-loop、宏任务和微任务"><a href="#8-1-event-loop、宏任务和微任务" class="headerlink" title="8.1 event loop、宏任务和微任务"></a>8.1 event loop、宏任务和微任务</h4><p>首先推荐一个可以在线看代码流程的网站：<a href="https://link.juejin.cn?target=http%3A%2F%2Flatentflip.com%2Floupe%2F%3Fcode%3DJC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%253D" title="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D">loupe</a>。<br>然后看下这个视频学习下：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1oV411k7XY%2F%3Fspm_id_from%3D333.788.recommend_more_video.-1" title="https://www.bilibili.com/video/BV1oV411k7XY/?spm_id_from=333.788.recommend_more_video.-1">到底什么是 Event Loop 呢？</a></p><p>简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hi"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"cb"</span>); <span class="comment">// cb 即 callback</span></span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Bye"</span>);</span><br></pre></td></tr></table></figure><p>它的执行过程是这样的：<br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e15fc609aa84eac973c5b8ff163c11c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="屏幕录制 2021-07-19 15.01.09.gif"><br>Web APIs 会创建对应的线程，比如 <code>setTimeout</code> 会创建定时器线程，<code>ajax</code> 请求会创建 http 线程。。。这是由 js 的运行环境决定的，比如浏览器。</p><p>看完上面的视频之后，至少大家画 Event Loop 的图讲解不是啥问题了，但是涉及到<strong>宏任务</strong>和 <strong>微任务</strong> ，我们还得拜读一下这篇文章：<a href="https://juejin.cn/post/6844903512845860872" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a>。如果意犹未尽，不如再读下这篇非常详细带有大量动图的文章：<a href="https://juejin.cn/post/6969028296893792286#comment" target="_blank" rel="noopener" title="https://juejin.cn/post/6969028296893792286#comment">做一些动图，学习一下 EventLoop</a>。想了解事件循环和页面渲染之间关系的又可以再阅读这篇文章：<a href="https://juejin.cn/post/6844904165462769678" target="_blank" rel="noopener" title="https://juejin.cn/post/6844904165462769678">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）</a>。</p><p> <strong>注意：1.Call Stack 调用栈空闲 -&gt; 2.尝试 DOM 渲染 -&gt; 触发 Event loop</strong> 。</p><ul><li>每次 Call Stack 清空（即每次轮询结束），即同步任务执行完。</li><li>都是 DOM 重新渲染的机会，DOM 结构有改变则重新渲染。</li><li>然后再去触发下一次 Event loop。</li></ul><p>宏任务：setTimeout，setInterval，Ajax，DOM 事件。<br>微任务：Promise async/await。</p><p>两者区别：</p><ul><li>宏任务：DOM 渲染后触发，如 <code>setTimeout</code> 、<code>setInterval</code> 、<code>DOM 事件</code> 、<code>script</code> 。</li><li>微任务：DOM 渲染前触发，如 <code>Promise.then</code> 、<code>MutationObserver</code> 、Node 环境下的 <code>process.nextTick</code> 。</li></ul><p><strong>从 event loop 解释，为何微任务执行更早？</strong></p><ul><li>微任务是 ES6 语法规定的（被压入 micro task queue）。</li><li>宏任务是由浏览器规定的（通过 Web APIs 压入 Callback queue）。</li><li>宏任务执行时间一般比较长。</li><li>每一次宏任务开始之前一定是伴随着一次 event loop 结束的，而微任务是在一次 event loop 结束前执行的。</li></ul><h4 id="8-2-Promise"><a href="#8-2-Promise" class="headerlink" title="8.2 Promise"></a>8.2 Promise</h4><p>关于这一块儿没什么好说的，最好是实现一遍 Promise A+ 规范，多少有点印象，当然面试官也不会叫你默写一个完整的出来，但是你起码要知道实现原理。</p><blockquote><p>关于 Promise 的所有使用方式，可参照这篇文章：<a href="https://link.juejin.cn?target=https%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fpromise" title="https://es6.ruanyifeng.com/#docs/promise">ECMAScript 6 入门 - Promise 对象</a>。<br>手写 Promise 源码的解析文章，可阅读此篇文章：<a href="https://juejin.cn/post/6945319439772434469#heading-0" target="_blank" rel="noopener" title="https://juejin.cn/post/6945319439772434469#heading-0">从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节</a>。<br>关于 Promise 的面试题，可参考这篇文章：<a href="https://juejin.cn/post/6844904077537574919" target="_blank" rel="noopener" title="https://juejin.cn/post/6844904077537574919">要就来 45 道 Promise 面试题一次爽到底</a>。</p></blockquote><p>实现一个 Promise.all：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数可以不是数组，但必须具有 Iterator 接口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="built_in">Symbol</span>.iterator] !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      reject(<span class="string">"Type error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (promises.length === <span class="number">0</span>) &#123;</span><br><span class="line">      resolve([]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> len = promises.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//考虑到 promises[i] 可能是 thenable 对象也可能是普通值</span></span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promises[i])</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            res[i] = data;</span><br><span class="line">            <span class="keyword">if</span> (++count === len) &#123;</span><br><span class="line">              resolve(res);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="8-3-async-await-和-Promise-的关系"><a href="#8-3-async-await-和-Promise-的关系" class="headerlink" title="8.3 async/await 和 Promise 的关系"></a>8.3 async/await 和 Promise 的关系</h4><ul><li>async/await 是消灭异步回调的终极武器。</li><li>但和 Promise 并不互斥，反而，两者相辅相成。</li><li>执行 async 函数，返回的一定是 Promise 对象。</li><li>await 相当于 Promise 的 then。</li><li>tru…catch 可捕获异常，代替了 Promise 的 catch。</li></ul><h3 id="9、-浏览器的垃圾回收机制"><a href="#9、-浏览器的垃圾回收机制" class="headerlink" title="9、 浏览器的垃圾回收机制"></a>9、 浏览器的垃圾回收机制</h3><p>这里看这篇文章即可：<a href="https://juejin.cn/post/6981588276356317214" target="_blank" rel="noopener" title="https://juejin.cn/post/6981588276356317214">「硬核 JS」你真的了解垃圾回收机制吗</a>。</p><p>总结一下：</p><p>有两种垃圾回收策略：</p><ul><li><strong>标记清除</strong> ：标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁。</li><li><strong>引用计数</strong> ：它把<strong>对象是否不再需要</strong>简化定义为 <strong>对象有没有其他对象引用到它</strong> 。如果没有引用指向该对象（引用计数为 0），对象将被垃圾回收机制回收。</li></ul><p>标记清除的缺点：</p><ul><li><strong>内存碎片化</strong> ，空闲内存块是不连续的，容易出现很多空闲内存块，还可能会出现分配所需内存过大的对象时找不到合适的块。</li><li><strong>分配速度慢</strong> ，因为即便是使用 First-fit 策略，其操作仍是一个 O(n) 的操作，最坏情况是每次都要遍历到最后，同时因为碎片化，大对象的分配效率会更慢。</li></ul><p>解决以上的缺点可以使用 *<em>标记整理（Mark-Compact）算法 *</em>，标记结束后，标记整理算法会将活着的对象（即不需要清理的对象）向内存的一端移动，最后清理掉边界的内存（如下图）<br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb543f2fdc634e29add495b8f2ff048f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>引用计数的缺点：</p><ul><li>需要一个计数器，所占内存空间大，因为我们也不知道被引用数量的上限。</li><li>解决不了循环引用导致的无法回收问题。</li></ul><p>V8 的垃圾回收机制也是基于标记清除算法，不过对其做了一些优化。</p><ul><li>针对新生区采用并行回收。</li><li>针对老生区采用增量标记与惰性回收。</li></ul><h3 id="10、-实现一个-EventMitter-类"><a href="#10、-实现一个-EventMitter-类" class="headerlink" title="10、 实现一个 EventMitter 类"></a>10、 实现一个 EventMitter 类</h3><p>EventMitter 就是发布订阅模式的典型应用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> EventEmitter &#123;</span><br><span class="line">  <span class="keyword">private</span> _events: Record&lt;<span class="built_in">string</span>, <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(evt: <span class="built_in">string</span>, ...args: <span class="built_in">any</span>[]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evt]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fns = [...this._events[evt]];</span><br><span class="line">    fns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(evt: <span class="built_in">string</span>, fn: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"The evet-triggered callback must be a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evt]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._events[evt] = [fn];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._events[evt].push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  once(evt: <span class="built_in">string</span>, fn: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> execFn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.off(evt, execFn);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.on(evt, execFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(evt: <span class="built_in">string</span>, fn?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evt]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      <span class="keyword">this</span>._events[evt] &amp;&amp; (<span class="keyword">this</span>._events[evt].length = <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cb;</span><br><span class="line">    <span class="keyword">const</span> cbLen = <span class="keyword">this</span>._events[evt].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbLen; i++) &#123;</span><br><span class="line">      cb = <span class="keyword">this</span>._events[evt][i];</span><br><span class="line">      <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._events[evt].splice(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeAllListeners(evt?: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (evt) &#123;</span><br><span class="line">      <span class="keyword">this</span>._events[evt] &amp;&amp; (<span class="keyword">this</span>._events[evt].length = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、web-存储"><a href="#四、web-存储" class="headerlink" title="四、web 存储"></a>四、web 存储</h2><p>要掌握 cookie，localStorage 和 sessionStorage。</p><h3 id="1、cookie"><a href="#1、cookie" class="headerlink" title="1、cookie"></a>1、cookie</h3><ul><li>本身用于浏览器和 server 通讯。</li><li>被“借用”到本地存储来的。</li><li>可用 document.cookie = ‘…’ 来修改。</li></ul><p>其缺点：</p><ul><li>存储大小限制为 4KB。</li><li>http 请求时需要发送到服务端，增加请求数量。</li><li>只能用 document.cookie = ‘…’ 来修改，太过简陋。</li></ul><h3 id="2、localStorage-和-sessionStorage"><a href="#2、localStorage-和-sessionStorage" class="headerlink" title="2、localStorage 和 sessionStorage"></a>2、localStorage 和 sessionStorage</h3><ul><li>HTML5 专门为存储来设计的，最大可存 5M。</li><li>API 简单易用， setItem getItem。</li><li>不会随着 http 请求被发送到服务端。</li></ul><p>它们的区别：</p><ul><li>localStorage 数据会永久存储，除非代码删除或手动删除。</li><li>sessionStorage 数据只存在于当前会话，浏览器关闭则清空。</li><li>一般用 localStorage 会多一些。</li></ul><h2 id="五、Http"><a href="#五、Http" class="headerlink" title="五、Http"></a>五、Http</h2><p>前端工程师做出网页，需要通过网络请求向后端获取数据，因此 http 协议是前端面试的必考内容。</p><h3 id="1、http-状态码"><a href="#1、http-状态码" class="headerlink" title="1、http 状态码"></a>1、http 状态码</h3><h4 id="1-1-状态码分类"><a href="#1-1-状态码分类" class="headerlink" title="1.1 状态码分类"></a>1.1 状态码分类</h4><ul><li>1xx - 服务器收到请求。</li><li>2xx - 请求成功，如 200。</li><li>3xx - 重定向，如 302。</li><li>4xx - 客户端错误，如 404。</li><li>5xx - 服务端错误，如 500。</li></ul><h4 id="1-2-常见状态码"><a href="#1-2-常见状态码" class="headerlink" title="1.2 常见状态码"></a>1.2 常见状态码</h4><ul><li>200 - 成功。</li><li>301 - 永久重定向（配合 location，浏览器自动处理）。</li><li>302 - 临时重定向（配合 location，浏览器自动处理）。</li><li>304 - 资源未被修改。</li><li>403 - 没权限。</li><li>404 - 资源未找到。</li><li>500 - 服务器错误。</li><li>504 - 网关超时。</li></ul><h4 id="1-3-关于协议和规范"><a href="#1-3-关于协议和规范" class="headerlink" title="1.3 关于协议和规范"></a>1.3 关于协议和规范</h4><ul><li>状态码都是约定出来的。</li><li>要求大家都跟着执行。</li><li>不要违反规范，例如 IE 浏览器。</li></ul><h3 id="2、http-缓存"><a href="#2、http-缓存" class="headerlink" title="2、http 缓存"></a>2、http 缓存</h3><ul><li>关于缓存的介绍。</li><li>http 缓存策略（强制缓存 + 协商缓存）。</li><li>刷新操作方式，对缓存的影响。</li></ul><h4 id="4-1-关于缓存"><a href="#4-1-关于缓存" class="headerlink" title="4.1 关于缓存"></a>4.1 关于缓存</h4><p>什么是缓存？<br>把一些不需要重新获取的内容再重新获取一次</p><p>为什么需要缓存？<br>网络请求相比于 CPU 的计算和页面渲染是非常非常慢的。</p><p>哪些资源可以被缓存？<br>静态资源，比如 js css img。</p><h4 id="4-2-强制缓存"><a href="#4-2-强制缓存" class="headerlink" title="4.2 强制缓存"></a>4.2 强制缓存</h4><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ff1ec224244427ba9f15abecbd668fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 1.png"></p><p>Cache-Control：</p><ul><li>在 Response Headers 中。</li><li>控制强制缓存的逻辑。</li><li>例如 Cache-Control: max-age=3153600（单位是秒）</li></ul><p>Cache-Control 有哪些值：</p><ul><li>max-age：缓存最大过期时间。</li><li>no-cache：可以在客户端存储资源，每次都必须去服务端做新鲜度校验，来决定从服务端获取新的资源（200）还是使用客户端缓存（304）。</li><li>no-store：永远都不要在客户端存储资源，永远都去原始服务器去获取资源。</li></ul><h4 id="4-3-协商缓存（对比缓存）"><a href="#4-3-协商缓存（对比缓存）" class="headerlink" title="4.3 协商缓存（对比缓存）"></a>4.3 协商缓存（对比缓存）</h4><ul><li>服务端缓存策略。</li><li>服务端判断客户端资源，是否和服务端资源一样。</li><li>一致则返回 304，否则返回 200 和最新的资源。</li></ul><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e265f46c80430fbf4673878a27bfc9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 2.png"><br>资源标识：</p><ul><li>在 Response Headers 中，有两种。</li><li>Last-Modified：资源的最后修改时间。</li><li>Etag：资源的唯一标识（一个字符串，类似于人类的指纹）。</li></ul><p><strong>Last-Modified：</strong><br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c4f44afeb73464295e9878d2c47b024~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 3.png"><br>服务端拿到 if-Modified-Since 之后拿这个时间去和服务端资源最后修改时间做比较，如果一致则返回 304<br>，不一致（也就是资源已经更新了）就返回 200 和新的资源及新的 Last-Modified。</p><p><strong>Etag：</strong><br><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e35285a8d23a4a4380676aeb681e815d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 4.png"><br>其实 Etag 和 Last-Modified 一样的，只不过 Etag 是服务端对资源按照一定方式（比如 contenthash）计算出来的唯一标识，就像人类指纹一样，传给客户端之后，客户端再传过来时候，服务端会将其与现在的资源计算出来的唯一标识做比较，一致则返回 304，不一致就返回 200 和新的资源及新的 Etag。</p><p><strong>两者比较：</strong></p><ul><li>优先使用 Etag。</li><li>Last-Modified 只能精确到秒级。</li><li>如果资源被重复生成，而内容不变，则 Etag 更精确。</li></ul><h4 id="4-4-综述"><a href="#4-4-综述" class="headerlink" title="4.4 综述"></a>4.4 综述</h4><p><img src= "/img/loading.gif" data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b74c746d1459403382fd0bbc1d96aeca~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片 5.png"></p><h4 id="4-4-三种刷新操作对-http-缓存的影响"><a href="#4-4-三种刷新操作对-http-缓存的影响" class="headerlink" title="4.4 三种刷新操作对 http 缓存的影响"></a>4.4 三种刷新操作对 http 缓存的影响</h4><ul><li>正常操作：地址栏输入 url，跳转链接，前进后退等。</li><li>手动刷新：f5，点击刷新按钮，右键菜单刷新。</li><li>强制刷新：ctrl + f5，shift+command+r。</li></ul><p><strong>正常操作：强制缓存有效，协商缓存有效。</strong><br><strong>手动刷新：强制缓存失效，协商缓存有效。</strong><br><strong>强制刷新：强制缓存失效，协商缓存失效。</strong></p><h3 id="3-面试"><a href="#3-面试" class="headerlink" title="3. 面试"></a>3. 面试</h3><p> <strong>对于更多面试中可能出现的问题，我还是建议精读这篇三元的文章：</strong> <a href="https://juejin.cn/post/6844904100035821575" target="_blank" rel="noopener" title="https://juejin.cn/post/6844904100035821575">HTTP 灵魂之问，巩固你的 HTTP 知识体系</a>。</p><p>比如会被经常问到的：<br>GET 和 POST 的区别。</p><ul><li>从<strong>缓存</strong>的角度，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。</li><li>从<strong>编码</strong>的角度，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。</li><li>从<strong>参数</strong>的角度，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。</li><li>从<strong>幂等性</strong>的角度，GET 是幂等的，而 POST 不是。(幂等表示执行相同的操作，结果也是相同的)</li><li>从 <strong>TCP</strong> 的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。(火狐浏览器除外，它的 POST 请求只发一个 TCP 包)</li></ul><p>HTTP/2 有哪些改进？（很大可能问原理）</p><ul><li>头部压缩。</li><li>多路复用。</li><li>服务器推送。</li></ul><p>关于 HTTPS 的一些原理，可以阅读这篇文章：<a href="https://juejin.cn/post/6844904038509576199" target="_blank" rel="noopener" title="https://juejin.cn/post/6844904038509576199">这一次，彻底理解 https 原理</a>。接着你可以观看这个视频进行更进一步的学习：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1XL411b7KZ%3Fp%3D1" title="https://www.bilibili.com/video/BV1XL411b7KZ?p=1">HTTPS 底层原理，面试官直接下跪，唱征服！</a></p><p>关于<strong>跨域</strong>问题，大部分文章都是理论性比较强，还不如读这篇文章，<a href="https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F149734572%3Ffrom_voters_page%3Dtrue" title="https://zhuanlan.zhihu.com/p/149734572?from_voters_page=true">聊聊跨域的原理与解决方法</a>，讲的非常清晰，我个人觉得对付面试就是先知道使用流程，把这个流程能自己说出来，然后再讲下原理即可。</p><h2 id="六、vue相关"><a href="#六、vue相关" class="headerlink" title="六、vue相关"></a>六、vue相关</h2><p><a href="https://juejin.cn/post/6919373017218809864" target="_blank" rel="noopener">高频前端面试题汇总之Vue篇（上）</a></p><p><a href="https://juejin.cn/post/6964779204462247950/" target="_blank" rel="noopener">高频前端面试题汇总之Vue篇（下）</a></p><h2 id="七、webpack"><a href="#七、webpack" class="headerlink" title="七、webpack"></a>七、webpack</h2><p>原理初探：<a href="https://juejin.cn/post/6943468761575849992" target="_blank" rel="noopener" title="https://juejin.cn/post/6943468761575849992">当面试官问 Webpack 的时候他想知道什么</a></p><p>简易实现：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FCosen95%2Fblog%2Fissues%2F48" title="https://github.com/Cosen95/blog/issues/48">面试官：webpack 原理都不会</a>，<a href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000039231950" title="https://segmentfault.com/a/1190000039231950">手写一个 webpack，看看 AST 怎么用</a></p><p>加料：<a href="https://juejin.cn/post/6844903520378814471" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903520378814471">简单易懂的 webpack 打包后 JS 的运行过程</a>，<a href="https://juejin.cn/post/6888936770692448270" target="_blank" rel="noopener" title="https://juejin.cn/post/6888936770692448270">Webpack 手写 loader 和 plugin</a></p><p>热更新原理：<a href="https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F30669007" title="https://zhuanlan.zhihu.com/p/30669007">Webpack HMR 原理解析</a></p><p>面试题：<a href="https://juejin.cn/post/6844904094281236487" target="_blank" rel="noopener" title="https://juejin.cn/post/6844904094281236487">「吐血整理」再来一打 Webpack 面试题</a></p><p><strong>这里要注意，应该还会考 webpack5 和 4 有哪些区别。</strong></p><h2 id="八、模块化"><a href="#八、模块化" class="headerlink" title="八、模块化"></a>八、模块化</h2><p><a href="https://juejin.cn/post/6844903744518389768" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903744518389768">前端模块化详解(完整版)</a> （这里面没有讲 umd）</p><p><a href="https://juejin.cn/post/6844903927104667662" target="_blank" rel="noopener" title="https://juejin.cn/post/6844903927104667662">可能是最详细的 UMD 模块入门指南</a></p><h2 id="九、性能优化"><a href="#九、性能优化" class="headerlink" title="九、性能优化"></a>九、性能优化</h2><p>代码层面：</p><ul><li>防抖和节流（resize，scroll，input）。</li><li>减少回流（重排）和重绘。</li><li>事件委托。</li><li>css 放 ，js 脚本放  最底部。</li><li>减少 DOM 操作。</li><li>按需加载，比如 React 中使用 <code>React.lazy</code> 和 <code>React.Suspense</code> ，通常需要与 webpack 中的 <code>splitChunks</code> 配合。</li></ul><p>构建方面：</p><ul><li><strong>压缩代码文件</strong> ，在 webpack 中使用 <code>terser-webpack-plugin</code> 压缩 Javascript 代码；使用 <code>css-minimizer-webpack-plugin</code> 压缩 CSS 代码；使用 <code>html-webpack-plugin</code> 压缩 html 代码。</li><li><strong>开启 gzip 压缩</strong> ，webpack 中使用 <code>compression-webpack-plugin</code> ，node 作为服务器也要开启，使用 <code>compression</code>。</li><li><strong>常用的第三方库使用 CDN 服务</strong> ，在 webpack 中我们要配置 externals，将比如 React， Vue 这种包不打倒最终生成的文件中。而是采用 CDN 服务。</li></ul><p>其它：</p><ul><li>使用 http2。因为解析速度快，头部压缩，多路复用，服务器推送静态资源。</li><li>使用服务端渲染。</li><li>图片压缩。</li><li>使用 http 缓存，比如服务端的响应中添加 <code>Cache-Control / Expires</code> 。</li></ul><h2 id="十、常见手写"><a href="#十、常见手写" class="headerlink" title="十、常见手写"></a>十、常见手写</h2><p>以下的内容是上面没有提到的手写，比如 <code>new</code> 、<code>Promise.all</code> 这种上面内容中已经提到了如何写。</p><h3 id="1、防抖"><a href="#1、防抖" class="headerlink" title="1、防抖"></a>1、防抖</h3><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F22" title="https://github.com/mqyqingfeng/Blog/issues/22">JavaScript 专题之跟着 underscore 学防抖 </a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callNow = !timeout;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h3><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F26" title="https://github.com/mqyqingfeng/Blog/issues/26">JavaScript 专题之跟着 underscore 学节流</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> preTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nowTime - preTime &gt; wait) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      preTime = nowTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、快速排序"><a href="#3、快速排序" class="headerlink" title="3、快速排序"></a>3、快速排序</h3><p>这里对快排思想不太明白的同学可以看下这个讲解的很清晰的视频：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1at411T75o%3Ffrom%3Dsearch%26seid%3D10065750342799523965%26spm_id_from%3D333.337.0.0" title="https://www.bilibili.com/video/BV1at411T75o?from=search&amp;seid=10065750342799523965&amp;spm_id_from=333.337.0.0">快速排序算法</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  quickSort(<span class="number">0</span>, nums.length - <span class="number">1</span>, nums);</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">start, end, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = sort(start, end, arr);</span><br><span class="line">    quickSort(start, mid - <span class="number">1</span>, arr);</span><br><span class="line">    quickSort(mid + <span class="number">1</span>, end, arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">start, end, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> base = arr[start];</span><br><span class="line">  <span class="keyword">let</span> left = start;</span><br><span class="line">  <span class="keyword">let</span> right = end;</span><br><span class="line">  <span class="keyword">while</span> (left !== right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr[right] &gt;= base &amp;&amp; right &gt; left) &#123;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[left] = arr[right];</span><br><span class="line">    <span class="keyword">while</span> (arr[left] &lt;= base &amp;&amp; right &gt; left) &#123;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[right] = arr[left];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[left] = base;</span><br><span class="line">  <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、instanceof"><a href="#4、instanceof" class="headerlink" title="4、instanceof"></a>4、instanceof</h3><p>这个手写一定要懂原型及原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">target, origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> || target === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> origin !== <span class="string">"function"</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"origin must be function"</span>);</span><br><span class="line">  <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(target); <span class="comment">// 相当于 proto = target.__proto__;</span></span><br><span class="line">  <span class="keyword">while</span> (proto) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === origin.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、数组扁平化"><a href="#5、数组扁平化" class="headerlink" title="5、数组扁平化"></a>5、数组扁平化</h3><p>重点，不要觉得用不到就不管，这道题就是考察你对 js 语法的熟练程度以及手写代码的基本能力。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr, depth = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 以下代码还可以简化，不过为了可读性，还是....</span></span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> pre.concat(<span class="built_in">Array</span>.isArray(cur) ? flat(cur, depth - <span class="number">1</span>) : cur);</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.slice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、手写-reduce"><a href="#6、手写-reduce" class="headerlink" title="6、手写 reduce"></a>6、手写 reduce</h3><p>先不考虑第二个参数初始值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">this</span>; <span class="comment">//this就是调用reduce方法的数组</span></span><br><span class="line">  <span class="keyword">let</span> total = arr[<span class="number">0</span>]; <span class="comment">// 默认为数组的第一项</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    total = cb(total, arr[i], i, arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>考虑上初始值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span> (<span class="params">cb, initialValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> total = initialValue || arr[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 有初始值的话从0遍历，否则从1遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = initialValue ? <span class="number">0</span> : <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    total = cb(total, arr[i], i, arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7、带并发的异步调度器-Scheduler"><a href="#7、带并发的异步调度器-Scheduler" class="headerlink" title="7、带并发的异步调度器 Scheduler"></a>7、带并发的异步调度器 Scheduler</h3><p>JS 实现一个带并发限制的异度调度器 Scheduler，保证同时运行的任务最多有两个。完善下面代码中的 Scheduler 类，使得以下程序能正确输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">  add(promiseMaker) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function">(<span class="params">time</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> Scheduler();</span><br><span class="line"><span class="keyword">const</span> addTask = <span class="function">(<span class="params">time, order</span>) =&gt;</span> &#123;</span><br><span class="line">  scheduler.add(<span class="function"><span class="params">()</span> =&gt;</span> timeout(time).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(order)));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addTask(<span class="number">1000</span>, <span class="string">"1"</span>);</span><br><span class="line">addTask(<span class="number">500</span>, <span class="string">"2"</span>);</span><br><span class="line">addTask(<span class="number">300</span>, <span class="string">"3"</span>);</span><br><span class="line">addTask(<span class="number">400</span>, <span class="string">"4"</span>);</span><br><span class="line"><span class="comment">// output：2 3 1 4</span></span><br><span class="line"><span class="comment">// 一开始，1，2两个任务进入队列。</span></span><br><span class="line"><span class="comment">// 500ms 时，2完成，输出2，任务3入队。</span></span><br><span class="line"><span class="comment">// 800ms 时，3完成，输出3，任务4入队。</span></span><br><span class="line"><span class="comment">// 1000ms 时，1完成，输出1。</span></span><br></pre></td></tr></table></figure><p>根据题目，我们只需要操作 <code>Scheduler</code> 类就行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.waitTasks = []; <span class="comment">// 待执行的任务队列</span></span><br><span class="line">    <span class="keyword">this</span>.excutingTasks = []; <span class="comment">// 正在执行的任务队列</span></span><br><span class="line">    <span class="keyword">this</span>.maxExcutingNum = <span class="number">2</span>; <span class="comment">// 允许同时运行的任务数量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(promiseMaker) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.excutingTasks.length &lt; <span class="keyword">this</span>.maxExcutingNum) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run(promiseMaker);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.waitTasks.push(promiseMaker);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run(promiseMaker) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.excutingTasks.push(promiseMaker);</span><br><span class="line">    <span class="keyword">const</span> index = len - <span class="number">1</span>;</span><br><span class="line">    promiseMaker().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.excutingTasks.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.waitTasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.run(<span class="keyword">this</span>.waitTasks.shift());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、去重"><a href="#8、去重" class="headerlink" title="8、去重"></a>8、去重</h3><ul><li>利用 ES6 <code>set</code> 关键字：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用 ES5 <code>filter</code> 方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、其它"><a href="#十一、其它" class="headerlink" title="十一、其它"></a>十一、其它</h2><ol><li>requestAnimationFrame（<a href="https://juejin.cn/post/6991297852462858277" target="_blank" rel="noopener" title="https://juejin.cn/post/6991297852462858277">一个神奇的前端动画 API requestAnimationFrame</a>）</li><li>如何排查内存泄漏问题，面试官可能会问为什么页面越来越卡顿，直至卡死，怎么定位到产生这种现象的源代码（开发环境）？（<a href="https://juejin.cn/post/6947841638118998029" target="_blank" rel="noopener" title="https://juejin.cn/post/6947841638118998029">一文带你了解如何排查内存泄漏导致的页面卡顿现象</a>）</li><li>vite 大火，我复习的时候是去年 9 月份，还没那么火，可能现在的你需要学一学了～</li><li>vue3 也一样，如果你是 React 技术栈（就像我之前一样）当我没说。</li></ol><h2 id="十二、算法"><a href="#十二、算法" class="headerlink" title="十二、算法"></a>十二、算法</h2><p>这部分大家可以点击以下这个仓库，按照仓库中的题目顺序进行刷题，都是我亲自刷过的，排了最适合的顺序：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvortesnail%2Fleetcode" title="https://github.com/vortesnail/leetcode">vortesnail/leetcode</a>。</p><p>然后如果大家想看下大厂的算法高频题可以看这个仓库：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fafatcoder%2FLeetcodeTop" title="https://github.com/afatcoder/LeetcodeTop">afatcoder/LeetcodeTop</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
            <tag> JavaScrip </tag>
            
            <tag> Html </tag>
            
            <tag> 面试 </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现优化UI体验效果</title>
      <link href="posts/6962/"/>
      <url>posts/6962/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS实现中部div滚动"><a href="#CSS实现中部div滚动" class="headerlink" title="CSS实现中部div滚动"></a>CSS实现中部div滚动</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.top &#123;xxx&#125;</span><br><span class="line">//这里的外部content高度小于内部content2内容高度时触发滚动</span><br><span class="line"><span class="selector-class">.content1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">  flex: <span class="number">1</span></span><br><span class="line">  height: <span class="number">200px</span></span><br><span class="line">  .content2 &#123;</span><br><span class="line">    flex: <span class="number">1</span></span><br><span class="line">    overflow：auto</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;xxx&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS实现中部滚动，底部操作栏随窗口移动"><a href="#CSS实现中部滚动，底部操作栏随窗口移动" class="headerlink" title="CSS实现中部滚动，底部操作栏随窗口移动"></a>CSS实现中部滚动，底部操作栏随窗口移动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="sass" scoped&gt;</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tip</span>&#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.test-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    .test-top &#123;</span><br><span class="line">      <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> 0 16<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.test-content</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">150px</span>);</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#E0E0E0</span>;</span><br><span class="line">      .content &#123;</span><br><span class="line">        <span class="selector-tag">flex</span>: 1;</span><br><span class="line">        <span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.footer</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#E0E0E0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp基础语法</title>
      <link href="posts/59605/"/>
      <url>posts/59605/</url>
      
        <content type="html"><![CDATA[<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>创建正则表达式对象时，可以设置’m’、’i’、’g’这三个标志，分别对应多行模式、不区分大小模式和全局模式三种</p><p>全局模式 g:<br>默认地，第一次匹配成功后，正则对象就停止向下匹配了。g 修饰符表示全局匹配(global)，设置’g’标志后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2a,3a&#39;</span><br><span class="line">console.log(&#39;1a,2a,3a&#39;.replace(&#x2F;a&#x2F;g,&#39;b&#39;));&#x2F;&#x2F;&#39;1b,2b,3b&#39;</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>特点：javascript 中的正则表达式最大的特点是不支持空白，必须写在一行中</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配ab</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ ab/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a b/</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab /</span>.test(<span class="string">"ab"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">元字符         名称              匹配对象</span><br><span class="line">.             点号               单个任意字符(除回车\r、换行\n、行分隔符\u2028和段分隔符\u2029外)</span><br><span class="line">[]            字符组             列出的单个任意字符</span><br><span class="line">[^]           排除型字符组        未列出的单个任意字符</span><br><span class="line">?             问号               匹配<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">*             星号               匹配<span class="number">0</span>交或多次</span><br><span class="line">+             加号               匹配<span class="number">1</span>次或多次</span><br><span class="line">&#123;min,max&#125;     区间量词            匹配至少min次，最多max次</span><br><span class="line">^             脱字符             行的起始位置</span><br><span class="line">$             美元符             行的结束位置</span><br><span class="line">|             竖线               分隔两边的任意一个表达式</span><br><span class="line">()            括号               限制多选结构的范围，标注量词作用的元素，为反向引用捕获文本</span><br><span class="line">\<span class="number">1</span>,\<span class="number">2.</span>..      反向引用            匹配之前的第一、第二...组括号内的表达式匹配的文本</span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li>【1】因为元字符有特殊的含义，所以无法直接匹配。如果要匹配它们本身，则需要在它们前面加上反斜杠()</li></ul><div class="note info flat">            <p>右方括号]和右花括号}不需要转义</p>          </div><ul><li>【2】’&#39;加非元字符，表示一些不能打印的特殊字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span>        NUL字符\u0000</span><br><span class="line">[\b]      匹配退格符\u0008，不要与\b混淆</span><br><span class="line">\t        制表符\u0009</span><br><span class="line">\n        换行符\u000A</span><br><span class="line">\v        垂直制表符\u000B</span><br><span class="line">\f        换页符\u000C</span><br><span class="line">\r        回车符\u000D</span><br><span class="line">\xnn      由十六进制数nn指定的拉丁字符</span><br><span class="line">\uxxxx    由十六进制数xxxx指定的Unicode字符(\u4e00-\u9fa5代表中文)</span><br><span class="line">\cX       控制字符^X，表示ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符</span><br></pre></td></tr></table></figure><div class="note info flat">            <p>‘&#39;加任意其他字符，默认情况就是匹配此字符，也就是说，反斜线()被忽略了</p>          </div><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><ul><li>范围</li></ul><p>正则表达式通过连字符(-)提供了范围表示法，可以简化字符组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/[<span class="number">0123456789</span>]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[<span class="number">0</span><span class="number">-9</span>]/</span><br><span class="line">/[abcdefghijklmnopqrstuvwxyz]/</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">/[a-z]/</span><br></pre></td></tr></table></figure><ul><li>排除</li></ul><p>字符组的另一个类型是排除型字符组，在左方括号后紧跟一个脱字符’^’表示，表示在当前位置匹配一个没有列出的字符，所以[^0-9]表示 0-9 以外的字符</p><div class="note info flat">            <p>在字符组内部，脱字符’^’表示排除，而在字符组外部，脱字符’^’表示一个行锚点</p>          </div><div class="note info flat">            <p>^符号是元字符，在字符组中只要^符号不挨着左方括号就可以表示其本身含义，不转义也可以</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配abc和^符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-c\^]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[\^a-c]/</span>.test(<span class="string">"^"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>简记</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\d     数字，等同于[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\D     非数字，等同于[^<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">\s     空白字符，等同于[\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\S     非空白字符，等同于[^\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</span><br><span class="line">\w     字母、数字、下划线，等同于[<span class="number">0</span><span class="number">-9</span>A-Za-z_](汉字不属于\w)</span><br><span class="line">\W     非字母、数字、下划线，等同于[^<span class="number">0</span><span class="number">-9</span>A-Za-z_]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，量词都是贪婪模式(greedy quantifier)，即匹配到下一个字符不满足匹配规则为止</span></span><br><span class="line">&#123;n&#125;       匹配n次</span><br><span class="line">&#123;n,m&#125;     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;      匹配至少n次</span><br><span class="line">?         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><p>懒惰模式(lazy quantifier)和贪婪模式相对应，在量词后加问号’?’表示，表示尽可能少的匹配，一旦条件满足就再不往下匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125;?       匹配n次</span><br><span class="line">&#123;n,m&#125;?     匹配至少n次，最多m次</span><br><span class="line">&#123;n,&#125;?      匹配至少n次</span><br><span class="line">??         相当于&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*?         相当于&#123;<span class="number">0</span>,&#125;</span><br><span class="line">+?         相当于&#123;<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>括号有两个功能，分别是分组和引用。具体而言，用于限定量词或选择项的作用范围，也可以用于捕获文本并进行引用或反向引用</p><ul><li>分组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希望字符串'ab'重复出现2次，应该写为(ab)&#123;2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(ab)&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abab"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/ab&#123;2&#125;/</span>.test(<span class="string">"abb"</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//身份证长度有15位和18位两种</span></span><br><span class="line">/\d&#123;<span class="number">15</span>&#125;(\d&#123;<span class="number">3</span>&#125;)?<span class="regexp">/;</span></span><br></pre></td></tr></table></figure><ul><li>捕获</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RegExp.$1\RegExp.$2\RegExp.$3……到RegExp.$9分别用于存储第一、第二……第九个匹配的捕获组。在调用exec()或test()方法时，这些属性会被自动填充</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>.test(<span class="string">"2016-06-23"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//'2016'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//'06'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//'23'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">4</span>); <span class="comment">//''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在replace()方法中也可以引用分组，形式是$num，num是对应分组的编号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2000-01-01"</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>, <span class="string">"$3-$2-$1"</span>)); <span class="comment">//'01-01-2000'</span></span><br></pre></td></tr></table></figure><ul><li>反向引用<br>反向引用允许在正则表达式内部引用之前捕获分组匹配的文本，形式是\num，num 表示所引用分组的编号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始标签</span></span><br><span class="line">&lt;([^&gt;]+)&gt;</span><br><span class="line"><span class="comment">//标签内容</span></span><br><span class="line">[\s\S]*?</span><br><span class="line"><span class="comment">//匹配成对的标签</span></span><br><span class="line">/&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">console.log(/</span>&lt;([^&gt;]+)&gt;[\s\S]*?<span class="xml"><span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span></span><span class="regexp">/.test('&lt;a&gt;123&lt;/</span>a&gt;<span class="string">'));//true</span></span><br><span class="line"><span class="string">console.log(/&lt;([^&gt;]+)&gt;[\s\S]*?&lt;\/\1&gt;/.test('</span>&lt;a&gt;<span class="number">123</span>&lt;<span class="regexp">/b&gt;'));/</span><span class="regexp">/false</span></span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开头</span></span><br><span class="line">(<span class="number">0</span>|\+<span class="number">86</span>)?</span><br><span class="line"><span class="comment">//前3位</span></span><br><span class="line"><span class="number">13</span>\d|<span class="number">14</span>[<span class="number">579</span>]|<span class="number">15</span>[<span class="number">0</span><span class="number">-35</span><span class="number">-9</span>]|<span class="number">17</span>[<span class="number">0135</span><span class="number">-8</span>]|<span class="number">18</span>\d</span><br><span class="line"><span class="comment">//后8位</span></span><br><span class="line">\d&#123;<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/(0|\+86)?(13\d|14[579]|15[0-35-9]|17[0135-8]|18\d)\d&#123;8&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'13453250661'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1913250661'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.test(<span class="string">'1345325061'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>在正则表达式中，有些结构并不真正匹配文本，而只负责判断在某个位置左/右侧是否符合要求，这种结构被称为断言(assertion)，也称为锚点(anchor)，常见的断言有 3 种：单词边界、行开头结尾、环视</p><ul><li>单词边界<br>正则表达式提供了专用的单词边界(word boundary)，记为\b，它匹配的是’单词边界’位置，而不是字符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an apple"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"a an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"an"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"and"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\ban\b/</span>.test(<span class="string">"ban"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li><p>起始结束<br>常见的断言还有^和$，它们分别匹配字符串的开始位置和结束位置，所以可以用来判断整个字符串能否由表达式匹配</p></li><li><p>环视<br>javascript 只支持正序环视，相当于只支持向前看，不支持往回看;而正序环视又分为肯定正序环视和否定正序环视<br>肯定正序环视的记法是(?=n)，表示前面必须是 n 才匹配；否定正序环视的记忆法是(?!n)，表示前面必须不是 n 才匹配</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?!b)/</span>.exec(<span class="string">"ac"</span>)); <span class="comment">//['a']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a(?=b)b/</span>.exec(<span class="string">"abc"</span>)); <span class="comment">//['ab']</span></span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从上到下，优先级逐渐降低</span></span><br><span class="line">\                            转义符</span><br><span class="line">() (?!) (?=) []              括号、字符组、环视</span><br><span class="line">* + ? &#123;n&#125; &#123;n,&#125; &#123;n,m&#125;         量词</span><br><span class="line">^ $                          起始结束位置</span><br><span class="line">|                            选择</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速抖动css</title>
      <link href="posts/16551/"/>
      <url>posts/16551/</url>
      
        <content type="html"><![CDATA[<h2 id="快速抖动css样式"><a href="#快速抖动css样式" class="headerlink" title="快速抖动css样式"></a>快速抖动css样式</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="comment">/* Standard syntax */</span></span><br><span class="line">  <span class="keyword">@keyframes</span> shake &#123;</span><br><span class="line">      10%, 90% &#123;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">1px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      20%, 80% &#123;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">2px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      30%, 50%, 70% &#123;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">4px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      40%, 60% &#123;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">4px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.apply-shake</span> &#123;</span><br><span class="line">      <span class="attribute">animation</span>: shake <span class="number">0.82s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">36</span>,.<span class="number">07</span>,.<span class="number">19</span>,.<span class="number">97</span>) both;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 特性集合</title>
      <link href="posts/56620/"/>
      <url>posts/56620/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue父子组件传值"><a href="#Vue父子组件传值" class="headerlink" title="Vue父子组件传值"></a>Vue父子组件传值</h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点杀鸡用牛刀。Vue 2.4 版本提供了另一种方法，使用 v-bind=”$attrs”, 将父组件中不被认为 props特性绑定的属性传入子组件中，通常配合 interitAttrs 选项一起使用。之所以要提到这两个属性，是因为两者的出现使得组件之间跨组件的通信在不依赖 vuex 和事件总线的情况下变得简洁，业务清晰。<br><a href="https://img.jbzj.com/file_images/article/201801/201818103314216.png?201808103342" target="_blank" rel="noopener"></a></p><ul><li><p>v-bind=”$props”<br>可以将父组件的所有props下发给它的子组件,子组件需要在其props:{} 中定义要接受的props。<br>vm.$props: 当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象属性的访问。</p></li><li><p>v-bind=”$attrs”<br>将调用组件时的组件标签上绑定的非props的特性(class和style除外)向下传递。在子组件中应当添加inheritAttrs: false(避免父作用域的不被认作props的特性绑定应用在子组件的根元素上)。</p></li><li><p>v-on=”$listeners”<br>将父组件标签上的自定义事件向下传递其子组件可以直接通过emit(eventName)的方式调用。</p></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>A组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">child1</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:p-child1</span>=<span class="string">"child1"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">:p-child2</span>=<span class="string">"child2"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:test1</span>=<span class="string">"onTest1"</span> //此处监听了两个事件，可以在<span class="attr">B</span>组件或者<span class="attr">C</span>组件中直接触发</span></span><br><span class="line"><span class="tag"> <span class="attr">v-on:test2</span>=<span class="string">"onTest2"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">child1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> Child1 <span class="keyword">from</span> <span class="string">'./Child1.vue'</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> components: &#123; Child1 &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line"> onTest1 () &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test1 running...'</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> onTest2 () &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test2 running'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>B组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>in child1:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>props: &#123;&#123;pChild1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>$attrs: &#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的） --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">child2</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span><span class="tag">&lt;/<span class="name">child2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> Child2 <span class="keyword">from</span> <span class="string">'./Child2.vue'</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> props: [<span class="string">'pChild1'</span>],</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> inheritAttrs: <span class="literal">false</span>,</span><br><span class="line"> components: &#123; Child2 &#125;,</span><br><span class="line"> mounted () &#123;</span><br><span class="line"> <span class="keyword">this</span>.$emit(<span class="string">'test1'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/结果</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ in child1:</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ props: v_child1</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $attrs: &#123; “p-child2”: “v_child2”&#125;</span></span><br></pre></td></tr></table></figure><p>C组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-2"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>in child2:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>props: &#123;&#123;pChild2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>$attrs: &#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> props: [<span class="string">'pChild2'</span>],</span><br><span class="line"> data () &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> inheritAttrs: <span class="literal">false</span>,</span><br><span class="line"> mounted () &#123;</span><br><span class="line"> <span class="keyword">this</span>.$emit(<span class="string">'test2'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/结果</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ in child2:</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ props: v_child2</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $attrs: &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vue-render"><a href="#Vue-render" class="headerlink" title="Vue render"></a>Vue render</h2><ul><li><a href="https://www.jianshu.com/p/0c9516a3be80" target="_blank" rel="noopener">点我了解render用法</a></li></ul><h2 id="Vue-代码比对插件"><a href="#Vue-代码比对插件" class="headerlink" title="Vue 代码比对插件"></a>Vue 代码比对插件</h2><ul><li><a href="https://codechina.csdn.net/mirrors/ddchef/vue-code-diff" target="_blank" rel="noopener">vue-code-diff</a></li></ul><h2 id="Vue异步更新Dom和-nextTick原理"><a href="#Vue异步更新Dom和-nextTick原理" class="headerlink" title="Vue异步更新Dom和$nextTick原理"></a>Vue异步更新Dom和$nextTick原理</h2><p>理论上，我们不应主动去操作DOM，因为Vue的核心思想就是数据驱动DOM，但在很多业务里，我们避免不了会操做一些DOM,这时我们就有可能用到$nextTick。</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><ul><li><a href="https://www.cnblogs.com/pleaseAnswer/p/13566987.html" target="_blank" rel="noopener">Vue异步更新Dom</a></li><li>$nextTick 的使用场景</li></ul><p>虽然 Vue 是数据驱动的，但是有时候我们不得不去操作 DOM 去处理一些特殊的场景，而 Vue 更新 DOM 是异步执行的，所以我们不得不去使用 $nextTick 去异步获取 DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'hello nextTick'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeMsg() &#123;</span><br><span class="line">      <span class="keyword">this</span>.msg = <span class="string">'hello world'</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg.innerHTML, <span class="string">'同步获取'</span>)</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.msg.innerHTML, <span class="string">'异步获取'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.changeMsg()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>得到的结果分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello nextTick 同步获取</span><br><span class="line">hello world 异步获取</span><br></pre></td></tr></table></figure><h2 id="Vue-click属性"><a href="#Vue-click属性" class="headerlink" title="Vue @click属性"></a>Vue @click属性</h2><ul><li><a href="https://blog.csdn.net/L_Sarah/article/details/109805756" target="_blank" rel="noopener">理解vue @click.native<del>.prevent</del>.stop<del>.self</del>.once</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue样式穿透 ::v-deep的具体使用</title>
      <link href="posts/15950/"/>
      <url>posts/15950/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍了vue样式穿透 ::v-deep的具体使用，即使目前项目大多使用组件库，但在项目中肯定也需要用额外的样式来打造自己的应用。直接在 <code>&lt;style lang=&quot;scss&quot; scoped&gt; .... &lt;/style&gt;</code> 中编写的话只会影响当前组件内的样式，但如果去掉scoped话又会影响全局样式。想了好多方法，都没得到很好的解决。</p><p>百度之后发现 可以用<code>/deep/</code>或<code>::v-deep</code>来解决（不过在vue3.0的环境下，使用/deep/时，编译会报错）。没想到官方文档中其实早就给出了解决方案，怪自己没有认真看过文档，对vue的掌握还是不够熟悉啊，得好好学习了。</p><h2 id="深度作用选择器"><a href="#深度作用选择器" class="headerlink" title="深度作用选择器"></a>深度作用选择器</h2><p>如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用<code>&gt;&gt;&gt;</code>操作符：<br><code>&lt;style scoped&gt; .a &gt;&gt;&gt; .b { /* ... */ } &lt;/style&gt;</code>上述代码将会编译成：<br><code>.a[data-v-f3f3eg9] .b { /* … */ }</code></p><p>有些像 Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。这种情况下你可以使用 <code>/deep/</code> 或 <code>::v-deep</code> 操作符取而代之——两者都是 <code>&gt;&gt;&gt;</code> 的别名，同样可以正常工作。</p><ul><li><p>1、&gt;&gt;&gt;<br>如果vue的style使用的是css，那么则</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="css" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span> &gt;&gt;&gt; <span class="selector-class">.b</span> &#123; </span><br><span class="line"> <span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>2、/deep/</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"> /deep/ .b &#123; </span><br><span class="line">  <span class="comment">/* ... */</span> </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>3、::v-deep(切记必须是双冒号)<br>但是有些开发者反应，在vue-cli3编译时，deep的方式会报错或者警告。此时我们可以使用第三种方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"> ::v-deep .b &#123; </span><br><span class="line">  <span class="comment">/* ... */</span> </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用场景:<br>当我们需要覆盖element-ui中的样式时只能通过深度作用选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">style为css时的写法如下</span><br><span class="line"></span><br><span class="line"> .a &gt;&gt;&gt; .b &#123;</span><br><span class="line">  ***</span><br><span class="line"> &#125;</span><br><span class="line">style使用css的预处理器(less, sass, scss)的写法如下,建议使用第二种方式,&#x2F;deep&#x2F;在某些时候会报错,::v-deep更保险并且编译速度更快.</span><br><span class="line">第一种&#x2F;deep&#x2F;</span><br><span class="line"></span><br><span class="line"> &#x2F;deep&#x2F; .a &#123;</span><br><span class="line">  ***</span><br><span class="line"> &#125;</span><br><span class="line">第二种::v-deep</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的常用工具推荐</title>
      <link href="posts/31626/"/>
      <url>posts/31626/</url>
      
        <content type="html"><![CDATA[<h2 id="Tortoigit"><a href="#Tortoigit" class="headerlink" title="Tortoigit"></a>Tortoigit</h2><h3 id="安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare"><a href="#安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare" class="headerlink" title="安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare"></a>安装与使用教程一大堆，这里只说一下将对比工具改成BeyondCompare</h3><ul><li><a href="https://www.cnblogs.com/anayigeren/p/10177027.html" target="_blank" rel="noopener">TortoiseGit 使用教程</a></li><li>在设置中找到差异查看器-&gt;外部-&gt;选择下载好的比较工具文件</li></ul><p>本人认为自带的比较不好用，所以使用外部的比较工具，按需引入</p><ul><li><a href="https://www.beyondcompare.cc/" target="_blank" rel="noopener">beyondcompare安装</a></li></ul><h2 id="GitKraken"><a href="#GitKraken" class="headerlink" title="GitKraken"></a>GitKraken</h2><p>直接下载这个版本的GitKraken，顺便附上了破解方法</p><ul><li><a href="https://pan.baidu.com/s/1B-Fvg4xsTR0V63IIx1hhOg" target="_blank" rel="noopener">GitKraken安装文件</a>提取码: 5p2p</li><li><a href="https://github.com/5cr1pt/GitCracken" target="_blank" rel="noopener">破解方法</a></li><li><a href="https://www.cnblogs.com/brifuture/category/1219605.html" target="_blank" rel="noopener">GitKraken快速上手使用教程</a></li></ul><h2 id="git配置时注意"><a href="#git配置时注意" class="headerlink" title="git配置时注意"></a>git配置时注意</h2><ul><li><p>git配置用户名邮箱和ssh后，需要再加入配置<code>git config --global  core.autocrlf=false</code>,避免因为符号格式导致代码在不同环境编译失败的问题</p></li><li><p>如果电脑上有两个环境需要在两种环境下都进行git基础配置以及同时在远程仓库提交两份生成的ssh公钥<code>ssh-keygen -t rsa</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css过渡(transition)</title>
      <link href="posts/24228/"/>
      <url>posts/24228/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>过渡 transition 是一个复合属性，包括 <code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code> 这四个子属性。通过这四个子属性的配合来完成一个完整的过渡效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: 过渡属性(默认值为<span class="selector-tag">all</span>)</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 过渡持续时间(默认值为0<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">transiton-timing-function</span>: 过渡函数(默认值为<span class="selector-tag">ease</span>函数)</span><br><span class="line"><span class="selector-tag">transition-delay</span>: 过渡延迟时间(默认值为0<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><ul><li>过渡 transition 的这四个子属性只有<code>&lt;transition-duration&gt;</code>是必需值且不能为 0。其中，<code>&lt;transition-duration&gt;</code>和<code>&lt;transition-delay&gt;</code>都是时间。当两个时间同时出现时，第一个是<code>&lt;transition-duration&gt;</code>，第二个是<code>&lt;transition-delay&gt;</code>；当只有一个时间时，它是<code>&lt;transition-duration&gt;</code>，而<code>&lt;transition-delay&gt;</code>为默认值 0</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition: &lt;transition-property&gt; || &lt;transition-duration&gt; ||</span><br><span class="line">  &lt;transition-timing-function&gt; || &lt;transition-delay&gt;;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test1</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: width, background, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>, <span class="number">500ms</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear, ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">200ms</span>, <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类似于*/</span></span><br><span class="line"><span class="selector-id">#test2</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> linear <span class="number">200ms</span>, background <span class="number">500ms</span> ease <span class="number">0s</span>,</span><br><span class="line">    opacity <span class="number">2s</span> linear <span class="number">200ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 250px;" src="https://demo.xiaohuochai.site/css/transition/t10.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css盒模型及布局</title>
      <link href="posts/17705/"/>
      <url>posts/17705/</url>
      
        <content type="html"><![CDATA[<h2 id="普通盒模型"><a href="#普通盒模型" class="headerlink" title="普通盒模型"></a>普通盒模型</h2><p>在 CSS 中盒模型被分为两种，第一种是 W3C 的标准模型，第二种是 IE 怪异盒模型。不同之处在于后者的宽高定义的是可见元素框的尺寸，而不是元素框的内容区尺寸。目前对于浏览器大多数元素都是基于 W3C 标准的盒模型，但对于表单<code>form</code>中的部分元素还是基于 IE 的怪异盒模型，如<code>input</code>里的<code>radio</code>、<code>checkbox</code>、<code>button</code>等元素，如果给其设置<code>border</code>和<code>padding</code>它们也只会往元素盒内延伸<br><img src= "/img/loading.gif" data-src="/CDN/post/1.png" alt=""><br>在 W3C 的标准模型下，宽度和高度仅仅包含了内容宽度，除去了边框和内边距两个区域，这样为 web 设计师处理效果带来了不少麻烦。为了解决这个问题，CSS3 新增了一个盒模型属性<code>box-sizing</code>，能够事先定义盒模型的尺寸解析方式</p><blockquote><p>box-sizing<br>   值: content-box | bordrer-box | padding-box | inherit<br>   初始值: content-box<br>   应用于: 块级元素和替换元素<br>   继承性: 无</p></blockquote><div class="note info flat">            <p>注意 1：只有 firefox 浏览器支持 padding-box 属性值</p>          </div><div class="note info flat">            <p>注意 2：IE 浏览器在 getComputedStyle 得到 width/height 是按照标准模式计算的，而不论 box-sizing 的取值</p>          </div><h2 id="弹性盒模型-flex"><a href="#弹性盒模型-flex" class="headerlink" title="弹性盒模型(flex)"></a>弹性盒模型(flex)</h2><p>要让一个元素变成伸缩容器，需要使用 display 属性。采用 flex 布局的元素，称为伸缩容器(flex container)，容器内的子元素称为伸缩项目(flex item)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;弹性盒模型: 块级伸缩容器 | 内联伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">display: flex | inline-flex;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/CDN/post/CSS_flex.png" alt=""><br>【1】伸缩流方向:指定主轴的方向(即伸缩项目在伸缩容器中的排列方向)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流方向: 水平方向 | 反向水平 | 垂直方向 | 反向垂直</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-direction: row[默认] | row-reverse | column | column-reverse</span><br></pre></td></tr></table></figure><p>【2】伸缩流换行:指定伸缩项目溢出伸缩容器时是否换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩行换行:不换行 | 换行 | 反转换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-wrap: nowrap[默认] | wrap | wrap-reverse</span><br></pre></td></tr></table></figure><p>【3】伸缩流:伸缩流方向与伸缩行换行的缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伸缩流: 伸缩流方向 | 伸缩行换行</span><br><span class="line">&#x2F;&#x2F;新版本同混合版本</span><br><span class="line">flex-flow: &lt;flex-direction&gt; | &lt;flex-wrap&gt;</span><br><span class="line">[默认值] flex-flow: row nowrap</span><br></pre></td></tr></table></figure><p>【4】主轴对齐:用来设置伸缩容器当前行伸缩项目在主轴方向的对齐方式，指定如何在伸缩项目之间分布伸缩容器额外空间;当一行上的所伸缩项目不能伸缩或可伸缩已达到最大长度时，这一属性才会对伸缩容器额外空间进行分配。当伸缩项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主轴对齐方式: 左对齐 | 居中对齐 | 右对齐 | 两端对齐 | 扩散对齐</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">justify-content: flex-start[默认] | center | flex-end | space-between | space-around</span><br></pre></td></tr></table></figure><p>【5】侧轴对齐:用来设置伸缩容器当前行在侧轴方向的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 基线对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-items: flex-start | center | flex-end | baseline | stretch[默认]</span><br></pre></td></tr></table></figure><p>【6】堆栈伸缩行:指定多个伸缩项目行在侧轴的对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;侧轴对齐方式: 顶边对齐 | 中间对齐 | 底部对齐 | 两端对齐 | 扩散对齐 | 伸缩项目拉伸填充整个伸缩容器</span><br><span class="line">&#x2F;&#x2F;新版本</span><br><span class="line">align-content: flex-start | center | flex-end | space-between | space-around | stretch[默认]</span><br></pre></td></tr></table></figure><h3 id="flex-兼容"><a href="#flex-兼容" class="headerlink" title="flex 兼容"></a>flex 兼容</h3><div class="note info flat">            <p>为适配旧版设备需要添加-webkit-前缀、 -ms- 或 -moz-</p>          </div><div class="note info flat">            <p>flex 是 flex-grow、flex-shrink、flex-basis 的缩写</p>          </div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*display*/</span></span><br><span class="line"><span class="selector-class">.display_flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-inline-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.display_inline-flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩流方向*/</span></span><br><span class="line"><span class="selector-class">.flex-direction_column</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主轴对齐*/</span></span><br><span class="line"><span class="selector-class">.justify-content_flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content_flex-justify</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: justify;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧轴对齐*/</span></span><br><span class="line"><span class="selector-class">.align-items_flex-start</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: start;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: start;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: end;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: end;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_center</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items_baseline</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: baseline;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: baseline;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*伸缩性*/</span></span><br><span class="line"><span class="selector-class">.flex_auto</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: auto;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: auto;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex_1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-ms-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*显示顺序*/</span></span><br><span class="line"><span class="selector-class">.order_2</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.order_3</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-ordinal-group</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-ms-flex-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-webkit-order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局系统"><a href="#布局系统" class="headerlink" title="布局系统"></a>布局系统</h2><h3 id="css-Media-媒体查询"><a href="#css-Media-媒体查询" class="headerlink" title="css Media 媒体查询"></a>css Media 媒体查询</h3><p>【媒体类型】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">screen         计算机屏幕（默认值）</span><br><span class="line">tty            电传打字机以及使用等宽字符网格的类似媒介</span><br><span class="line">tv             电视类型设备（低分辨率、有限的屏幕翻滚能力）</span><br><span class="line">projection     放映机</span><br><span class="line">handheld       手持设备（小屏幕、有限的带宽）</span><br><span class="line">print          打印预览模式 &#x2F; 打印页</span><br><span class="line">braille        盲人用点字法反馈设备</span><br><span class="line">aural          语音合成器</span><br><span class="line">all            适合所有设备</span><br></pre></td></tr></table></figure><p>【媒体属性】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">width | min-width | max-width</span><br><span class="line">     height | min-height | max-height</span><br><span class="line">     device-width | min-device-width | max-device-width</span><br><span class="line">     device-height | min-device-height | max-device-height</span><br><span class="line">     aspect-ratio | min-aspect-ratio | max-aspect-ratio</span><br><span class="line">     device-aspect-ratio | min-device-aspect-ratio | max-device-aspect-ratio</span><br><span class="line">     color | min-color | max-color</span><br><span class="line">     color-index | min-color-index | max-color-index</span><br><span class="line">     monochrome | min-monochrome | max-monochrome</span><br><span class="line">     resolution | min-resolution | max-resolution</span><br><span class="line">     scan | grid</span><br></pre></td></tr></table></figure><p>【辑操作符】</p><p>操作符 not、and、only 和逗号(,)(相当于 or)可以用来构建复杂的媒体查询</p><h3 id="css-多列布局"><a href="#css-多列布局" class="headerlink" title="css 多列布局"></a>css 多列布局</h3><h3 id="grid-栅格布局"><a href="#grid-栅格布局" class="headerlink" title="grid 栅格布局"></a>grid 栅格布局</h3><p><img src= "/img/loading.gif" data-src="/CDN/post/CSS_grid.png" alt=""></p><h3 id="移动优先的响应式布局"><a href="#移动优先的响应式布局" class="headerlink" title="移动优先的响应式布局"></a>移动优先的响应式布局</h3><p>【设计原则】<br>关于响应式设计，有渐进增加和优雅降级两个设计原则</p><ul><li>渐进增强(progressive enhancement)<br>是指基本需求得到满足、实现，再根据不同浏览器及不同分辨率设备的特点，利用高级浏览器下的新特性提供更好的体验。比如，圆角、阴影、动画等</li><li>优雅降级(graceful degradation)<br>则正好相反，现有功能已经开发完备，但需要向下兼容版本和不支持该功能的浏览器。虽然兼容性方案的体验不如常规方案，但保证了功能可用性</li></ul><blockquote><p>移动优先的响应式布局采用的是渐进增强原则，制作响应式网站时，先搞定手机版，然后再去为更大设备去设计和开发更复杂的功能。特征是使用 min-width 匹配页面宽度。从上到下书写样式时，首先考虑的是移动设备的使用场景，默认查询的是最窄的情况，再依次考虑设备屏幕逐渐变宽的情况</p></blockquote><p>【三要素】<br>响应式设计包括三个要素：弹性布局、媒体查询和弹性图片(最简单的响应式图片设置 max-width 为 100%即可)</p><h2 id="居中布局-以-flex-为例"><a href="#居中布局-以-flex-为例" class="headerlink" title="居中布局(以 flex 为例)"></a>居中布局(以 flex 为例)</h2><ul><li>水平居中<br>【1】在伸缩容器上设置主轴对齐方式<code>justify-content:center</code><br>【2】在伸缩项目上设置<code>margin: 0 auto</code></li><li>垂直居中<br>【1】在伸缩容器上设置侧轴对齐方式<code>align-items: center</code><br>【2】在伸缩项目上设置<code>margin: auto 0</code></li><li>同时实现水平居中和垂直居中(加起来就行)</li></ul><h2 id="常见布局方式"><a href="#常见布局方式" class="headerlink" title="常见布局方式"></a>常见布局方式</h2><p>三栏式布局(所谓的圣杯和双飞翼)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.top</span>,<span class="selector-class">.bottom</span>&#123;<span class="attribute">height</span>: <span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">order</span>: <span class="number">2</span>;&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgrey;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">style</span>=<span class="string">"background-color: lightblue;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>top<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span> <span class="attr">style</span>=<span class="string">"background-color: pink;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcoral;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>main<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"background-color: lightseagreen;"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"background-color: lightcyan;"</span> &gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span> <span class="attr">style</span>=<span class="string">"background-color: lightgreen;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe style="width: 100%; height: 110px;" src="https://demo.xiaohuochai.site/css/buju4/b5.html" frameborder="0" width="320" height="240"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画(transition)</title>
      <link href="posts/62887/"/>
      <url>posts/62887/</url>
      
        <content type="html"><![CDATA[<h2 id="漂浮的白云"><a href="#漂浮的白云" class="headerlink" title="漂浮的白云"></a>漂浮的白云</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 320px;" src="https://demo.xiaohuochai.site/css/animationApply/a1.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>漂浮的白云主要通过远景白云和近景白云来实现立体漂浮效果。远景和近景分别使用两张背景图片，通过改变其背景定位来实现白云移动效果，通过设置不同的动画持续时间来实现交错漂浮的效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span>,</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">100s</span> infinite linear alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">500%</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.in2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"http://sandbox.runjs.cn/uploads/rs/26/ddzmgynp/cloud1.png"</span>);</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"in2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="旋转的星球"><a href="#旋转的星球" class="headerlink" title="旋转的星球"></a>旋转的星球</h2><ul><li><p>【效果演示】</p><iframe style="width: 100%; height: 430px;" src="https://demo.xiaohuochai.site/css/animationApply/a2.html" frameborder="0" width="320" height="240"></iframe></li><li><p>【简要介绍】<br>旋转的星球主要通过 rotate()旋转函数来实现。实际上，蓝色的地球和黑色的月球并没有发生旋转，只是其父级旋转形成的视觉上的旋转效果</p></li><li><p>【主要代码】</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sunline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">10s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, <span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> red, -<span class="number">5px</span> <span class="number">5px</span></span><br><span class="line">      <span class="number">10px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earthline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">100px</span> -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">2s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.earth</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sunline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earthline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"earth"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"moon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>-【进阶】<br>如果要在内侧旋转的球内放文本，并且文本不跟着旋转，则代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: tan;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: inherit;</span><br><span class="line">  <span class="attribute">animation-direction</span>: reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标移入后，动画停止；移出时，动画继续</p><iframe style="width: 100%; height: 160px;" src="https://demo.xiaohuochai.site/css/animationApply/a3.html" frameborder="0" width="320" height="240"></iframe><h2 id="正方体合成"><a href="#正方体合成" class="headerlink" title="正方体合成"></a>正方体合成</h2><ul><li>【效果演示】<iframe style="width: 100%; height: 300px;" src="https://demo.xiaohuochai.site/css/animationApply/a4.html" frameborder="0" width="320" height="240"></iframe></li></ul><h2 id="使用-animate-css"><a href="#使用-animate-css" class="headerlink" title="使用 animate.css"></a>使用 animate.css</h2><p>animate.css 是一个使用 CSS3 的 animation 制作的动画效果的 CSS 集合，里面预设了很多种常用的动画，且使用非常简单</p><ul><li>从官网下载</li></ul><p><a href="https://raw.github.com/daneden/animate.css/master/animate.css" target="_blank" rel="noopener">https://raw.github.com/daneden/animate.css/master/animate.css</a></p><ul><li>通过 npm 安装</li></ul><p><code>$ npm install animate.css</code></p><ul><li>使用在线 cdn</li></ul><p><a href="https://unpkg.com/animate.css@3.5.2/animate.min.css" target="_blank" rel="noopener">https://unpkg.com/animate.css@3.5.2/animate.min.css</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作流程</title>
      <link href="posts/29524/"/>
      <url>posts/29524/</url>
      
        <content type="html"><![CDATA[<h2 id="推送代码到远端"><a href="#推送代码到远端" class="headerlink" title="推送代码到远端"></a>推送代码到远端</h2><p>日常开发完一块功能，要把代码推送到远端保存时，一般是按如下步骤进行操作：</p><ul><li><code>git status</code> 显示本地仓库的状态。如果此时显示远端没有更新的代码，接着执行以下步骤；</li><li><code>git add &lt;filePath&gt;</code> 把此次改动的文件加入本地缓存区；</li><li><code>git commit -m &#39;msg&#39;</code> 把文件提交到本地仓库，并一同带上此次修改信息；</li><li><code>git push origin &lt;branchName&gt;</code> 把当前本地分支的代码推送到相应的远程分支上。</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>1 创建并切换到新分支</li></ul><p>在日常功能开发时，首先是从主分支检出新分支作为功能开发分支，此时的本地仓库当前分支需要为主分支，且保证本地仓库版本与远端一致。然后，基于主分支创建自己的新分支，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>执行完该命令，你会得到一个新的本地分支，并且当前分支已切换到新创建的分支上。这其实是两个步骤：创建分支，切换分支。你当然可以分开执行下面两行命令，达到同样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchName&gt;</span><br><span class="line">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure><ul><li>2 显示分支</li></ul><p>需要显示工程下有多少个分支时，使用命令：<code>git branch</code>。其中，带有 * 的代表当前分支。加上 -v 参数，你可以在显示分支时，一并显示各个分支最新一次的提交：<code>git branch -v</code>。除此之外，你还可以使用命令 <code>git branch -vv</code> 来显示所有分支，同时带有每个分支对应的远程分支，及最新的一次提交。</p><ul><li>3 推送分支到远端</li></ul><p>当你开发完业务功能，需要推送到远端保存时，使用 push 命名：<code>git push origin &lt;branchName&gt;</code></p><ul><li>4 拉取分支</li></ul><p>在上述 1 章节介绍执行 <code>git status</code> 后，如果显示本地仓库代码并非最新时，需要是先拉取远端代码，把本地代码保持最新，之后提交到远端才可能避免冲突。但是，如果本地分支没有与某个远程分支建立联系（例如新建工程第一次提交的时候），要先建立联系，而推送本地分支到远端时可以一并建立联系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>这样就会在远端也建立 branchName 分支，并与本地的 branchName 分支建立了联系。当需要拉取远程分支到本地的时候就可以使用命令：<code>git pull origin &lt;branchName&gt;</code>此外，<code>git fetch</code> 可以把远程的数据抓取到本地，但是不会修改本地的内容，需要自己手动 merge： <code>git merge</code>。而刚才说的 <code>git pull</code> 命令，其实正是合并了上面两条命令的功能，在抓取后一并修改。</p><ul><li>5 分支的合并</li></ul><p>开发完成，我们需要把功能分支合并会主分支。使用 merge 方式，进行开发分支合并到 master 主分支的场景时，我的操作步骤如下：<br>首先检出当前分支，例如是开发分支，然后我们要合并 master 分支进开发分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 切换到本地 master 分支，使用 git pull 保证本地 master 是最新的</span><br><span class="line">2 切换到本地的开发分支，使用合并的命令：git merge master，将 master 合并进开发分支</span><br><span class="line">3 把本地分支 git push 推送到远端</span><br><span class="line">4 再在本地切换到 master 分支，使用合并分支的代码：git merge &lt;开发分支名&gt;，把功能代码合并进主分支</span><br><span class="line">5 使用 git push 把 master 分支推送到远程</span><br></pre></td></tr></table></figure><h2 id="gitflow-工作流"><a href="#gitflow-工作流" class="headerlink" title="gitflow 工作流"></a>gitflow 工作流</h2><ul><li><a href="https://www.cnblogs.com/jeffery-zou/p/10280167.html" target="_blank" rel="noopener">gitflow管理分支</a></li></ul><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p><a href="https://blog.csdn.net/web_csdn_share/article/details/79243308" target="_blank" rel="noopener">Git常用命令及方法大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css清浮动</title>
      <link href="posts/17955/"/>
      <url>posts/17955/</url>
      
        <content type="html"><![CDATA[<p>人们经常谈起清浮动，其实就是解决浮动元素的包含块高度塌陷的问题</p><h2 id="【1】clear-属性"><a href="#【1】clear-属性" class="headerlink" title="【1】clear 属性"></a>【1】clear 属性</h2><p>值: <code>left | right | both | none | inherit</code><br>初始值: none<br>应用于: 块级元素(块级元素指 block 元素，不包括 inline-block 元素)<br>继承性: 无</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left:左侧不允许存在浮动元素</span><br><span class="line">right:右侧不允许存在浮动元素</span><br><span class="line">both:左右两侧不允许存在浮动元素</span><br><span class="line">none:允许左右两侧存在浮动元素</span><br></pre></td></tr></table></figure><ul><li><code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>&lt;注意&gt;并不是很适用，若包含块为<code>&lt;ul&gt;</code>，则子元素只能为<code>&lt;li&gt;</code>，则在<code>&lt;li&gt;</code>后面添加<code>&lt;div&gt;</code>元素不合适</li><li><code>&lt;br style=&quot;clear:both&quot;&gt;</code>&lt;注意&gt;虽然 clear 属性只应用于块级元素，但在除 IE7-以外的其他浏览器都可以将 clear 属性应用于<code>&lt;br&gt;</code>元素</li><li>为浮动元素的 after 伪元素设置 clear 属性<code>.clear:after{content:&quot;&quot;; display: block; clear: both;}</code></li></ul><h2 id="【2】BFC"><a href="#【2】BFC" class="headerlink" title="【2】BFC"></a>【2】BFC</h2><ul><li><p>1、float: left/right</p></li><li><p>2、position:absolute/fixed</p></li><li><p>3、display:inline-block/table-cell/table-caption/flex</p></li><li><p>4、overflow:hidden/scroll/auto</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="noopener">关于 BFC 的详细信息移步至此</a></p><h2 id="【3】IE7"><a href="#【3】IE7" class="headerlink" title="【3】IE7-"></a>【3】IE7-</h2><p>关于 IE7-浏览器有一个其特有的属性 haslayout，当触发包含块的 haslayout 时，浮动元素被 layout 元素自动包含</p><ul><li><p>1、display:inline-block</p></li><li><p>2、height/width:除 auto 外</p></li><li><p>3、float: left/right</p></li><li><p>4、position: absolute</p></li><li><p>5、writing-mode: tb-rl</p></li><li><p>6、zoom: 除 normal 外</p></li></ul><p><a href="https://www.cnblogs.com/xiaohuochai/p/4845314.html" target="_blank" rel="noopener">关于 haslayout 的详细信息移步至此</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题分页问题</title>
      <link href="posts/65246/"/>
      <url>posts/65246/</url>
      
        <content type="html"><![CDATA[<p>辅助函数 paginator 能够帮助我们插入分页链接，具体参数查看<a href="https://hexo.io/docs/helpers.html#paginator" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html#paginator</a></p><p>hexo博客搭建：<a href="https://zhuanlan.zhihu.com/p/26625249/" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249/</a></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>分页标签显示为 HTML 代码如：<code>&lt;i class=&quot;nexmoefont icon-left&quot;&gt;&lt;/i&gt;</code></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>找到 pagination.ejs 中的 paginator 函数，添加 escape: false 试试，完整代码形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(&#123;</span><br><span class="line">      prev_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-left&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      next_text: &#39;&lt;i class&#x3D;&quot;iconfont icon-arrow-right&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">      escape: false</span><br><span class="line">    &#125;) %&gt;</span><br></pre></td></tr></table></figure><p>原文参考：<a href="https://www.zhihu.com/question/370971597/answer/1147674723" target="_blank" rel="noopener">https://www.zhihu.com/question/370971597/answer/1147674723</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS运行机制</title>
      <link href="posts/43184/"/>
      <url>posts/43184/</url>
      
        <content type="html"><![CDATA[<h2 id="概念1：-JS是单线程执行"><a href="#概念1：-JS是单线程执行" class="headerlink" title="概念1： JS是单线程执行"></a>概念1： JS是单线程执行</h2><p>”JS是单线程的”指的是JS 引擎线程。</p><blockquote><p>在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。<br>Node环境中，只有JS 线程。</p></blockquote><h2 id="概念2：宿主"><a href="#概念2：宿主" class="headerlink" title="概念2：宿主"></a>概念2：宿主</h2><p>JS运行的环境。一般为浏览器或者Node。</p><h2 id="概念3：Event-Loop"><a href="#概念3：Event-Loop" class="headerlink" title="概念3：Event Loop"></a>概念3：Event Loop</h2><p><img src= "/img/loading.gif" data-src="/CDN/post/eventloop.webp" alt=""></p><blockquote><p>JS引擎常驻于内存中，等待宿主将JS代码或函数传递给它。<br>也就是等待宿主环境分配宏观任务，反复等待 - 执行即为事件循环。</p></blockquote><p>Event Loop中，每一次循环称为tick，每一次tick的任务如下：</p><ul><li>执行栈选择最先进入队列的宏任务（一般都是script），执行其同步代码直至结束；</li><li>检查是否存在微任务，有则会执行至微任务队列为空；</li><li>如果宿主为浏览器，可能会渲染页面；</li><li>开始下一轮tick，执行宏任务中的异步代码（setTimeout等回调）。</li></ul><h2 id="概念4：宏任务和微任务"><a href="#概念4：宏任务和微任务" class="headerlink" title="概念4：宏任务和微任务"></a>概念4：宏任务和微任务</h2><blockquote><p>ES6 规范中，microtask 称为 jobs，macrotask 称为 task<br>宏任务是由宿主发起的，而微任务由JavaScript自身发起。</p></blockquote><p>在ES3以及以前的版本中，JavaScript本身没有发起异步请求的能力，也就没有微任务的存在。在ES5之后，JavaScript引入了Promise，这样，不需要浏览器，JavaScript引擎自身也能够发起异步任务了。</p><p>所以，总结一下，两者区别为：<br><img src= "/img/loading.gif" data-src="/CDN/post/task.png" alt=""></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="setTimeout，setImmediate谁先执行？"><a href="#setTimeout，setImmediate谁先执行？" class="headerlink" title="setTimeout，setImmediate谁先执行？"></a>setTimeout，setImmediate谁先执行？</h3><p><code>setImmediate</code>和<code>process.nextTick</code>为Node环境下常用的方法（IE11支持<code>setImmediate</code>），所以，后续的分析都基于Node宿主。</p><p>Node.js是运行在服务端的js，虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以与浏览器Event Loop不太一样。</p><p>执行顺序如下：</p><blockquote><p>timers: 执行setTimeout和setInterval的回调<br>pending callbacks: 执行延迟到下一个循环迭代的 I/O 回调<br>idle, prepare: 仅系统内部使用<br>poll: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。<br>check: setImmediate在这里执行<br>close callbacks: 一些关闭的回调函数，如：socket.on(‘close’, …)<br>一般来说，<code>setImmediate</code>会在<code>setTimeout</code>之前执行，如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'outer'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>其执行顺序为：</p><ul><li>外层是一个<code>setTimeout</code>，所以执行它的回调的时候已经在timers阶段了</li><li>处理里面的<code>setTimeout</code>，因为本次循环的timers正在执行，所以其回调其实加到了下个timers阶段</li><li>处理里面的<code>setImmediate</code>，将它的回调加入check阶段的队列</li><li>外层timers阶段执行完，进入pending callbacks，idle, prepare，poll，这几个队列都是空的，所以继续往下</li><li>到了check阶段，发现了<code>setImmediate</code>的回调，拿出来执行</li><li>然后是close callbacks，队列是空的，跳过</li><li>又是timers阶段，执行console.log(‘<code>setTimeout</code>‘)</li></ul><p>但是，如果当前执行环境不是timers阶段，就不一定了。。。。顺便科普一下Node里面对<code>setTimeout</code>的特殊处理：<code>setTimeout</code>(fn, 0)会被强制改为<code>setTimeout</code>(fn, 1)。</p><p>看看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其执行顺序为：</p><ul><li>遇到<code>setTimeout</code>，虽然设置的是0毫秒触发，但是被node.js强制改为1毫秒，塞入times阶段</li><li>遇到<code>setImmediate</code>塞入check阶段</li><li>同步代码执行完毕，进入Event Loop</li><li>先进入times阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足<code>setTimeout</code>条件，执行回调，如果没过1毫秒，跳过</li><li>跳过空的阶段，进入check阶段，执行<code>setImmediate</code>回调</li></ul><p>可见，1毫秒是个关键点，所以在上面的例子中，<code>setImmediate</code>不一定在<code>setTimeout</code>之前执行了。</p><div class="note info flat">            <p>因为process.nextTick为Node环境下的方法，所以后续的分析依旧基于Node。<br>process.nextTick() 是一个特殊的异步API，其不属于任何的Event Loop阶段。事实上Node在遇到这个API时，Event Loop根本就不会继续进行，会马上停下来执行process.nextTick()，这个执行完后才会继续Event Loop。<br>所以，nextTick和Promise同时出现时，肯定是nextTick先执行，原因是nextTick的队列比Promise队列优先级更高。</p>          </div><div class="note info flat">            <p>promise的内部既包含宏任务也包含微任务，promise内部执行为宏任务，then执行为微任务</p>          </div><div class="note info flat">            <p>第一轮宏任务打印：script start 、async2 end、 Promise 、script end<br>第一轮微任务打印：async1 end 、promise1、promise2<br>（此时微任务队列清空，且存在其他宏任务，进入下一轮事件循环）<br>第二轮宏任务： setTimeout等</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table前端组件封装</title>
      <link href="posts/739/"/>
      <url>posts/739/</url>
      
        <content type="html"><![CDATA[<h2 id="el-table组件封装"><a href="#el-table组件封装" class="headerlink" title="el-table组件封装"></a>el-table组件封装</h2><p>首先创建一个vue文件,目前封装的table可支持前端自动分页、工具插槽、过滤、排序等功能</p><h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #e0e0e0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-tool"</span> <span class="attr">v-if</span>=<span class="string">"bShowTool"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"tool"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">ref</span>=<span class="string">"refTable"</span> <span class="attr">v-bind</span>=<span class="string">"attrs"</span> <span class="attr">v-on</span>=<span class="string">"listeners"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">"expand"</span> <span class="attr">v-if</span>=<span class="string">"bShowExpand"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"bShowSelection"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">"35px"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:reserve-selection</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:selectable</span>=<span class="string">"selectable"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:index</span>=<span class="string">"getIndex"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"bShowIndex"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:showOverflowTooltip</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>#<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(column, index) in columns"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"`$&#123;index&#125;-$&#123;column.prop&#125;`"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:type</span>=<span class="string">"column.type"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:width</span>=<span class="string">"column.width"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:min-width</span>=<span class="string">"column.minWidth"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:align</span>=<span class="string">"column.align"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">"TR(column.headerName)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:column-key</span>=<span class="string">"column.prop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:prop</span>=<span class="string">"column.prop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:fixed</span>=<span class="string">"column.fixed"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:filters</span>=<span class="string">"column.filters"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:filter-multiple</span>=<span class="string">"column.filterMultiple"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:filtered-value</span>=<span class="string">"column.filteredValue"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:showOverflowTooltip</span>=<span class="string">"column.showOverflowTooltip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:render-header</span>=<span class="string">"column.renderHeader"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:sortable</span>=<span class="string">"column.sortable"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"column.render"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ExpandSlot</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:render</span>=<span class="string">"column.render"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:row</span>=<span class="string">"scope.row"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:index</span>=<span class="string">"scope.$index"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">ExpandSlot</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">"column.formatter"</span>&gt;</span></span><br><span class="line">            &#123;&#123;</span><br><span class="line">              column.formatter(</span><br><span class="line">                scope.row,</span><br><span class="line">                scope.column,</span><br><span class="line">                scope.row[column.prop],</span><br><span class="line">                scope.$index</span><br><span class="line">              )</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">            &#123;&#123; scope.row[column.prop] &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">v-if</span>=<span class="string">"bShowPage"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"table-pagination"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:small</span>=<span class="string">"bPageSmall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:layout</span>=<span class="string">"layout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:total</span>=<span class="string">"curTotal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-sizes</span>=<span class="string">"pageSizes"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-size.sync</span>=<span class="string">"curPageSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:current-page.sync</span>=<span class="string">"curPage"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'@/utils'</span>; <span class="comment">//通用函数放入utils文件中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  name: <span class="string">'DTable'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    bShowTool: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bShowExpand: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bShowSelection: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    selectable: &#123;</span><br><span class="line">      type: <span class="built_in">Function</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    bShowIndex: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bShowPage: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 搜索时，支持哪些列可以搜索</span></span><br><span class="line">    searchkeys: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="comment">// 搜索词</span></span><br><span class="line">    searchValue: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">// 前端分页时的所有数据</span></span><br><span class="line">    allData: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="built_in">Array</span>,</span><br><span class="line">    columns: <span class="built_in">Array</span>,</span><br><span class="line">    maxHeight: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span><br><span class="line">    bMaxHeight: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rowkey: &#123;</span><br><span class="line">      type: [<span class="built_in">Function</span>, <span class="built_in">String</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> row.id;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    treeProps: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          children: <span class="string">'children'</span>,</span><br><span class="line">          hasChildren: <span class="string">'has_children'</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    fixed: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    pageStoreKey: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'PAGE_SIZE'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    total: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    pageSize: <span class="built_in">Number</span>,</span><br><span class="line">    currentPage: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bPageSmall: <span class="built_in">Boolean</span>,</span><br><span class="line">    layout: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'total, sizes, prev, pager, next, jumper'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    pageSizes: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    filterKeys: <span class="built_in">Object</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      curPageSize: <span class="keyword">this</span>.initPageSize(),</span><br><span class="line">      curPage: <span class="keyword">this</span>.currentPage,</span><br><span class="line">      curData: [],</span><br><span class="line">      curTotal: <span class="number">0</span>,</span><br><span class="line">      filters: <span class="keyword">this</span>.filterKeys || <span class="string">''</span>,</span><br><span class="line">      orderType: <span class="string">''</span>,</span><br><span class="line">      orderProp: <span class="string">''</span>,</span><br><span class="line">      headerCellStyle: &#123;</span><br><span class="line">        height: <span class="string">'38px'</span>,</span><br><span class="line">        <span class="string">'font-weight'</span>: <span class="number">600</span>,</span><br><span class="line">        color: <span class="string">'#333333'</span>,</span><br><span class="line">        padding: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'background-color'</span>: <span class="string">'#E8EFF8'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cellStyle: &#123;</span><br><span class="line">        height: <span class="string">'38px'</span>,</span><br><span class="line">        padding: <span class="string">'0'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.getTableHeight);</span><br><span class="line">    <span class="keyword">this</span>.getTableHeight();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    attrs() &#123;</span><br><span class="line">      <span class="keyword">let</span> attrs = &#123;</span><br><span class="line">        ...this.$attrs,</span><br><span class="line">        data: <span class="keyword">this</span>.curData,</span><br><span class="line">        <span class="string">'row-key'</span>: <span class="keyword">this</span>.rowkey,</span><br><span class="line">        stripe: <span class="literal">true</span>,</span><br><span class="line">        fixed: <span class="keyword">this</span>.fixed,</span><br><span class="line">        <span class="string">'tooltip-effect'</span>: <span class="string">'light'</span>,</span><br><span class="line">        <span class="string">'header-cell-style'</span>: <span class="keyword">this</span>.headerCellStyle,</span><br><span class="line">        <span class="string">'cell-style'</span>: <span class="keyword">this</span>.cellStyle,</span><br><span class="line">        <span class="string">'tree-props'</span>: <span class="keyword">this</span>.treeProps</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.bMaxHeight) &#123;</span><br><span class="line">        attrs = &#123;</span><br><span class="line">          ...attrs,</span><br><span class="line">          <span class="string">'max-height'</span>: <span class="keyword">this</span>.maxHeight || <span class="keyword">this</span>._maxHeight</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> attrs;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    listeners() &#123;</span><br><span class="line">      <span class="keyword">let</span> listeners = &#123;</span><br><span class="line">        ...this.$listeners,</span><br><span class="line">        <span class="string">'sort-change'</span>: <span class="keyword">this</span>.handleSortChange,</span><br><span class="line">        <span class="string">'filter-change'</span>: <span class="keyword">this</span>.handleFilterChange</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> listeners;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前端自己分页</span></span><br><span class="line">    bLocalPage() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.allData.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      immediate: <span class="literal">true</span>,</span><br><span class="line">      handler() &#123;</span><br><span class="line">        <span class="keyword">this</span>.curData = <span class="keyword">this</span>.data;</span><br><span class="line">        <span class="keyword">this</span>.curTotal = <span class="keyword">this</span>.total;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    allData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.getCurData();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    curPage(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getCurData();</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'update:currentPage'</span>, val);</span><br><span class="line">    &#125;,</span><br><span class="line">    currentPage(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.curPage = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    curPageSize(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getCurData();</span><br><span class="line">      utils.setLocalStore(<span class="keyword">this</span>.pageStoreKey, val);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'update:pageSize'</span>, val);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'size-change'</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    initPageSize() &#123;</span><br><span class="line">      <span class="keyword">let</span> size = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.pageSize) &#123;</span><br><span class="line">        size = <span class="keyword">this</span>.pageSize;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        size = utils.getLocalStore(<span class="keyword">this</span>.pageStoreKey, <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      utils.setLocalStore(<span class="keyword">this</span>.pageStoreKey, size);</span><br><span class="line">      <span class="keyword">return</span> size;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getIndex(index) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">this</span>.curPage - <span class="number">1</span>) * <span class="keyword">this</span>.curPageSize + index + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getTableHeight() &#123;</span><br><span class="line">      <span class="keyword">this</span>._maxHeight = <span class="keyword">this</span>.maxHeight || <span class="built_in">window</span>.innerHeight - <span class="number">250</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleSortChange(&#123; prop, order &#125;) &#123;</span><br><span class="line">      <span class="keyword">let</span> orderKey = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span> (order) &#123;</span><br><span class="line">        <span class="keyword">if</span> (order === <span class="string">'ascending'</span>) &#123;</span><br><span class="line">          orderKey = prop;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          orderKey = <span class="string">`-<span class="subst">$&#123;prop&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.orderProp = prop;</span><br><span class="line">      <span class="keyword">this</span>.orderType = order;</span><br><span class="line">      <span class="keyword">this</span>.getCurData();</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'on-sort'</span>, orderKey, prop, order);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleFilterChange(filters) &#123;</span><br><span class="line">      <span class="keyword">let</span> exist = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> filterKey = <span class="built_in">Object</span>.keys(filters)[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.filters) &#123;</span><br><span class="line">        <span class="keyword">this</span>.filters = filters;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.filters) &#123;</span><br><span class="line">          <span class="keyword">if</span> (key === filterKey) &#123;</span><br><span class="line">            exist = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.filters[key] = filters[key];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!exist) &#123;</span><br><span class="line">          <span class="keyword">this</span>.filters[filterKey] = filters[filterKey];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.getCurData();</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'on-filter'</span>, <span class="keyword">this</span>.filters);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    toggleRowSelection(row, selected) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.bLocalPage) &#123;</span><br><span class="line">        <span class="comment">// 选中\取消状态，row必须为当前的data的数据，</span></span><br><span class="line">        <span class="comment">// row又是引用类型的数据，element ui源码是用statusArr.indexOf(row)，所以当界面数据数据后，会找不到数据。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> rowData <span class="keyword">of</span> <span class="keyword">this</span>.$refs.refTable.selection) &#123;</span><br><span class="line">          <span class="keyword">if</span> (rowData.id === row.id) &#123;</span><br><span class="line">            row = rowData;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.$refs.refTable.toggleRowSelection(row, selected);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    doClearSelectedData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.refTable.clearSelection();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getStoreData() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$refs.refTable.store;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getCurData() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.bLocalPage) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">let</span> data = utils.deepClone(<span class="keyword">this</span>.allData);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.filters) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.filters).forEach(<span class="function"><span class="params">colName</span> =&gt;</span> &#123;</span><br><span class="line">          data = data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              !<span class="keyword">this</span>.filters[colName].length ||</span><br><span class="line">              <span class="keyword">this</span>.filters[colName].includes(item[colName])</span><br><span class="line">            );</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.searchValue) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>.searchValue.toLowerCase();</span><br><span class="line">        data = data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> bFind = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">this</span>.searchkeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            bFind =</span><br><span class="line">              bFind || <span class="built_in">String</span>(item[key]).toLowerCase().indexOf(value) !== <span class="number">-1</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span> bFind;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.orderType) &#123;</span><br><span class="line">        data.sort(utils.createSortFunc(<span class="keyword">this</span>.orderProp, <span class="keyword">this</span>.orderType));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.curTotal = data.length;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.bShowPage) &#123;</span><br><span class="line">        <span class="comment">// 支持分页</span></span><br><span class="line">        <span class="keyword">this</span>.curData = data.slice(</span><br><span class="line">          (<span class="keyword">this</span>.curPage - <span class="number">1</span>) * <span class="keyword">this</span>.curPageSize,</span><br><span class="line">          <span class="keyword">this</span>.curPage * <span class="keyword">this</span>.curPageSize</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.curData = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.getTableHeight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式部分"><a href="#样式部分" class="headerlink" title="样式部分"></a>样式部分</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss"&gt;</span><br><span class="line"><span class="selector-class">.table-tool</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-table</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-pagination</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="通用函数封装"><a href="#通用函数封装" class="headerlink" title="通用函数封装"></a>通用函数封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数组的某项进行排序</span></span><br><span class="line"><span class="comment"> * key: 第几项或者某个字段名</span></span><br><span class="line"><span class="comment"> * order: ascending或descending</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Common.createSortFunc = <span class="function">(<span class="params">key, order = <span class="string">'ascending'</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> av = a[key];</span><br><span class="line">    <span class="keyword">let</span> bv = b[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(av)) &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(bv))) &#123;</span><br><span class="line">      av = <span class="built_in">Number</span>(av);</span><br><span class="line">      bv = <span class="built_in">Number</span>(bv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (order === <span class="string">'ascending'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (av === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bv === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> av &gt; bv ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order === <span class="string">'descending'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (av === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bv === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> av &lt; bv ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器本地数据读写接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Broswer.getLocalStore = <span class="function"><span class="keyword">function</span> (<span class="params">key, defval = null</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(key));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">      <span class="keyword">return</span> localStorage.getItem(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> defval;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Broswer.setLocalStore = <span class="function"><span class="keyword">function</span> (<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">  localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="vxe-table-组件"><a href="#vxe-table-组件" class="headerlink" title="vxe-table 组件"></a>vxe-table 组件</h2><ul><li><a href="https://vxetable.cn/#/table/start/install" target="_blank" rel="noopener">https://vxetable.cn/#/table/start/install</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用小米接口修改步数</title>
      <link href="posts/52583/"/>
      <url>posts/52583/</url>
      
        <content type="html"><![CDATA[<h2 id="修改步数前置条件"><a href="#修改步数前置条件" class="headerlink" title="修改步数前置条件"></a>修改步数前置条件</h2><ul><li>1.应用商店下载<strong>小米运动App</strong>，手机号注册登录</li></ul><blockquote><p>注意一定要用手机号，别直接第三方登录</p></blockquote><ul><li>2.点击<strong>我的-&gt;第三方接入</strong>，绑定你想同步数据的项目</li></ul><blockquote><p>注意同步微信步数需关注公众号：华米科技</p></blockquote><ul><li>3.打开网页或者本地运行的脚本，输入<strong>小米运动账号</strong>、密码和修改的步数</li></ul><blockquote><p>账号是小米运动的账号，不是小米账号！！！</p></blockquote><h2 id="修改步数网页版"><a href="#修改步数网页版" class="headerlink" title="修改步数网页版"></a>修改步数网页版</h2><p>这个使用别人的服务器，修改有时间段限制<br><a href="https://4og.cn/xm/" target="_blank" rel="noopener">小米运动步数网页版</a></p><h2 id="修改步数源码-需搭建Pyhton环境"><a href="#修改步数源码-需搭建Pyhton环境" class="headerlink" title="修改步数源码(需搭建Pyhton环境)"></a>修改步数源码(需搭建Pyhton环境)</h2><p>github项目地址：<a href="https://github.com/Chenchaoyang666/updateStep" target="_blank" rel="noopener">步数修改源码</a><br>gitee项目地址：<a href="https://gitee.com/chenchaoyang666/updateStep" target="_blank" rel="noopener">步数修改源码</a><br>本地环境运行时要下载包和修改账号密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip install requests,time,re,json,random</span></span><br><span class="line"><span class="keyword">import</span> requests,time,re,json,random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为小米运动账号</span></span><br><span class="line">user = <span class="string">"写你的手机号"</span></span><br><span class="line"><span class="comment"># 修改为小米运动登录密码</span></span><br><span class="line">passwd = <span class="string">"写你的密码"</span></span><br><span class="line"><span class="comment"># 要修改的步数，直接输入想要修改的步数值，留空为随机步数</span></span><br><span class="line">step =<span class="string">"0"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现原理</title>
      <link href="posts/61384/"/>
      <url>posts/61384/</url>
      
        <content type="html"><![CDATA[<p>在传统的异步编程中，如果异步之间存在依赖关系，我们就需要通过层层嵌套回调来满足这种依赖，如果嵌套层数过多，可读性和可维护性都变得很差，产生所谓“回调地狱”，而 Promise 将回调嵌套改为链式调用，增加可读性和可维护性。</p><h2 id="Promise-的调用流程"><a href="#Promise-的调用流程" class="headerlink" title="Promise 的调用流程"></a>Promise 的调用流程</h2><ul><li><code>Promise</code>的构造方法接收一个 executor()，在<code>new Promise()</code>时就立刻执行这个 executor 回调</li><li><code>executor()</code>内部的异步任务被放入宏/微任务队列，等待执行</li><li><code>then()</code>被执行，收集成功/失败回调，放入成功/失败队列</li><li><code>executor()</code>的异步任务被执行，触发<code>resolve/reject</code>，从成功/失败队列中取出回调依次执行</li></ul><h2 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise A+规范"></a>Promise A+规范</h2><p>由于 ES6 的 Promise 实现需要遵循 Promise/A+规范，是规范对 Promise 的状态控制做了要求。Promise/A+的规范比较长，这里只总结两条核心规则：</p><ul><li><code>Promise</code> 本质是一个状态机，且状态只能为以下三种：<code>Pending（等待态）</code>、<code>Fulfilled（执行态）</code>、<code>Rejected（拒绝态）</code>，状态的变更是单向的，只能从 Pending -&gt; Fulfilled 或 Pending -&gt; Rejected，状态变更不可逆</li><li><code>then</code>方法接收两个可选参数，分别对应状态改变时触发的回调。then 方法返回一个 promise。then 方法可以被同一个 promise 调用多次。</li></ul><h2 id="then-的链式调用"><a href="#then-的链式调用" class="headerlink" title="then 的链式调用"></a>then 的链式调用</h2><p>先举个例子看一下 then 是如何链式调用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">//then回调中可以return一个Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">//then回调中也可以return一个值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>输出：1 2 3</p><h3 id="如何实现链式调用"><a href="#如何实现链式调用" class="headerlink" title="如何实现链式调用"></a>如何实现链式调用</h3><ul><li>显然<code>then()</code>需要返回一个 Promise，这样才能找到 then 方法，所以我们会把 then 方法的返回值包装成 Promise。</li><li><code>then()</code>的回调需要拿到上一个<code>then()</code>的返回值</li><li><code>then()</code>的回调需要顺序执行，以上面这段代码为例，虽然中间 return 了一个 Promise，但执行顺序仍要保证是 1-&gt;2-&gt;3。我们要等待当前 Promise 状态变更后，再执行下一个 then 收集的回调，这就要求我们对 then 的返回值分类讨论</li></ul><h2 id="值穿透-amp-状态已变更情况"><a href="#值穿透-amp-状态已变更情况" class="headerlink" title="值穿透&amp;状态已变更情况"></a>值穿透&amp;状态已变更情况</h2><ul><li>值穿透：根据规范，如果 then() 接收的参数不是 function，那么我们应该忽略它。如果没有忽略，当 then()回调不为 function 时将会抛出异常，导致链式调用中断</li><li>处理状态为 resolve/reject 的情况：其实我们上边 then() 的写法是对应状态为<code>padding</code>的情况，但是有些时候，resolve/reject 在 then() 之前就被执行（比如<code>Promise.resolve().then()</code>），如果这个时候还把 then()回调 push 进 resolve/reject 的执行队列里，那么回调将不会被执行，因此对于状态已经变为<code>fulfilled</code>或<code>rejected</code>的情况，我们直接执行 then 回调</li></ul><h2 id="兼容同步任务"><a href="#兼容同步任务" class="headerlink" title="兼容同步任务"></a>兼容同步任务</h2><p>完成了 then 的链式调用以后，我们再处理一个前边的细节，然后放出完整代码。上文我们说过，Promise 的执行顺序是 <code>new Promise -&gt; then()收集回调 -&gt; resolve/reject 执行回调</code>，这一顺序是建立在 executor 是异步任务的前提上的，如果 executor 是一个同步任务，那么顺序就会变成 <code>new Promise -&gt; resolve/reject 执行回调 -&gt; then()收集回调</code>，resolve 的执行跑到 then 之前去了，为了兼容这种情况，我们给 resolve/reject 执行回调的操作包一个 setTimeout，让它异步执行。</p><h2 id="结合之前的五步，实现了-Promise-的主要功能"><a href="#结合之前的五步，实现了-Promise-的主要功能" class="headerlink" title="结合之前的五步，实现了 Promise 的主要功能"></a>结合之前的五步，实现了 Promise 的主要功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise/A+规定的三种状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法接收一个回调</span></span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="keyword">this</span>._status = PENDING; <span class="comment">// Promise状态</span></span><br><span class="line">    <span class="keyword">this</span>._value = <span class="literal">undefined</span>; <span class="comment">// 储存then回调return的值</span></span><br><span class="line">    <span class="keyword">this</span>._resolveQueue = []; <span class="comment">// 成功队列, resolve时触发</span></span><br><span class="line">    <span class="keyword">this</span>._rejectQueue = []; <span class="comment">// 失败队列, reject时触发</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue</span></span><br><span class="line">    <span class="keyword">let</span> _resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//把resolve执行回调的操作封装成一个函数,放进setTimeout里,以兼容executor是同步代码的情况</span></span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = FULFILLED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里之所以使用一个队列来储存回调,是为了实现规范要求的 "then 方法可以被同一个 promise 调用多次"</span></span><br><span class="line">        <span class="comment">// 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._resolveQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._resolveQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 实现同resolve</span></span><br><span class="line">    <span class="keyword">let</span> _reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>; <span class="comment">// 对应规范中的"状态只能由pending到fulfilled或rejected"</span></span><br><span class="line">        <span class="keyword">this</span>._status = REJECTED; <span class="comment">// 变更状态</span></span><br><span class="line">        <span class="keyword">this</span>._value = val; <span class="comment">// 储存当前value</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>._rejectQueue.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> callback = <span class="keyword">this</span>._rejectQueue.shift();</span><br><span class="line">          callback(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      setTimeout(run);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// new Promise()时立即执行executor,并传入resolve和reject</span></span><br><span class="line">    executor(_resolve, _reject);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then方法,接收一个成功的回调和一个失败的回调</span></span><br><span class="line">  then(resolveFn, rejectFn) &#123;</span><br><span class="line">    <span class="comment">// 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行</span></span><br><span class="line">    <span class="keyword">typeof</span> resolveFn !== <span class="string">'function'</span> ? <span class="function">(<span class="params">resolveFn = (value</span>) =&gt;</span> value) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">typeof</span> rejectFn !== <span class="string">'function'</span></span><br><span class="line">      ? <span class="function">(<span class="params">rejectFn = (reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(reason <span class="keyword">instanceof</span> <span class="built_in">Error</span> ? reason.message : reason);</span><br><span class="line">        &#125;)</span><br><span class="line">      : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return一个新的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论</span></span><br><span class="line">      <span class="keyword">const</span> fulfilledFn = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 执行第一个(当前的)Promise的成功回调,并获取返回值</span></span><br><span class="line">          <span class="keyword">let</span> x = resolveFn(value);</span><br><span class="line">          <span class="comment">// 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve</span></span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reject同理</span></span><br><span class="line">      <span class="keyword">const</span> rejectedFn = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = rejectFn(error);</span><br><span class="line">          x <span class="keyword">instanceof</span> MyPromise ? x.then(resolve, reject) : resolve(x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>._status) &#123;</span><br><span class="line">        <span class="comment">// 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行</span></span><br><span class="line">        <span class="keyword">case</span> PENDING:</span><br><span class="line">          <span class="keyword">this</span>._resolveQueue.push(fulfilledFn);</span><br><span class="line">          <span class="keyword">this</span>._rejectQueue.push(rejectedFn);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当状态已经变为resolve/reject时,直接执行then回调</span></span><br><span class="line">        <span class="keyword">case</span> FULFILLED:</span><br><span class="line">          fulfilledFn(<span class="keyword">this</span>._value); <span class="comment">// this._value是上一个then回调return的值</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">          rejectedFn(<span class="keyword">this</span>._value);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加几个-Promise-的静态-实例方法"><a href="#添加几个-Promise-的静态-实例方法" class="headerlink" title="添加几个 Promise 的静态/实例方法"></a>添加几个 Promise 的静态/实例方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//catch方法其实就是执行一下then的第二个回调</span></span><br><span class="line">  <span class="keyword">catch</span>(rejectFn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, rejectFn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//finally方法</span></span><br><span class="line">  <span class="keyword">finally</span>(callback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">      value =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),             <span class="comment">//执行回调,并returnvalue传递给后面的then</span></span><br><span class="line">      reason =&gt; MyPromise.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)  <span class="comment">//reject同理</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的resolve方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value <span class="comment">//根据规范, 如果参数是Promise实例, 直接return这个实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的reject方法</span></span><br><span class="line">  <span class="keyword">static</span> reject(reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的all方法</span></span><br><span class="line">  <span class="keyword">static</span> all(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseArr.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">        MyPromise.resolve(p).then(</span><br><span class="line">          val =&gt; &#123;</span><br><span class="line">            index++</span><br><span class="line">            result[i] = val</span><br><span class="line">            <span class="keyword">if</span>(index === promiseArr.length) &#123;</span><br><span class="line">              resolve(result)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态的race方法</span></span><br><span class="line">  <span class="keyword">static</span> race(promiseArr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> promiseArr) &#123;</span><br><span class="line">        MyPromise.resolve(p).then(  <span class="comment">//Promise.resolve(p)用于处理传入值不为Promise的情况</span></span><br><span class="line">          value =&gt; &#123;</span><br><span class="line">            resolve(value)        <span class="comment">//注意这个resolve是上边new MyPromise的</span></span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置git教程</title>
      <link href="posts/37056/"/>
      <url>posts/37056/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，下载安装git"><a href="#第一步，下载安装git" class="headerlink" title="第一步，下载安装git"></a>第一步，下载安装git</h2><p>打开 <a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，下载git对应操作系统的版本。</p><p>所有东西下载慢的话就可以去找镜像！官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/git-for-windows/下载对应的版本即可安装！</a></p><h2 id="第二步，检查git是否安装成功"><a href="#第二步，检查git是否安装成功" class="headerlink" title="第二步，检查git是否安装成功"></a>第二步，检查git是否安装成功</h2><p>打开命令行窗口，在cmd中输入git或git–version。</p><h2 id="第三步，配置User信息（默认已注册github账号）"><a href="#第三步，配置User信息（默认已注册github账号）" class="headerlink" title="第三步，配置User信息（默认已注册github账号）"></a>第三步，配置User信息（默认已注册github账号）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。</p><p>这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name &quot;username&quot;    &#x2F;&#x2F;（ &quot;username&quot;是自己的账户名，）</span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email &quot;username@email.com&quot;     &#x2F;&#x2F;(&quot;username@email.com&quot;注册账号时用的邮箱)</span><br></pre></td></tr></table></figure><p>以上命令执行结束后，可用 git config –global –list 命令查看配置是否OK。</p><h2 id="第四步，设置本机绑定SSH公钥，实现免密码登录"><a href="#第四步，设置本机绑定SSH公钥，实现免密码登录" class="headerlink" title="第四步，设置本机绑定SSH公钥，实现免密码登录"></a>第四步，设置本机绑定SSH公钥，实现免密码登录</h2><p>继续刚才的操作，在命令框中输入以下命令:</p><p><code>ssh-keygen -t rsa</code></p><p>然后连敲三次回车键，结束后去系统盘目录下（一般在 C:Users你的用户名.ssh）(mac: /Users/用户/.ssh）查看是否有。ssh文件夹生成，此文件夹中以下两个文件：</p><p>将ssh文件夹中的公钥（ id_rsa.pub）添加到GitHub管理平台中，在GitHub的个人账户的设置中找到如下界面。title随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到key中，然后点击Ass SSH key就好啦。</p><h2 id="第五步，测试配置是否成功"><a href="#第五步，测试配置是否成功" class="headerlink" title="第五步，测试配置是否成功"></a>第五步，测试配置是否成功</h2><p>在Git Bush命令框（就是刚才配置账号和邮箱的命令框）中继续输入以下命令，回车：</p><p><code>ssh -T git@github.com</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于wangEditor实现格式刷</title>
      <link href="posts/19904/"/>
      <url>posts/19904/</url>
      
        <content type="html"><![CDATA[<h2 id="主要实现思路"><a href="#主要实现思路" class="headerlink" title="主要实现思路"></a>主要实现思路</h2><p>前提：vue项目已经引进wangEditor<code>npm install wangeditor @^4.7.7</code>,并搭建好demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;editor-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; 引入 wangEditor</span><br><span class="line">  import wangEditor from &quot;wangeditor&quot;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;wangeditor&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        editor: null,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">      value (val) &#123;</span><br><span class="line">        if(val !&#x3D;&#x3D; editor.txt.html())&#123;</span><br><span class="line">          this.editor.txt.html(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.setEditor()</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    methods: &#123;  </span><br><span class="line">      setEditor () &#123;</span><br><span class="line">        const editor &#x3D; new wangEditor(&#96;#editor-container&#96;); &#x2F;&#x2F; 配置 onchange 回调函数，将数据同步到 vue 中</span><br><span class="line">        editor.config.uploadImgShowBase64 &#x3D; true</span><br><span class="line">        editor.config.zIndex &#x3D; 1</span><br><span class="line">        editor.config.height &#x3D; 400</span><br><span class="line">        editor.config.excludeMenus &#x3D; [</span><br><span class="line">          &#39;emoticon&#39;,</span><br><span class="line">          &#39;video&#39;</span><br><span class="line">        ]</span><br><span class="line">        editor.config.onchange &#x3D; (newHtml) &#x3D;&gt; &#123;</span><br><span class="line">          this.$emit(&#39;input&#39;, newHtml)</span><br><span class="line">        &#125;; &#x2F;&#x2F; 创建编辑器</span><br><span class="line">        editor.create();</span><br><span class="line">        editor.txt.html(this.value);</span><br><span class="line">        this.editor &#x3D; editor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标选择内容后保存选区"><a href="#鼠标选择内容后保存选区" class="headerlink" title="鼠标选择内容后保存选区"></a>鼠标选择内容后保存选区</h3><p>使用mouseup事件和saveRange保存选区</p><h3 id="获取选区样式"><a href="#获取选区样式" class="headerlink" title="获取选区样式"></a>获取选区样式</h3><ul><li>getSelectionContainerElem获取选中节点</li><li>getTargetDom获取目标节点</li><li>getAllStyle获取所有样式</li></ul><h3 id="改变格式刷状态"><a href="#改变格式刷状态" class="headerlink" title="改变格式刷状态"></a>改变格式刷状态</h3><ul><li>getIsBrush获取格式刷状态</li><li>setIsBrush设置格式刷状态</li></ul><h3 id="刷新样式"><a href="#刷新样式" class="headerlink" title="刷新样式"></a>刷新样式</h3><ul><li>getSelectionRangeTopNodes.length判断选取行数</li><li>offset和setStart/setEnd重设选取范围</li><li>getSelectionText和addStyle替换样式</li></ul><h2 id="brushFormat-js"><a href="#brushFormat-js" class="headerlink" title="brushFormat.js"></a>brushFormat.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> ‘wangeditor’;</span><br><span class="line"><span class="keyword">const</span> &#123; BtnMenu &#125; = E;</span><br><span class="line"><span class="keyword">let</span> isBrushOn = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatBrush</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(editor) &#123;</span><br><span class="line"><span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line"><span class="keyword">const</span> $elem = E.$(</span><br><span class="line"><span class="comment">// &lt;div class="w-e-menu" data-title="格式刷" style="font-size:16px"&gt; &lt;i class="icon-geshishua"&gt;&lt;/i&gt; &lt;/div&gt;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">super</span>($elem, editor);</span><br><span class="line"><span class="keyword">this</span>.editor = editor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜单点击事件</span></span><br><span class="line">clickHandler() &#123;</span><br><span class="line"><span class="comment">// 做任何你想做的事情</span></span><br><span class="line"><span class="comment">// 可参考【常用 API】文档，来操作编辑器</span></span><br><span class="line"><span class="keyword">if</span> (!isBrushOn) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.editor.selection.isSelectionEmpty()) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">let</span> domToParse =</span><br><span class="line"><span class="keyword">this</span>.editor.selection.getSelectionContainerElem().elems[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">this</span>.editor.copyStyleList = parseDom(domToParse);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.editor.selection.getRange());</span><br><span class="line"><span class="keyword">this</span>.active();</span><br><span class="line">&#125;</span><br><span class="line">isBrushOn = !isBrushOn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line"><span class="comment">// 1. 激活是什么？光标放在一段加粗、下划线的文本时，菜单栏里的 B 和 U 被激活，如下图</span></span><br><span class="line"><span class="comment">// 2. 什么时候执行这个函数？每次编辑器区域的选区变化（如鼠标操作、键盘操作等），都会触发各个菜单的 tryChangeActive 函数，重新计算菜单的激活状态</span></span><br><span class="line">tryChangeActive() &#123;</span><br><span class="line"><span class="comment">// 激活菜单</span></span><br><span class="line"><span class="comment">// 1. 菜单 DOM 节点会增加一个 .w-e-active 的 css class</span></span><br><span class="line"><span class="comment">// 2. this.isActive === true</span></span><br><span class="line"><span class="comment">// this.active()</span></span><br><span class="line"><span class="comment">// 取消激活菜单</span></span><br><span class="line"><span class="comment">// 1. 菜单 DOM 节点会删掉 .w-e-active</span></span><br><span class="line"><span class="comment">// 2. this.isActive === false</span></span><br><span class="line"><span class="comment">// this.unActive()</span></span><br><span class="line"><span class="keyword">if</span> (isBrushOn) &#123;</span><br><span class="line"><span class="keyword">this</span>.active();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.unActive();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//格式刷状态获取、修改</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getIsBrush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> isBrushOn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setIsBrush</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">isBrushOn = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//粘贴样式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pasteStyle</span>(<span class="params">editor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (editor.selection.isSelectionEmpty()) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//根据wang中选区顶级节点数判断选区行数</span></span><br><span class="line"><span class="keyword">if</span> (editor.selection.getSelectionRangeTopNodes().length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> text = editor.selection.getSelectionText();</span><br><span class="line"><span class="keyword">let</span> targetDom = addStyle(text, editor.copyStyleList);</span><br><span class="line">editor.cmd.do(‘insertHTML’, targetDom.outerHTML);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> elements = [];</span><br><span class="line"><span class="keyword">let</span> range = editor.selection.getRange();</span><br><span class="line"><span class="keyword">let</span> $startElem = editor.selection.getSelectionStartElem();</span><br><span class="line"><span class="comment">//这里调用wangeditor中的dom方法，也可使用原生DOM寻找父节点方法</span></span><br><span class="line"><span class="keyword">let</span> $startElemCon = $startElem.parentUntil(‘p’);</span><br><span class="line"><span class="keyword">let</span> $endElem = editor.selection.getSelectionEndElem();</span><br><span class="line"><span class="keyword">let</span> $endElemCon = $endElem.parentUntil(‘p’);</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘start’,</span><br><span class="line">elem: $startElem,</span><br><span class="line">offset: range.startOffset,</span><br><span class="line">container: $startElemCon</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">while</span> (!$startElemCon.next().equal($endElemCon)) &#123;</span><br><span class="line">$startElemCon = $startElemCon.next();</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘mid’,</span><br><span class="line">elem: $startElemCon,</span><br><span class="line">container: $startElemCon</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">elements.push(&#123;</span><br><span class="line">type: ‘end’,</span><br><span class="line">elem: $endElem,</span><br><span class="line">offset: range.endOffset,</span><br><span class="line">containerType: range.startContainer.nodeType === <span class="number">1</span> ? ‘NODE’ : ‘TEXT’,</span><br><span class="line">container: $endElemCon</span><br><span class="line">&#125;);</span><br><span class="line">elements.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> $container = element.container;</span><br><span class="line">editor.selection.createRangeByElem($container, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> range = editor.selection.getRange();</span><br><span class="line"><span class="keyword">if</span> (element.type === ‘start’) &#123;</span><br><span class="line"><span class="comment">//.firstChild这里用于定义标签中的文本，否则会报错There is no child at offset 4.</span></span><br><span class="line">range.setStart(element.elem.elems[<span class="number">0</span>].firstChild, element.offset);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.type === ‘end’) &#123;</span><br><span class="line">range.setEnd(element.elem.elems[<span class="number">0</span>].firstChild, element.offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> text = editor.selection.getSelectionText();</span><br><span class="line"><span class="keyword">let</span> targetDom = addStyle(text, editor.copyStyleList);</span><br><span class="line">editor.cmd.do(‘insertHTML’, targetDom.outerHTML);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标节点及样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseDom</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> targetDom = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> nodeArray = [];</span><br><span class="line"></span><br><span class="line">getTargetDom(dom);</span><br><span class="line"></span><br><span class="line">getAllStyle(targetDom);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetDom</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> dom.childNodes) &#123;</span><br><span class="line"><span class="keyword">if</span> (i.nodeType === <span class="number">3</span> &amp;&amp; i.nodeValue &amp;&amp; i.nodeValue.trim() !== ‘’) &#123;</span><br><span class="line">targetDom = dom;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getTargetDom(dom.children[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllStyle</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dom) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">const</span> tagName = dom.tagName.toLowerCase();</span><br><span class="line">nodeArray.push(&#123;</span><br><span class="line">tagName: tagName,</span><br><span class="line">attributes: <span class="built_in">Array</span>.from(dom.attributes).map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name: i.name,</span><br><span class="line">value: i.value</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> ([‘p’, ‘h1’, ‘h2’, ‘h3’, ‘h4’, ‘h5’].includes(tagName)) <span class="keyword">return</span>;</span><br><span class="line">getAllStyle(dom.parentNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodeArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据保存节点信息添加样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStyle</span>(<span class="params">text, nodeArray</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> currentNode = <span class="literal">null</span>;</span><br><span class="line">nodeArray.forEach(<span class="function">(<span class="params">ele, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> node = <span class="built_in">document</span>.createElement(ele.tagName);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> ele.attributes) &#123;</span><br><span class="line">node.setAttribute(attr.name, attr.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">node.innerText = text;</span><br><span class="line">currentNode = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.appendChild(currentNode);</span><br><span class="line">currentNode = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo页导入formatBrush-js"><a href="#demo页导入formatBrush-js" class="headerlink" title="demo页导入formatBrush.js"></a>demo页导入formatBrush.js</h2><ul><li><a href="https://www.wangeditor.com/doc/pages/11-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E8%8F%9C%E5%8D%95/01-%E5%BF%AB%E9%80%9F%E6%89%A9%E5%B1%95%E4%B8%80%E4%B8%AA%E8%8F%9C%E5%8D%95.html" target="_blank" rel="noopener">扩展菜单参考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Js </tag>
            
            <tag> 富文本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端vue项目代码格式化配置</title>
      <link href="posts/8236/"/>
      <url>posts/8236/</url>
      
        <content type="html"><![CDATA[<h2 id="eslint-prettier配置"><a href="#eslint-prettier配置" class="headerlink" title="eslint+prettier配置"></a>eslint+prettier配置</h2><p>安装依赖，如果是eslint-plugin-prettier需升级对应eslint依赖才可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-plugin-prettier eslint-config-prettier</span><br><span class="line">npm install --save-dev prettier eslint</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"> "format": "prettier --write \"src/**/*.js\" \"src/**/*.vue\"",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.eslintrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/strongly-recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span><span class="comment">//新增</span></span><br><span class="line">  ]</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"prettier/prettier"</span>: <span class="string">"error"</span><span class="comment">//新增</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.prettierrc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">“printWidth”: <span class="number">80</span>, <span class="comment">// 每行代码长度（默认80）</span></span><br><span class="line">“tabWidth”: <span class="number">2</span>, <span class="comment">// 每个tab相当于多少个空格（默认2）</span></span><br><span class="line">“useTabs”: <span class="literal">false</span>, <span class="comment">// 是否使用tab进行缩进（默认false）</span></span><br><span class="line">“singleQuote”: <span class="literal">true</span>, <span class="comment">// 使用单引号（默认false）</span></span><br><span class="line">“semi”: <span class="literal">true</span>, <span class="comment">// 声明结尾使用分号(默认true)</span></span><br><span class="line">“trailingComma”: “none”, <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（默认none）</span></span><br><span class="line">“bracketSpacing”: <span class="literal">true</span>, <span class="comment">// 对象字面量的大括号间使用空格（默认true）</span></span><br><span class="line">“jsxBracketSameLine”: <span class="literal">false</span>, <span class="comment">// 多行JSX中的&gt;放置在最后一行的结尾，而不是另起一行（默认false）</span></span><br><span class="line">“arrowParens”: “avoid”, <span class="comment">// 只有一个参数的箭头函数的参数是否带圆括号（默认avoid）</span></span><br><span class="line">‘endOfLine’: ‘auto’ <span class="comment">//避免window和linux换行符不同导致报delete (cr)的错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="husky配置"><a href="#husky配置" class="headerlink" title="husky配置"></a>husky配置</h2><p>6.0.0版本前后配置有很大区别可参考下面链接<br>1.<a href="https://www.npmjs.com/package/husky/v/7.0.4" target="_blank" rel="noopener">官网的新配置方式</a><br>2.<a href="https://blog.csdn.net/DoneSpeak/article/details/118469233" target="_blank" rel="noopener">https://blog.csdn.net/DoneSpeak/article/details/118469233</a></p><h2 id="lint-stage"><a href="#lint-stage" class="headerlink" title="lint-stage"></a>lint-stage</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"lint-staged": &#123;</span><br><span class="line">  "src/**/*.&#123;js,json,css,vue&#125;": [</span><br><span class="line">   "prettier --write", // 先执行prettier，再执行eslint，保证代码质量</span><br><span class="line">   "eslint --fix",</span><br><span class="line">   <span class="string">"git add"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="工作空间setting-json-编辑器版本不一样可能会有差异，自行调整配置"><a href="#工作空间setting-json-编辑器版本不一样可能会有差异，自行调整配置" class="headerlink" title="工作空间setting.json(编辑器版本不一样可能会有差异，自行调整配置)"></a>工作空间setting.json(编辑器版本不一样可能会有差异，自行调整配置)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.formatOnSave&quot;:true;</span><br><span class="line">&quot;&quot;:&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
